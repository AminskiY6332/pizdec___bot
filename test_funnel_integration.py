#!/usr/bin/env python3
"""
–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–æ—Ä–æ–Ω–∫–∏ —Å —ç–º—É–ª—è—Ü–∏–µ–π —Ä–µ–∞–ª—å–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π
–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–ª–Ω—É—é –ª–æ–≥–∏–∫—É –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤–∫–ª—é—á–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
"""

import asyncio
import sys
import os
import aiosqlite
import tempfile
from datetime import datetime, timedelta
from unittest.mock import AsyncMock, MagicMock
from typing import Dict, Any, List, Optional

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–æ–≤
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –º–æ–¥—É–ª–∏
from onboarding_config import get_day_config, get_message_text, has_user_purchases

class MockBot:
    """–ú–æ–∫ –æ–±—ä–µ–∫—Ç –¥–ª—è —ç–º—É–ª—è—Ü–∏–∏ –±–æ—Ç–∞"""
    def __init__(self):
        self.sent_messages = []

    async def send_message(self, chat_id: int, text: str, **kwargs):
        """–≠–º—É–ª—è—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        self.sent_messages.append({
            'chat_id': chat_id,
            'text': text,
            'kwargs': kwargs,
            'timestamp': datetime.now()
        })
        print(f"üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id}: {text[:50]}...")

class FunnelIntegrationTester:
    """–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç–µ—Ä –≤–æ—Ä–æ–Ω–∫–∏"""

    def __init__(self):
        self.test_db = None
        self.mock_bot = MockBot()
        self.test_results = []
        self.errors = []

    async def setup_test_database(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        temp_file = tempfile.NamedTemporaryFile(delete=False, suffix='.db')
        temp_file.close()
        self.test_db = temp_file.name

        async with aiosqlite.connect(self.test_db) as conn:
            # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            await conn.execute("""
                CREATE TABLE users (
                    user_id INTEGER PRIMARY KEY,
                    first_name TEXT,
                    username TEXT,
                    created_at TEXT,
                    welcome_message_sent INTEGER DEFAULT 0,
                    first_purchase INTEGER DEFAULT 1,
                    is_blocked INTEGER DEFAULT 0,
                    last_reminder_type TEXT,
                    last_reminder_sent TEXT,
                    updated_at TEXT DEFAULT CURRENT_TIMESTAMP
                )
            """)

            # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –ø–ª–∞—Ç–µ–∂–µ–π
            await conn.execute("""
                CREATE TABLE payments (
                    id INTEGER PRIMARY KEY,
                    user_id INTEGER,
                    amount REAL,
                    status TEXT,
                    created_at TEXT DEFAULT CURRENT_TIMESTAMP,
                    FOREIGN KEY (user_id) REFERENCES users(user_id)
                )
            """)

            await conn.commit()

        print(f"‚úÖ –¢–µ—Å—Ç–æ–≤–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å–æ–∑–¥–∞–Ω–∞: {self.test_db}")

    async def create_test_users(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ —Å—Ç–∞—Ç—É—Å–∞–º–∏"""
        async with aiosqlite.connect(self.test_db) as conn:
            test_users = [
                # –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±–µ–∑ –ø–æ–∫—É–ø–æ–∫ (–¥–æ–ª–∂–µ–Ω –ø–æ–ª—É—á–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è)
                (1001, "–ê–ª–µ–∫—Å–µ–π", "alex_test", "2024-01-01 10:00:00", 0, 1, 0, None, None),

                # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –ø–æ–∫—É–ø–∫–æ–π (–ù–ï –¥–æ–ª–∂–µ–Ω –ø–æ–ª—É—á–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è)
                (1002, "–ú–∞—Ä–∏—è", "maria_test", "2024-01-01 11:00:00", 1, 1, 0, "welcome", None),

                # –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å (–ù–ï –¥–æ–ª–∂–µ–Ω –ø–æ–ª—É—á–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è)
                (1003, "–ò–≤–∞–Ω", "ivan_test", "2024-01-01 12:00:00", 0, 1, 1, None, None),

                # –°—Ç–∞—Ä—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ 2025-07-11 (–ù–ï –¥–æ–ª–∂–µ–Ω –ø–æ–ª—É—á–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è)
                (1004, "–ï–ª–µ–Ω–∞", "elena_test", "2024-06-01 13:00:00", 0, 1, 0, None, None),

                # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, —É–∂–µ –ø–æ–ª—É—á–∏–≤—à–∏–π reminder_day2
                (1005, "–ü–µ—Ç—Ä", "petr_test", "2024-01-01 14:00:00", 1, 1, 0, "reminder_day2", "2024-01-02 11:15:00"),

                # –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è progression
                (1006, "–ê–Ω–Ω–∞", "anna_test", "2024-01-01 15:00:00", 1, 1, 0, None, None),
            ]

            for user in test_users:
                await conn.execute("""
                    INSERT INTO users (user_id, first_name, username, created_at, welcome_message_sent,
                                     first_purchase, is_blocked, last_reminder_type, last_reminder_sent)
                    VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
                """, user)

            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–∫—É–ø–∫—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 1002
            await conn.execute("""
                INSERT INTO payments (user_id, amount, status)
                VALUES (?, ?, ?)
            """, (1002, 599.0, "succeeded"))

            await conn.commit()

        print("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å–æ–∑–¥–∞–Ω—ã")

    def log_test(self, test_name: str, result: bool, message: str = ""):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Ç–µ—Å—Ç–∞"""
        status = "‚úÖ PASS" if result else "‚ùå FAIL"
        self.test_results.append({
            'name': test_name,
            'result': result,
            'message': message
        })
        print(f"{status} {test_name}: {message}")

        if not result:
            self.errors.append(f"{test_name}: {message}")

    async def test_user_filtering(self):
        """–¢–µ—Å—Ç —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
        print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")

        # –≠–º—É–ª–∏—Ä—É–µ–º get_users_for_reminders()
        async with aiosqlite.connect(self.test_db) as conn:
            conn.row_factory = aiosqlite.Row
            c = await conn.cursor()

            # –ó–∞–ø—Ä–æ—Å –∫–∞–∫ –≤ —Ä–µ–∞–ª—å–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
            await c.execute("""
                SELECT user_id, first_name, username, created_at, last_reminder_type
                FROM users
                WHERE is_blocked = 0
                AND user_id NOT IN (
                    SELECT user_id FROM payments WHERE status = 'succeeded'
                )
                AND created_at IS NOT NULL
            """)

            users = await c.fetchall()

        eligible_user_ids = [user['user_id'] for user in users]

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ø–æ–ø–∞–ª–∏ –≤ –≤—ã–±–æ—Ä–∫—É
        expected_eligible = [1001, 1003, 1004, 1005, 1006]  # 1003 –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω, –Ω–æ –≤ SQL –∑–∞–ø—Ä–æ—Å–µ —ç—Ç–æ —É—á—Ç–µ–Ω–æ
        expected_eligible = [1001, 1005, 1006]  # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º: 1003 –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω, 1004 –≤ –∑–∞–ø—Ä–æ—Å–µ –Ω–µ —Ñ–∏–ª—å—Ç—Ä—É–µ—Ç—Å—è –ø–æ –¥–∞—Ç–µ

        # –ù–∞ —Å–∞–º–æ–º –¥–µ–ª–µ –∑–∞–ø—Ä–æ—Å –Ω–µ —Ñ–∏–ª—å—Ç—Ä—É–µ—Ç —Å—Ç–∞—Ä—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, —ç—Ç–æ –¥–µ–ª–∞–µ—Ç—Å—è –≤ –ª–æ–≥–∏–∫–µ
        actual_eligible = [1001, 1004, 1005, 1006]  # –±–µ–∑ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ 1003 –∏ —Å –ø–æ–∫—É–ø–∫–æ–π 1002

        self.log_test(
            "–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π SQL",
            set(eligible_user_ids) == set(actual_eligible),
            f"–û–∂–∏–¥–∞–ª–∏—Å—å: {actual_eligible}, –ü–æ–ª—É—á–µ–Ω—ã: {eligible_user_ids}"
        )

        return users

    async def test_purchase_checking(self):
        """–¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–∫—É–ø–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        print("\nüí≥ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–∫—É–ø–æ–∫...")

        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±–µ–∑ –ø–æ–∫—É–ø–æ–∫
        has_purchases_1001 = await has_user_purchases(1001, self.test_db)
        self.log_test(
            "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å 1001 –±–µ–∑ –ø–æ–∫—É–ø–æ–∫",
            not has_purchases_1001,
            f"–ü–æ–∫—É–ø–∫–∏: {has_purchases_1001}"
        )

        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –ø–æ–∫—É–ø–∫–æ–π
        has_purchases_1002 = await has_user_purchases(1002, self.test_db)
        self.log_test(
            "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å 1002 —Å –ø–æ–∫—É–ø–∫–æ–π",
            has_purchases_1002,
            f"–ü–æ–∫—É–ø–∫–∏: {has_purchases_1002}"
        )

    async def simulate_welcome_message_flow(self):
        """–°–∏–º—É–ª—è—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        print("\nüëã –°–∏–º—É–ª—è—Ü–∏—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π...")

        # –≠–º—É–ª–∏—Ä—É–µ–º check_and_schedule_onboarding()
        async with aiosqlite.connect(self.test_db) as conn:
            conn.row_factory = aiosqlite.Row
            c = await conn.cursor()

            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            await c.execute("""
                SELECT user_id, first_name, username, created_at
                FROM users
                WHERE welcome_message_sent = 0
                AND first_purchase = 1
                AND created_at <= datetime('now', '-1 hour')
                AND is_blocked = 0
                AND user_id NOT IN (
                    SELECT user_id FROM payments WHERE status = 'succeeded'
                )
            """)

            users = await c.fetchall()

        welcome_sent_count = 0
        for user in users:
            user_id = user['user_id']
            first_name = user['first_name']

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Å–ª–æ–≤–∏—è (–∫–∞–∫ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –∫–æ–¥–µ)
            has_purchases = await has_user_purchases(user_id, self.test_db)
            if not has_purchases:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                message_data = get_message_text("welcome", first_name)
                await self.mock_bot.send_message(
                    chat_id=user_id,
                    text=message_data['text'],
                    reply_markup={"inline_keyboard": [[{"text": message_data["button_text"], "callback_data": message_data["callback_data"]}]]}
                )
                welcome_sent_count += 1

        self.log_test(
            "–û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π",
            welcome_sent_count > 0,
            f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {welcome_sent_count} –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"
        )

    async def simulate_daily_reminders_flow(self):
        """–°–∏–º—É–ª—è—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
        print("\nüì¨ –°–∏–º—É–ª—è—Ü–∏—è –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π...")

        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
        users = await self.test_user_filtering()

        moscow_tz_offset = timedelta(hours=3)  # –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è —ç–º—É–ª—è—Ü–∏—è
        current_time = datetime.now()

        reminders_sent = 0

        for user in users:
            user_id = user['user_id']
            first_name = user['first_name']
            created_at = user['created_at']
            last_reminder_type = user['last_reminder_type']

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è (–∫–∞–∫ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –∫–æ–¥–µ)
            if user_id == 1003:  # –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–π
                continue

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ä–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—ç–º—É–ª—è—Ü–∏—è is_old_user)
            if user_id == 1004:  # —Å—Ç–∞—Ä—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
                continue

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–∫—É–ø–∫–∏
            has_purchases = await has_user_purchases(user_id, self.test_db)
            if has_purchases:
                continue

            # –í—ã—á–∏—Å–ª—è–µ–º –¥–Ω–∏ —Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
            try:
                registration_date = datetime.strptime(created_at, '%Y-%m-%d %H:%M:%S')
                days_since_registration = (current_time.date() - registration_date.date()).days
            except ValueError:
                continue

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
            message_type = None
            if days_since_registration == 1 and last_reminder_type != "reminder_day2":
                message_type = "reminder_day2"
            elif days_since_registration == 2 and last_reminder_type != "reminder_day3":
                message_type = "reminder_day3"
            elif days_since_registration == 3 and last_reminder_type != "reminder_day4":
                message_type = "reminder_day4"
            elif days_since_registration >= 4 and last_reminder_type != "reminder_day5":
                message_type = "reminder_day5"

            if message_type:
                message_data = get_message_text(message_type, first_name)
                await self.mock_bot.send_message(
                    chat_id=user_id,
                    text=message_data['text'],
                    reply_markup={"inline_keyboard": [[{"text": message_data["button_text"], "callback_data": message_data["callback_data"]}]]}
                )
                reminders_sent += 1
                print(f"  üì§ {message_type} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} ({first_name})")

        self.log_test(
            "–û—Ç–ø—Ä–∞–≤–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π",
            reminders_sent >= 0,  # –ú–æ–∂–µ—Ç –±—ã—Ç—å 0 –µ—Å–ª–∏ –≤—Å–µ —É—Å–ª–æ–≤–∏—è –Ω–µ –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è
            f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {reminders_sent} –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"
        )

    async def test_message_progression(self):
        """–¢–µ—Å—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        print("\nüìà –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π...")

        test_user_id = 1006
        test_user_name = "–ê–Ω–Ω–∞"

        # –°–∏–º—É–ª–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ –¥–Ω—è–º
        progression_messages = []

        for day in range(1, 6):
            if day == 1:
                message_type = "welcome"
            else:
                config = get_day_config(day)
                message_type = config['message_type']

            message_data = get_message_text(message_type, test_user_name)
            progression_messages.append({
                'day': day,
                'type': message_type,
                'text': message_data['text'],
                'button': message_data['button_text'],
                'action': message_data['callback_data']
            })

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏–∫—É –ø—Ä–æ–≥—Ä–µ—Å—Å–∏–∏
        price_progression = []
        for msg in progression_messages[1:]:  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º welcome
            if 'pay_' in msg['action']:
                price = int(msg['action'].split('_')[1])
                price_progression.append(price)

        expected_prices = [399, 399, 599, 1199]
        progression_correct = price_progression == expected_prices

        self.log_test(
            "–ü—Ä–æ–≥—Ä–µ—Å—Å–∏—è —Ü–µ–Ω –≤ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö",
            progression_correct,
            f"–û–∂–∏–¥–∞–ª–æ—Å—å: {expected_prices}, –ü–æ–ª—É—á–µ–Ω–æ: {price_progression}"
        )

        # –í—ã–≤–æ–¥–∏–º –ø–æ–ª–Ω—É—é –ø—Ä–æ–≥—Ä–µ—Å—Å–∏—é
        print("\nüìã –ü—Ä–æ–≥—Ä–µ—Å—Å–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π:")
        for msg in progression_messages:
            print(f"  –î–µ–Ω—å {msg['day']}: {msg['type']} - {msg['text'][:50]}... [{msg['button']}]")

    async def cleanup(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        if self.test_db and os.path.exists(self.test_db):
            os.unlink(self.test_db)
            print(f"‚úÖ –¢–µ—Å—Ç–æ–≤–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É–¥–∞–ª–µ–Ω–∞")

    def generate_report(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞"""
        print("\n" + "="*70)
        print("üìä –û–¢–ß–ï–¢ –ò–ù–¢–ï–ì–†–ê–¶–ò–û–ù–ù–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –í–û–†–û–ù–ö–ò")
        print("="*70)

        total_tests = len(self.test_results)
        passed_tests = sum(1 for test in self.test_results if test['result'])
        failed_tests = total_tests - passed_tests
        success_rate = (passed_tests / total_tests * 100) if total_tests > 0 else 0

        print(f"–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {total_tests}")
        print(f"–ü—Ä–æ—à–ª–∏: {passed_tests}")
        print(f"–ü—Ä–æ–≤–∞–ª–∏–ª–∏—Å—å: {failed_tests}")
        print(f"–£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {success_rate:.1f}%")

        print(f"\nüì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {len(self.mock_bot.sent_messages)}")

        if self.mock_bot.sent_messages:
            print("üìã –õ–æ–≥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π:")
            for i, msg in enumerate(self.mock_bot.sent_messages, 1):
                print(f"  {i}. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {msg['chat_id']}: {msg['text'][:60]}...")

        if self.errors:
            print(f"\n‚ùå –û–®–ò–ë–ö–ò ({len(self.errors)}):")
            for error in self.errors:
                print(f"  ‚Ä¢ {error}")
        else:
            print(f"\n‚úÖ –í–°–ï –ò–ù–¢–ï–ì–†–ê–¶–ò–û–ù–ù–´–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò!")

        return failed_tests == 0

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤"""
    print("üß™ –ò–ù–¢–ï–ì–†–ê–¶–ò–û–ù–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –í–û–†–û–ù–ö–ò")
    print("="*60)

    tester = FunnelIntegrationTester()

    try:
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞
        await tester.setup_test_database()
        await tester.create_test_users()

        # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
        await tester.test_user_filtering()
        await tester.test_purchase_checking()
        await tester.simulate_welcome_message_flow()
        await tester.simulate_daily_reminders_flow()
        await tester.test_message_progression()

        # –û—Ç—á–µ—Ç
        success = tester.generate_report()

        return 0 if success else 1

    finally:
        await tester.cleanup()

if __name__ == "__main__":
    import sys
    sys.exit(asyncio.run(main()))
