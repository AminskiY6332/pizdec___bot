"""
–ú–æ–¥—É–ª—å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–µ–π –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
"""
import asyncio
from typing import Optional
from aiogram import Bot
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.enums import ParseMode
from aiogram.exceptions import TelegramBadRequest
from handlers.utils import escape_message_parts, send_message_with_fallback
from database import get_user_payments, check_database_user
from config import TARIFFS
from logger import get_logger

logger = get_logger('payment_checker')

async def check_payment_status_and_update_message(
    bot: Bot,
    user_id: int,
    payment_id: str,
    message_id: int,
    tariff_key: str
) -> None:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞ –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 10 –º–∏–Ω—É—Ç.
    """
    logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞ {payment_id} –¥–ª—è user_id={user_id}, message_id={message_id}")

    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        user_payments = await get_user_payments(user_id)
        payment_found = False

        for payment in user_payments:
            if payment[0] == payment_id and payment[5] == 'succeeded':  # payment_id –∏ status
                payment_found = True
                break

        if payment_found:
            # –ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–µ–Ω - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —É—Å–ø–µ—à–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await handle_successful_payment_message(bot, user_id, message_id, tariff_key)
        else:
            # –ü–ª–∞—Ç–µ–∂ –Ω–µ –ø—Ä–æ—à–µ–ª –∏–ª–∏ –≤—Ä–µ–º—è –∏—Å—Ç–µ–∫–ª–æ
            await handle_expired_payment_message(bot, user_id, message_id)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞ {payment_id}: {e}", exc_info=True)

async def handle_successful_payment_message(
    bot: Bot,
    user_id: int,
    message_id: int,
    tariff_key: str
) -> None:
    """
    –û–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞.
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∞—Ä–∏—Ñ–µ
        tariff = TARIFFS.get(tariff_key, {})
        tariff_name = tariff.get("display", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∞—Ä–∏—Ñ")
        photos_count = tariff.get("photos", 0)

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_data = await check_database_user(user_id)
        if user_data:
            current_photos = user_data[0] if len(user_data) > 0 else 0  # generations_left
            current_avatars = user_data[1] if len(user_data) > 1 else 0  # avatar_left
        else:
            current_photos = 0
            current_avatars = 0

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã
        success_text = escape_message_parts(
            "‚úÖ –ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω!\n\n",
            f"üéâ –ü–∞–∫–µ—Ç: {tariff_name}\n",
            f"üì¶ –ü–æ–ª—É—á–µ–Ω–æ: {photos_count} –ø–µ—á–µ–Ω–µ–∫\n\n",
            f"üí∞ –í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å:\n",
            f"üç™ –ü–µ—á–µ–Ω–∫–∏: {current_photos}\n",
            f"üë§ –ê–≤–∞—Ç–∞—Ä—ã: {current_avatars}\n\n",
            "üöÄ –ì–æ—Ç–æ–≤–æ –∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏!",
            version=2
        )

        # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üé® –ù–∞—á–∞—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é", callback_data="back_to_menu")],
            [InlineKeyboardButton(text="üíé –ö—É–ø–∏—Ç—å –µ—â–µ", callback_data="subscribe")]
        ])

        await bot.edit_message_text(
            chat_id=user_id,
            message_id=message_id,
            text=success_text,
            reply_markup=keyboard,
            parse_mode=ParseMode.MARKDOWN_V2
        )

        logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è user_id={user_id}")

    except TelegramBadRequest as e:
        if "message is not modified" in str(e).lower():
            logger.debug(f"–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å –¥–ª—è user_id={user_id}")
        else:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç–µ: {e}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_successful_payment_message: {e}", exc_info=True)

async def handle_expired_payment_message(
    bot: Bot,
    user_id: int,
    message_id: int
) -> None:
    """
    –û–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∏—Å—Ç–µ–∫—à–µ–≥–æ –ø–ª–∞—Ç–µ–∂–∞.
    """
    try:
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –æ–± –∏—Å—Ç–µ—á–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏
        expired_text = escape_message_parts(
            "‚è∞ –í—Ä–µ–º—è –æ–ø–ª–∞—Ç—ã –∏—Å—Ç–µ–∫–ª–æ\n\n",
            "üí≥ –°—Å—ã–ª–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É –±–æ–ª—å—à–µ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞.\n",
            "üîÑ –í—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å —Ç–∞—Ä–∏—Ñ –∑–∞–Ω–æ–≤–æ.\n\n",
            "üí° –ù–æ–≤–∞—è —Å—Å—ã–ª–∫–∞ –±—É–¥–µ—Ç –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ 10 –º–∏–Ω—É—Ç.",
            version=2
        )

        # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Ç–∞—Ä–∏—Ñ–∞–º
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üíé –í—ã–±—Ä–∞—Ç—å —Ç–∞—Ä–∏—Ñ", callback_data="subscribe")],
            [InlineKeyboardButton(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")]
        ])

        await bot.edit_message_text(
            chat_id=user_id,
            message_id=message_id,
            text=expired_text,
            reply_markup=keyboard,
            parse_mode=ParseMode.MARKDOWN_V2
        )

        logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –∏—Å—Ç–µ—á–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏ –æ–ø–ª–∞—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è user_id={user_id}")

    except TelegramBadRequest as e:
        if "message is not modified" in str(e).lower():
            logger.debug(f"–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å –¥–ª—è user_id={user_id}")
        else:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –∏—Å—Ç–µ—á–µ–Ω–∏–∏: {e}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_expired_payment_message: {e}", exc_info=True)
