# handlers/callbacks_admin.py

import asyncio
import logging
import os
import time
from typing import Optional, Dict, Any, List
from datetime import datetime, timedelta
from aiogram import Router, Bot, F
from aiogram.types import CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup, Message
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.exceptions import TelegramBadRequest
from aiogram.enums import ParseMode
from config import ADMIN_IDS, TARIFFS
from generation.images import generate_image

from database import (
    check_database_user, update_user_balance, add_rating, get_user_trainedmodels,
    get_active_trainedmodel, delete_trained_model, get_user_video_tasks,
    get_user_rating_and_registration, get_user_generation_stats, get_user_payments,
    is_user_blocked, user_cache, update_user_credits, check_user_resources, is_old_user,
    get_user_info
)
from handlers.admin_panel import (
    admin_panel, show_admin_stats, admin_show_failed_avatars,
    admin_confirm_delete_all_failed, admin_execute_delete_all_failed
)
from handlers.user_management import (
    show_user_actions, show_user_profile_admin, show_user_avatars_admin,
    change_balance_admin, show_user_logs, delete_user_admin,
    block_user_admin, confirm_block_user, search_users_admin, confirm_reset_avatar, confirm_delete_user
)
from handlers.broadcast import (
    initiate_broadcast, broadcast_message_admin, broadcast_to_paid_users, broadcast_to_non_paid_users
)
from handlers.payments import show_payments_menu, handle_payments_date, handle_manual_date_input, show_replicate_costs
from handlers.visualization import (
    show_visualization, visualize_payments, visualize_registrations, visualize_generations, show_activity_stats
)
from handlers.generation import generate_photo_for_user
from handlers.utils import (
    escape_message_parts, anti_spam
)
from keyboards import create_admin_keyboard
from report import report_generator, send_report_to_admin, delete_report_file

from logger import get_logger
logger = get_logger('main')

async def show_dev_test_payment(query: CallbackQuery, state: FSMContext) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–π —Ç–∞—Ä–∏—Ñ –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞."""
    user_id = query.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –≥–ª–∞–≤–Ω—ã–π —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫
    if user_id != 5667999089:
        await query.answer("‚ùå –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –≥–ª–∞–≤–Ω–æ–º—É —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É", show_alert=True)
        return

    from config import TARIFFS
    from handlers.utils import safe_escape_markdown as escape_md

    test_tariff = TARIFFS.get("—Ç–µ—Å—Ç")

    if not test_tariff:
        await query.message.answer("‚ùå –¢–µ—Å—Ç–æ–≤—ã–π —Ç–∞—Ä–∏—Ñ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.")
        return

    text = escape_md(f"""üß™ –¢–ï–°–¢–û–í–´–ô –¢–ê–†–ò–§ –î–õ–Ø –ü–†–û–í–ï–†–ö–ò –ü–õ–ê–¢–ï–ñ–ï–ô

üíé {test_tariff['display']}
üìù –û–ø–∏—Å–∞–Ω–∏–µ: {test_tariff['description']}
üí∞ –°—É–º–º–∞: {test_tariff['amount']:.2f}‚ÇΩ
üç™ –ü–µ—á–µ–Ω—å–∫–∏: {test_tariff['photos']}

üîó –≠—Ç–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Ç–∞—Ä–∏—Ñ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã.
–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –µ–≥–æ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è webhook –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π.""", version=2)

    from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=test_tariff["display"], callback_data=test_tariff["callback"])],
        [InlineKeyboardButton(text="üîô –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel")]
    ])

    await query.message.edit_text(
        text,
        reply_markup=keyboard,
        parse_mode=ParseMode.MARKDOWN_V2
    )

    logger.info(f"–¢–µ—Å—Ç–æ–≤—ã–π —Ç–∞—Ä–∏—Ñ –ø–æ–∫–∞–∑–∞–Ω –≥–ª–∞–≤–Ω–æ–º—É —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É user_id={user_id} —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")
    await query.answer()

# –°–æ–∑–¥–∞–Ω–∏–µ —Ä–æ—É—Ç–µ—Ä–∞ –¥–ª—è callback'–æ–≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
admin_callbacks_router = Router()

async def handle_admin_callback(query: CallbackQuery, state: FSMContext) -> Optional[int]:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback-–∑–∞–ø—Ä–æ—Å—ã –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏."""
    user_id = query.from_user.id
    bot = query.bot

    if user_id not in ADMIN_IDS:
        await query.answer("‚õî –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤", show_alert=True)
        return

    callback_data = query.data
    logger.info(f"Callback –æ—Ç user_id={user_id}: {callback_data}")

    try:
        if callback_data == "admin_panel":
            await state.clear()
            await state.update_data(user_id=user_id)
            await admin_panel(query.message, state, user_id=user_id)
        elif callback_data == "admin_stats":
            await state.update_data(user_id=user_id)
            await handle_admin_report_users(query, state)
        elif callback_data.startswith("admin_stats_page_"):
            await state.update_data(user_id=user_id)
            await handle_admin_report_users(query, state)
        elif callback_data == "admin_replicate_costs":
            await state.update_data(user_id=user_id)
            await show_replicate_costs(query, state)
        elif callback_data == "admin_payments":
            await state.update_data(user_id=user_id)
            await handle_admin_report_payments(query, state)
        elif callback_data.startswith("payments_date_"):
            dates = callback_data.replace("payments_date_", "").split("_")
            start_date, end_date = dates[0], dates[1]
            await state.update_data(user_id=user_id)
            await handle_payments_date(query, state, start_date, end_date)
        elif callback_data == "payments_manual_date":
            await state.update_data(user_id=user_id)
            await handle_manual_date_input(query, state)
        elif callback_data == "admin_activity_stats":
            await state.update_data(user_id=user_id)
            await handle_admin_report_activity(query, state)
        elif callback_data.startswith("activity_"):
            parts = callback_data.split("_")
            if len(parts) == 3:
                days = int(parts[2])
                end_date = datetime.now().strftime('%Y-%m-%d')
                start_date = (datetime.now() - timedelta(days=days)).strftime('%Y-%m-%d')
                await state.update_data(user_id=user_id)
                await show_activity_stats(query, state)
        elif callback_data == "admin_referral_stats":
            await state.update_data(user_id=user_id)
            await handle_admin_report_referrals(query, state)
        elif callback_data == "admin_visualization":
            await state.update_data(user_id=user_id)
            await show_visualization(query, state)
        elif callback_data.startswith("delete_report_"):
            filename = callback_data.replace("delete_report_", "")
            await handle_delete_report(query, state, filename)
        elif callback_data.startswith("user_actions_"):
            await state.update_data(user_id=user_id)
            await show_user_actions(query, state)
        elif callback_data.startswith("view_user_profile_"):
            target_user_id = int(callback_data.split("_")[-1])
            await state.update_data(user_id=user_id)
            await show_user_profile_admin(query, state, target_user_id)
        elif callback_data.startswith("user_avatars_"):
            target_user_id = int(callback_data.split("_")[-1])
            await state.update_data(user_id=user_id)
            await show_user_avatars_admin(query, state, target_user_id)
        elif callback_data.startswith("change_balance_"):
            await state.update_data(user_id=user_id)
            await change_balance_admin(query, state)
        elif callback_data.startswith("user_logs_"):
            target_user_id = int(callback_data.split("_")[-1])
            await state.update_data(user_id=user_id)
            await show_user_logs(query, state, target_user_id)
        elif callback_data.startswith("admin_generate:"):
            target_user_id = int(callback_data.split(":")[1])
            await state.update_data(user_id=user_id)
            await generate_photo_for_user(query, state, target_user_id)
        elif callback_data.startswith("admin_send_gen:"):
            target_user_id = int(callback_data.split(":")[1])
            user_data = await state.get_data()
            generation_data = user_data.get(f'last_admin_generation_{target_user_id}')
            if generation_data and generation_data.get('image_urls'):
                try:
                    await query.bot.send_photo(
                        chat_id=target_user_id,
                        photo=generation_data['image_urls'][0],
                        caption=escape_message_parts(
                            "üéÅ –î–ª—è –≤–∞—Å —Å–æ–∑–¥–∞–Ω–æ –Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ!",
                            version=2
                        ),
                        parse_mode=ParseMode.MARKDOWN_V2
                    )
                    await query.answer("‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é!", show_alert=True)
                except Exception as e:
                    await query.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}.", show_alert=True)
            else:
                await query.answer("‚ùå –î–∞–Ω–Ω—ã–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.", show_alert=True)
        elif callback_data.startswith("admin_video:"):
            target_user_id = int(callback_data.split(":")[1])
            await state.update_data(user_id=user_id)
            await generate_video_for_user(query, state, target_user_id)
        elif callback_data.startswith("delete_user_"):
            target_user_id = int(callback_data.split("_")[-1])
            await state.update_data(user_id=user_id)
            await delete_user_admin(query, state, target_user_id)
        elif callback_data.startswith("confirm_delete_user_"):
            target_user_id = int(callback_data.split("_")[-1])
            await state.update_data(user_id=user_id)
            await confirm_delete_user(query, state, target_user_id)
        elif callback_data.startswith("block_user_"):
            await state.update_data(user_id=user_id)
            await block_user_admin(query, state)
        elif callback_data.startswith("confirm_block_user_"):
            await state.update_data(user_id=user_id)
            await confirm_block_user(query, state, bot)
        elif callback_data.startswith("reset_avatar_"):
            target_user_id = int(callback_data.split("_")[-1])
            await state.update_data(user_id=user_id)
            await confirm_reset_avatar(query, state, target_user_id)
        elif callback_data == "admin_failed_avatars":
            await state.update_data(user_id=user_id)
            await admin_show_failed_avatars(query, state)
        elif callback_data == "dev_test_payment":
            await state.update_data(user_id=user_id)
            await show_dev_test_payment(query, state)
        elif callback_data == "admin_delete_all_failed":
            await state.update_data(user_id=user_id)
            await admin_confirm_delete_all_failed(query, state)
        elif callback_data == "admin_confirm_delete_all":
            await state.update_data(user_id=user_id)
            await admin_execute_delete_all_failed(query, state)
        elif callback_data == "send_broadcast_no_text":
            user_data = await state.get_data()
            broadcast_type = user_data.get('broadcast_type')
            media_type = user_data.get('admin_media_type')
            media_id = user_data.get('admin_media_id')
            if not broadcast_type:
                await query.answer("‚ùå –¢–∏–ø —Ä–∞—Å—Å—ã–ª–∫–∏ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω.", show_alert=True)
                text = escape_message_parts(
                    "‚ùå –û—à–∏–±–∫–∞: —Ç–∏–ø —Ä–∞—Å—Å—ã–ª–∫–∏ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω.",
                    version=2
                )
                await query.message.edit_text(
                    text,
                    reply_markup=await create_admin_keyboard(user_id),
                    parse_mode=ParseMode.MARKDOWN_V2
                )
                return
            await query.answer("üì¢ –ó–∞–ø—É—Å–∫–∞—é —Ä–∞—Å—Å—ã–ª–∫—É –±–µ–∑ —Ç–µ–∫—Å—Ç–∞...")
            if broadcast_type == 'all':
                asyncio.create_task(broadcast_message_admin(bot, "", user_id, media_type, media_id))
            elif broadcast_type == 'paid':
                asyncio.create_task(broadcast_to_paid_users(bot, "", user_id, media_type, media_id))
            elif broadcast_type == 'non_paid':
                asyncio.create_task(broadcast_to_non_paid_users(bot, "", user_id, media_type, media_id))
            elif broadcast_type.startswith('with_payment_'):
                audience_type = broadcast_type.replace('with_payment_', '')
                reply_markup = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="–î–∞, —Ö–æ—á—É! üí≥", callback_data="subscribe")]
                ])
                if audience_type == 'all':
                    asyncio.create_task(broadcast_message_admin(bot, "", user_id, media_type, media_id, reply_markup))
                elif audience_type == 'paid':
                    asyncio.create_task(broadcast_to_paid_users(bot, "", user_id, media_type, media_id, reply_markup))
                elif audience_type == 'non_paid':
                    asyncio.create_task(broadcast_to_non_paid_users(bot, "", user_id, media_type, media_id, reply_markup))
            await state.clear()
            text = escape_message_parts(
                "üì¢ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞!",
                version=2
            )
            await query.message.edit_text(
                text,
                reply_markup=await create_admin_keyboard(user_id),
                parse_mode=ParseMode.MARKDOWN_V2
            )
        elif callback_data == "admin_give_subscription":
            await state.update_data(user_id=user_id)
            await handle_admin_give_subscription_callback(query, state, user_id)
        elif callback_data.startswith("give_subscription_for_user_"):
            target_user_id = int(callback_data.split("_")[-1])
            await state.update_data(user_id=user_id)
            await handle_admin_give_sub_to_user_callback(query, state, user_id, target_user_id)
        elif callback_data.startswith("add_photos_to_user_"):
            target_user_id = int(callback_data.split("_")[-1])
            await state.update_data(user_id=user_id)
            await handle_admin_add_resources_callback(query, state, user_id, target_user_id, "photo", 20)
        elif callback_data.startswith("add_avatar_to_user_"):
            target_user_id = int(callback_data.split("_")[-1])
            await state.update_data(user_id=user_id)
            await handle_admin_add_resources_callback(query, state, user_id, target_user_id, "avatar", 1)
        elif callback_data.startswith("chat_with_user_"):
            target_user_id = int(callback_data.split("_")[-1])
            await state.update_data(user_id=user_id)
            await handle_admin_chat_with_user_callback(query, state, user_id, target_user_id)
        elif callback_data == "admin_search_user":
            await state.update_data(user_id=user_id)
            await search_users_admin(query, state)
        elif callback_data.startswith("confirm_addcook_"):
            parts = callback_data.split("_")
            target_user_id = int(parts[2])
            amount = int(parts[3])
            await state.update_data(user_id=user_id)
            await handle_confirm_addcook(query, state, user_id, target_user_id, amount)
        elif callback_data.startswith("confirm_delcook_"):
            parts = callback_data.split("_")
            target_user_id = int(parts[2])
            amount = int(parts[3])
            await state.update_data(user_id=user_id)
            await handle_confirm_delcook(query, state, user_id, target_user_id, amount)
        elif callback_data.startswith("confirm_addnew_"):
            target_user_id = int(callback_data.split("_")[2])
            await state.update_data(user_id=user_id)
            await handle_confirm_addnew(query, state, user_id, target_user_id)
        elif callback_data.startswith("confirm_delnew_"):
            target_user_id = int(callback_data.split("_")[2])
            await state.update_data(user_id=user_id)
            await handle_confirm_delnew(query, state, user_id, target_user_id)
        elif callback_data == "cancel_admin_operation":
            await state.update_data(user_id=user_id)
            await handle_cancel_admin_operation(query, state, user_id)
        else:
            logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π admin callback_data: {callback_data} –¥–ª—è user_id={user_id}")
            text = escape_message_parts(
                "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ.",
                " –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                version=2
            )
            await query.message.edit_text(
                text,
                reply_markup=await create_admin_keyboard(user_id),
                parse_mode=ParseMode.MARKDOWN_V2
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback –¥–ª—è user_id={user_id}: {e}", exc_info=True)
        text = escape_message_parts(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.",
            " –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
            version=2
        )
        await query.message.edit_text(
            text,
            reply_markup=await create_admin_keyboard(user_id),
            parse_mode=ParseMode.MARKDOWN_V2
        )

async def handle_admin_add_resources_callback(query: CallbackQuery, state: FSMContext, user_id: int, target_user_id: int, resource_type: str, amount: int) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤ (—Ñ–æ—Ç–æ –∏–ª–∏ –∞–≤–∞—Ç–∞—Ä—ã) –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    logger.debug(f"–î–æ–±–∞–≤–ª–µ–Ω–∏–µ {amount} {resource_type} –¥–ª—è target_user_id={target_user_id} –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º user_id={user_id}")
    await send_typing_action(query.bot, user_id)
    target_user_info = await check_database_user(target_user_id)
    if not target_user_info or (target_user_info[3] is None and target_user_info[8] is None):
        text = escape_message_parts(
            f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID `{target_user_id}` –Ω–µ –Ω–∞–π–¥–µ–Ω.",
            version=2
        )
        await query.message.edit_text(
            text,
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="üîô –ö –¥–µ–π—Å—Ç–≤–∏—è–º", callback_data=f"user_actions_{target_user_id}")]]),
            parse_mode=ParseMode.MARKDOWN_V2
        )
        return
    action = "increment_photo" if resource_type == "photo" else "increment_avatar"
    resource_name = "—Ñ–æ—Ç–æ" if resource_type == "photo" else "–∞–≤–∞—Ç–∞—Ä"
    try:
        success = await update_user_balance(target_user_id, action, amount=amount)
        logger.debug(f"update_user_balance –¥–ª—è user_id={target_user_id}, action={action}, amount={amount}, —Ä–µ–∑—É–ª—å—Ç–∞—Ç={success}")
        if not success:
            raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Ä–µ—Å—É—Ä—Å—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
        text = escape_message_parts(
            f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ {amount} {resource_name} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ID `{target_user_id}`.",
            version=2
        )
        await query.message.edit_text(
            text,
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="üîô –ö –¥–µ–π—Å—Ç–≤–∏—è–º", callback_data=f"user_actions_{target_user_id}")]]),
            parse_mode=ParseMode.MARKDOWN_V2
        )
        try:
            await query.bot.send_message(
                chat_id=target_user_id,
                text=escape_message_parts(
                    f"üéâ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –¥–æ–±–∞–≤–∏–ª –≤–∞–º {amount} {resource_name}!",
                    version=2
                ),
                parse_mode=ParseMode.MARKDOWN_V2
            )
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_user_id}: {e}")
        logger.info(f"–£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ {amount} {resource_type} –¥–ª—è user_id={target_user_id}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è {resource_type} –¥–ª—è user_id={target_user_id}: {e}", exc_info=True)
        text = escape_message_parts(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ {resource_name} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID `{target_user_id}`: {str(e)}.",
            version=2
        )
        await query.message.edit_text(
            text,
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="üîô –ö –¥–µ–π—Å—Ç–≤–∏—è–º", callback_data=f"user_actions_{target_user_id}")]]),
            parse_mode=ParseMode.MARKDOWN_V2
        )

async def handle_admin_chat_with_user_callback(query: CallbackQuery, state: FSMContext, user_id: int, target_user_id: int) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."""
    await state.update_data(awaiting_chat_message=target_user_id, user_id=user_id)
    text = escape_message_parts(
        f"üí¨ –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ID `{target_user_id}`.\n\n",
        "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è:",
        version=2
    )
    await query.message.edit_text(
        text,
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[[InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"user_actions_{target_user_id}")]]
        ),
        parse_mode=ParseMode.MARKDOWN_V2
    )
    await query.answer()

async def handle_admin_style_selection(query: CallbackQuery, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å—Ç–∏–ª—è –¥–ª—è –∞–¥–º–∏–Ω—Å–∫–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏."""
    user_id = query.from_user.id

    if user_id not in ADMIN_IDS:
        await query.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.", show_alert=True)
        return

    style = query.data.replace('admin_style_', '')
    user_data = await state.get_data()
    target_user_id = user_data.get('admin_generation_for_user')

    if not target_user_id:
        await query.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω —Ü–µ–ª–µ–≤–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.", show_alert=True)
        return

    if style == 'custom':
        text = escape_message_parts(
            f"‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:\n\n",
            f"–¢—Ä–∏–≥–≥–µ—Ä-—Å–ª–æ–≤–æ `{user_data.get('active_trigger_word', '')}` –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.",
            version=2
        )
        await query.message.edit_text(
            text,
            parse_mode=ParseMode.MARKDOWN_V2
        )
        await state.update_data(awaiting_admin_prompt=True, admin_generation_style='custom', user_id=user_id)
    else:
        text = escape_message_parts(
            f"‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ —Å—Ç–∏–ª–µ `{style}`...",
            version=2
        )
        await query.message.edit_text(
            text,
            parse_mode=ParseMode.MARKDOWN_V2
        )

        await state.update_data(style_name=style, prompt=get_style_prompt(style), user_id=user_id)
        await generate_image(query, state)

def get_style_prompt(style: str) -> str:
    """–ü–æ–ª—É—á–∞–µ—Ç –ø—Ä–æ–º–ø—Ç –¥–ª—è –∑–∞–¥–∞–Ω–Ω–æ–≥–æ —Å—Ç–∏–ª—è."""
    style_prompts_dict = {
        'portrait': "professional portrait photo, studio lighting, high quality",
        'casual': "casual photo, natural lighting, relaxed pose",
        'artistic': "artistic photo, creative composition, dramatic lighting",
        'business': "business portrait, formal attire, professional setting",
        'outdoor': "outdoor photo, natural environment, golden hour lighting",
        'indoor': "indoor photo, cozy interior, warm lighting",
    }
    return style_prompts_dict.get(style, "high quality photo")

async def handle_admin_custom_prompt(message: Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞ –æ—Ç –∞–¥–º–∏–Ω–∞."""
    user_data = await state.get_data()
    if not user_data.get('awaiting_admin_prompt'):
        return

    user_id = message.from_user.id
    if user_id not in ADMIN_IDS:
        return

    custom_prompt = message.text
    target_user_id = user_data.get('admin_generation_for_user')

    if not target_user_id:
        return

    status_message = await message.answer(
        escape_message_parts(
            "‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –≤–∞—à–∏–º –ø—Ä–æ–º–ø—Ç–æ–º...",
            version=2
        ),
        parse_mode=ParseMode.MARKDOWN_V2
    )

    await state.update_data(awaiting_admin_prompt=False, prompt=custom_prompt, style_name='custom', user_id=user_id)

    await generate_image(message, state)

    try:
        await status_message.delete()
    except:
        pass

async def handle_admin_send_generation(query: CallbackQuery, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."""
    from handlers.generation import process_image_generation
    from generation.utils import download_images_parallel

    admin_user_id = query.from_user.id
    await query.answer()

    if admin_user_id not in ADMIN_IDS:
        logger.error(f"–ü–æ–ø—ã—Ç–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –±–µ–∑ –ø—Ä–∞–≤: user_id={admin_user_id}")
        await query.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.", show_alert=True)
        return

    parts = query.data.split(':')
    target_user_id = int(parts[1])
    user_data = await state.get_data()
    generation_data = user_data.get(f'last_admin_generation_{target_user_id}')

    logger.info(f"handle_admin_send_generation: admin_user_id={admin_user_id}, target_user_id={target_user_id}")
    logger.debug(f"–î–∞–Ω–Ω—ã–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {generation_data}")

    if not generation_data or not generation_data.get('image_urls'):
        logger.error(f"–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–ª—è target_user_id={target_user_id}")
        text = escape_message_parts(
            f"‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID `{target_user_id}`.",
            version=2
        )
        await query.message.edit_text(
            text,
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ö –¥–µ–π—Å—Ç–≤–∏—è–º", callback_data=f"user_actions_{target_user_id}")]
            ]),
            parse_mode=ParseMode.MARKDOWN_V2
        )
        await query.answer("‚ùå –î–∞–Ω–Ω—ã–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.", show_alert=True)
        return

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –µ—Å–ª–∏ –ø—É—Ç–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç
    image_paths = user_data.get('last_admin_image_paths', [])
    if not image_paths:
        logger.info(f"–ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è target_user_id={target_user_id}")
        image_paths = await download_images_parallel(generation_data['image_urls'], target_user_id)
        if not image_paths:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è target_user_id={target_user_id}")
            text = escape_message_parts(
                f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID `{target_user_id}`.",
                version=2
            )
            await query.message.edit_text(
                text,
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üîô –ö –¥–µ–π—Å—Ç–≤–∏—è–º", callback_data=f"user_actions_{target_user_id}")]
                ]),
                parse_mode=ParseMode.MARKDOWN_V2
            )
            await query.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.", show_alert=True)
            return
        await state.update_data(last_admin_image_paths=image_paths)

    # –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∞–¥–º–∏–Ω—Å–∫–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    await state.update_data(
        is_admin_generation=True,
        admin_generation_for_user=target_user_id,
        message_recipient=admin_user_id,
        generation_target_user=target_user_id,
        original_admin_user=admin_user_id,
        user_id=admin_user_id
    )

    try:
        logger.info(f"–í—ã–∑–æ–≤ process_image_generation –¥–ª—è target_user_id={target_user_id}")
        # –í—ã–∑—ã–≤–∞–µ–º process_image_generation –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
        await process_image_generation(
            bot=query.bot,
            state=state,
            user_id=target_user_id,
            image_paths=image_paths,
            duration=generation_data.get('duration', 0.0),
            aspect_ratio=generation_data.get('aspect_ratio', '1:1'),
            generation_type=generation_data.get('generation_type', 'with_avatar'),
            model_key=generation_data.get('model_key', 'flux-trained'),
            admin_user_id=admin_user_id
        )
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        text = escape_message_parts(
            f"‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ID `{target_user_id}`.\n",
            f"üé® –°—Ç–∏–ª—å: {generation_data.get('style', '–ö–∞—Å—Ç–æ–º–Ω—ã–π —Å—Ç–∏–ª—å')}",
            version=2
        )
        await query.message.edit_text(
            text,
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ö –¥–µ–π—Å—Ç–≤–∏—è–º", callback_data=f"user_actions_{target_user_id}")]
            ]),
            parse_mode=ParseMode.MARKDOWN_V2
        )
        await query.answer("‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é!", show_alert=True)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ID {target_user_id}: {e}", exc_info=True)
        text = escape_message_parts(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ID `{target_user_id}`: {str(e)}.",
            version=2
        )
        await query.message.edit_text(
            text,
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ö –¥–µ–π—Å—Ç–≤–∏—è–º", callback_data=f"user_actions_{target_user_id}")]
            ]),
            parse_mode=ParseMode.MARKDOWN_V2
        )
        await query.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}.", show_alert=True)

async def handle_admin_regenerate(query: CallbackQuery, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞–¥–º–∏–Ω–æ–º."""
    await query.answer()

    if query.from_user.id not in ADMIN_IDS:
        return

    target_user_id = int(query.data.split(':')[1])
    await state.update_data(user_id=query.from_user.id)
    await generate_photo_for_user(query, state, target_user_id)

async def handle_admin_give_subscription_callback(query: CallbackQuery, state: FSMContext, user_id: int) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–¥–∞—á–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."""
    text = escape_message_parts(
        "üìù –í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –≤—ã–¥–∞—á–∏ –ø–æ–¥–ø–∏—Å–∫–∏:",
        version=2
    )
    await query.message.edit_text(
        text,
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_panel")]]),
        parse_mode=ParseMode.MARKDOWN_V2
    )
    await state.update_data(awaiting_subscription_user_id=True, user_id=user_id)

async def handle_admin_give_sub_to_user_callback(query: CallbackQuery, state: FSMContext, user_id: int, target_user_id: int) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤—ã–¥–∞—á–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."""
    target_user_info = await check_database_user(target_user_id)
    if not target_user_info or (target_user_info[3] is None and target_user_info[8] is None):
        text = escape_message_parts(
            f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID `{target_user_id}` –Ω–µ –Ω–∞–π–¥–µ–Ω.",
            version=2
        )
        await query.message.edit_text(
            text,
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton("üîô –ö –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏", callback_data="admin_panel")]]),
            parse_mode=ParseMode.MARKDOWN_V2
        )
        return

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(f"üé´ {tariff['name']}", callback_data=f"confirm_sub_{target_user_id}_{tariff_id}")]
        for tariff_id, tariff in TARIFFS.items()
    ] + [[InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_panel")]])

    text = escape_message_parts(
        f"üë§ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID `{target_user_id}`:",
        version=2
    )
    await query.message.edit_text(
        text,
        reply_markup=keyboard,
        parse_mode=ParseMode.MARKDOWN_V2
    )

# –ù–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç—á–µ—Ç–æ–≤
async def handle_admin_report_users(query: CallbackQuery, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç—á–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    try:
        await query.answer("üìä –°–æ–∑–¥–∞—é –æ—Ç—á–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞
        await query.message.edit_text(
            "üìä –°–æ–∑–¥–∞—é –æ—Ç—á–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...\n‚è≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚è≥ –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞...", callback_data="ignore")]
            ])
        )

        # –°–æ–∑–¥–∞–µ–º –æ—Ç—á–µ—Ç
        filepath = await report_generator.create_users_report()

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç
        await send_report_to_admin(query.bot, query.from_user.id, filepath, "–û—Ç—á–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")

        # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback
        await query.answer("‚úÖ –û—Ç—á–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–æ–∑–¥–∞–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}", exc_info=True)
        await query.answer(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞: {str(e)}")

async def handle_admin_report_activity(query: CallbackQuery, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç—á–µ—Ç–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
    try:
        await query.answer("üìä –°–æ–∑–¥–∞—é –æ—Ç—á–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏...")

        await query.message.edit_text(
            "üìä –°–æ–∑–¥–∞—é –æ—Ç—á–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏...\n‚è≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚è≥ –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞...", callback_data="ignore")]
            ])
        )

        filepath = await report_generator.create_activity_report()
        await send_report_to_admin(query.bot, query.from_user.id, filepath, "–û—Ç—á–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏")
        await query.answer("‚úÖ –û—Ç—á–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Å–æ–∑–¥–∞–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {e}", exc_info=True)
        await query.answer(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞: {str(e)}")

async def handle_admin_report_payments(query: CallbackQuery, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç—á–µ—Ç–∞ –ø–ª–∞—Ç–µ–∂–µ–π"""
    try:
        await query.answer("üìà –°–æ–∑–¥–∞—é –æ—Ç—á–µ—Ç –ø–ª–∞—Ç–µ–∂–µ–π...")

        await query.message.edit_text(
            "üìà –°–æ–∑–¥–∞—é –æ—Ç—á–µ—Ç –ø–ª–∞—Ç–µ–∂–µ–π...\n‚è≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚è≥ –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞...", callback_data="ignore")]
            ])
        )

        filepath = await report_generator.create_payments_report()
        await send_report_to_admin(query.bot, query.from_user.id, filepath, "–û—Ç—á–µ—Ç –ø–ª–∞—Ç–µ–∂–µ–π")
        await query.answer("‚úÖ –û—Ç—á–µ—Ç –ø–ª–∞—Ç–µ–∂–µ–π —Å–æ–∑–¥–∞–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞ –ø–ª–∞—Ç–µ–∂–µ–π: {e}", exc_info=True)
        await query.answer(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞: {str(e)}")

async def handle_admin_report_referrals(query: CallbackQuery, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç—á–µ—Ç–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤"""
    try:
        await query.answer("üîó –°–æ–∑–¥–∞—é –æ—Ç—á–µ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤...")

        await query.message.edit_text(
            "üîó –°–æ–∑–¥–∞—é –æ—Ç—á–µ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤...\n‚è≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚è≥ –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞...", callback_data="ignore")]
            ])
        )

        filepath = await report_generator.create_referrals_report()
        await send_report_to_admin(query.bot, query.from_user.id, filepath, "–û—Ç—á–µ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤")
        await query.answer("‚úÖ –û—Ç—á–µ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ —Å–æ–∑–¥–∞–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: {e}", exc_info=True)
        await query.answer(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞: {str(e)}")

async def handle_delete_report(query: CallbackQuery, state: FSMContext, filename: str) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞ –æ—Ç—á–µ—Ç–∞"""
    try:
        import os
        import tempfile
        filepath = os.path.join(tempfile.gettempdir(), filename)
        await delete_report_file(filepath)
        await query.answer("üóë –§–∞–π–ª –æ—Ç—á–µ—Ç–∞ —É–¥–∞–ª–µ–Ω!")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞ –æ—Ç—á–µ—Ç–∞: {e}")
        await query.answer(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {str(e)}")

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
@admin_callbacks_router.callback_query(
    lambda c: c.data and c.data.startswith((
        'admin_', 'user_actions_', 'view_user_profile_', 'user_avatars_', 'user_logs_', 'change_balance_',
        'delete_user_', 'block_user_', 'confirm_delete_user_', 'confirm_block_user_', 'payments_',
        'visualize_', 'reset_avatar_', 'add_photos_to_user_', 'add_avatar_to_user_', 'chat_with_user_',
        'give_subscription_', 'activity_', 'delete_report_', 'confirm_addcook_', 'confirm_delcook_',
        'confirm_addnew_', 'confirm_delnew_', 'cancel_admin_operation'
    )) and not c.data.startswith('admin_style_')
)
async def admin_callback_handler(query: CallbackQuery, state: FSMContext) -> None:
    await handle_admin_callback(query, state)

async def handle_confirm_addcook(query: CallbackQuery, state: FSMContext, admin_user_id: int, target_user_id: int, amount: int) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–µ—á–µ–Ω–µ–∫"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        target_user_info = await get_user_info(target_user_id)
        if not target_user_info:
            text = escape_message_parts(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {target_user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.", version=2)
            await query.message.edit_text(text, parse_mode=ParseMode.MARKDOWN_V2)
            await query.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return

        # –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—á–µ–Ω—å–∫–∏
        success = await update_user_credits(target_user_id, "increment_photo", amount)

        if success:
            # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            updated_user_info = await get_user_info(target_user_id)
            current_cookies = updated_user_info.get('generations_left', 0) if updated_user_info else 0

            display_name = target_user_info.get('first_name') or target_user_info.get('username') or f"ID {target_user_id}"
            username_display = f"(@{target_user_info.get('username')})" if target_user_info.get('username') else ""

            success_text = escape_message_parts(f"""‚úÖ –ü–µ—á–µ–Ω—å–∫–∏ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã!

üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {display_name} {username_display}
üÜî ID: {target_user_id}
‚ûï –î–æ–±–∞–≤–ª–µ–Ω–æ: {amount} –ø–µ—á–µ–Ω–µ–∫
üìä –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {current_cookies} –ø–µ—á–µ–Ω–µ–∫

–û–ø–µ—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º ID {admin_user_id}""", version=2)

            await query.message.edit_text(success_text, parse_mode=ParseMode.MARKDOWN_V2)
            await query.answer("‚úÖ –ü–µ—á–µ–Ω—å–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã!", show_alert=True)

            logger.info(f"–ê–¥–º–∏–Ω {admin_user_id} –¥–æ–±–∞–≤–∏–ª {amount} –ø–µ—á–µ–Ω–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_user_id}")
        else:
            error_text = escape_message_parts(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–µ—á–µ–Ω–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_user_id}", version=2)
            await query.message.edit_text(error_text, parse_mode=ParseMode.MARKDOWN_V2)
            await query.answer("‚ùå –û—à–∏–±–∫–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏", show_alert=True)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_confirm_addcook: {e}", exc_info=True)
        error_text = escape_message_parts("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏", version=2)
        await query.message.edit_text(error_text, parse_mode=ParseMode.MARKDOWN_V2)
        await query.answer("‚ùå –û—à–∏–±–∫–∞", show_alert=True)

async def handle_confirm_delcook(query: CallbackQuery, state: FSMContext, admin_user_id: int, target_user_id: int, amount: int) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è –ø–µ—á–µ–Ω–µ–∫"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        target_user_info = await get_user_info(target_user_id)
        if not target_user_info:
            text = escape_message_parts(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {target_user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.", version=2)
            await query.message.edit_text(text, parse_mode=ParseMode.MARKDOWN_V2)
            await query.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return

        current_cookies = target_user_info.get('generations_left', 0)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ—Å—Ç—å —Å—Ä–µ–¥—Å—Ç–≤
        if amount > current_cookies:
            error_text = escape_message_parts(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–µ—á–µ–Ω–µ–∫ –¥–ª—è —Å–ø–∏—Å–∞–Ω–∏—è.\n–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {current_cookies} –ø–µ—á–µ–Ω–µ–∫\n–ü–æ–ø—ã—Ç–∫–∞ —Å–ø–∏—Å–∞—Ç—å: {amount} –ø–µ—á–µ–Ω–µ–∫", version=2)
            await query.message.edit_text(error_text, parse_mode=ParseMode.MARKDOWN_V2)
            await query.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤", show_alert=True)
            return

        # –£–¥–∞–ª—è–µ–º –ø–µ—á–µ–Ω—å–∫–∏
        success = await update_user_credits(target_user_id, "decrement_photo", amount)

        if success:
            # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            updated_user_info = await get_user_info(target_user_id)
            new_cookies = updated_user_info.get('generations_left', 0) if updated_user_info else 0

            display_name = target_user_info.get('first_name') or target_user_info.get('username') or f"ID {target_user_id}"
            username_display = f"(@{target_user_info.get('username')})" if target_user_info.get('username') else ""

            success_text = escape_message_parts(f"""‚úÖ –ü–µ—á–µ–Ω—å–∫–∏ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã!

üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {display_name} {username_display}
üÜî ID: {target_user_id}
‚ûñ –£–¥–∞–ª–µ–Ω–æ: {amount} –ø–µ—á–µ–Ω–µ–∫
üìä –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {new_cookies} –ø–µ—á–µ–Ω–µ–∫

–û–ø–µ—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º ID {admin_user_id}""", version=2)

            await query.message.edit_text(success_text, parse_mode=ParseMode.MARKDOWN_V2)
            await query.answer("‚úÖ –ü–µ—á–µ–Ω—å–∫–∏ —É–¥–∞–ª–µ–Ω—ã!", show_alert=True)

            logger.info(f"–ê–¥–º–∏–Ω {admin_user_id} —É–¥–∞–ª–∏–ª {amount} –ø–µ—á–µ–Ω–µ–∫ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_user_id}")
        else:
            error_text = escape_message_parts(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–µ—á–µ–Ω–µ–∫ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_user_id}", version=2)
            await query.message.edit_text(error_text, parse_mode=ParseMode.MARKDOWN_V2)
            await query.answer("‚ùå –û—à–∏–±–∫–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏", show_alert=True)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_confirm_delcook: {e}", exc_info=True)
        error_text = escape_message_parts("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏", version=2)
        await query.message.edit_text(error_text, parse_mode=ParseMode.MARKDOWN_V2)
        await query.answer("‚ùå –û—à–∏–±–∫–∞", show_alert=True)

async def handle_confirm_addnew(query: CallbackQuery, state: FSMContext, admin_user_id: int, target_user_id: int) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–≤–∞—Ç–∞—Ä–∞"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        target_user_info = await get_user_info(target_user_id)
        if not target_user_info:
            text = escape_message_parts(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {target_user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.", version=2)
            await query.message.edit_text(text, parse_mode=ParseMode.MARKDOWN_V2)
            await query.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return

        # –î–æ–±–∞–≤–ª—è–µ–º 1 –∞–≤–∞—Ç–∞—Ä –∏ —É–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç—É—Å –ø–µ—Ä–≤–æ–π –ø–æ–∫—É–ø–∫–∏
        success_avatar = await update_user_credits(target_user_id, "increment_avatar", 1)
        success_purchase = await update_user_credits(target_user_id, "set_first_purchase_completed")
        
        success = success_avatar and success_purchase

        if success:
            # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            updated_user_info = await get_user_info(target_user_id)
            current_avatars = updated_user_info.get('avatar_left', 0) if updated_user_info else 0

            display_name = target_user_info.get('first_name') or target_user_info.get('username') or f"ID {target_user_id}"
            username_display = f"(@{target_user_info.get('username')})" if target_user_info.get('username') else ""

            success_text = escape_message_parts(f"""‚úÖ –ê–≤–∞—Ç–∞—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!

üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {display_name} {username_display}
üÜî ID: {target_user_id}
‚ûï –î–æ–±–∞–≤–ª–µ–Ω–æ: 1 –∞–≤–∞—Ç–∞—Ä
üìä –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {current_avatars} –∞–≤–∞—Ç–∞—Ä–æ–≤

–û–ø–µ—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º ID {admin_user_id}""", version=2)

            await query.message.edit_text(success_text, parse_mode=ParseMode.MARKDOWN_V2)
            await query.answer("‚úÖ –ê–≤–∞—Ç–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω!", show_alert=True)

            logger.info(f"–ê–¥–º–∏–Ω {admin_user_id} –¥–æ–±–∞–≤–∏–ª 1 –∞–≤–∞—Ç–∞—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_user_id}")
        else:
            error_text = escape_message_parts(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∞–≤–∞—Ç–∞—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_user_id}", version=2)
            await query.message.edit_text(error_text, parse_mode=ParseMode.MARKDOWN_V2)
            await query.answer("‚ùå –û—à–∏–±–∫–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏", show_alert=True)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_confirm_addnew: {e}", exc_info=True)
        error_text = escape_message_parts("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏", version=2)
        await query.message.edit_text(error_text, parse_mode=ParseMode.MARKDOWN_V2)
        await query.answer("‚ùå –û—à–∏–±–∫–∞", show_alert=True)

async def handle_confirm_delnew(query: CallbackQuery, state: FSMContext, admin_user_id: int, target_user_id: int) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è –∞–≤–∞—Ç–∞—Ä–∞"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        target_user_info = await get_user_info(target_user_id)
        if not target_user_info:
            text = escape_message_parts(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {target_user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.", version=2)
            await query.message.edit_text(text, parse_mode=ParseMode.MARKDOWN_V2)
            await query.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return

        current_avatars = target_user_info.get('avatar_left', 0)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ—Å—Ç—å –∞–≤–∞—Ç–∞—Ä–æ–≤
        if current_avatars <= 0:
            error_text = escape_message_parts(f"‚ùå –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –∞–≤–∞—Ç–∞—Ä–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.\n–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {current_avatars} –∞–≤–∞—Ç–∞—Ä–æ–≤", version=2)
            await query.message.edit_text(error_text, parse_mode=ParseMode.MARKDOWN_V2)
            await query.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∞–≤–∞—Ç–∞—Ä–æ–≤", show_alert=True)
            return

        # –£–¥–∞–ª—è–µ–º 1 –∞–≤–∞—Ç–∞—Ä (–ù–ï –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞—Ç—É—Å –ø–µ—Ä–≤–æ–π –ø–æ–∫—É–ø–∫–∏)
        success = await update_user_credits(target_user_id, "decrement_avatar", 1)
        
        if success:
            # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            updated_user_info = await get_user_info(target_user_id)
            new_avatars = updated_user_info.get('avatar_left', 0) if updated_user_info else 0
            
            display_name = target_user_info.get('first_name') or target_user_info.get('username') or f"ID {target_user_id}"
            username_display = f"(@{target_user_info.get('username')})" if target_user_info.get('username') else ""
            
            success_text = escape_message_parts(f"""‚úÖ –ê–≤–∞—Ç–∞—Ä —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!

üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {display_name} {username_display}
üÜî ID: {target_user_id}
‚ûñ –£–¥–∞–ª–µ–Ω–æ: 1 –∞–≤–∞—Ç–∞—Ä
üìä –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {new_avatars} –∞–≤–∞—Ç–∞—Ä–æ–≤

–û–ø–µ—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º ID {admin_user_id}""", version=2)
            
            await query.message.edit_text(success_text, parse_mode=ParseMode.MARKDOWN_V2)
            await query.answer("‚úÖ –ê–≤–∞—Ç–∞—Ä —É–¥–∞–ª–µ–Ω!", show_alert=True)
            
            logger.info(f"–ê–¥–º–∏–Ω {admin_user_id} —É–¥–∞–ª–∏–ª 1 –∞–≤–∞—Ç–∞—Ä —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_user_id}")
        else:
            error_text = escape_message_parts(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∞–≤–∞—Ç–∞—Ä–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_user_id}", version=2)
            await query.message.edit_text(error_text, parse_mode=ParseMode.MARKDOWN_V2)
            await query.answer("‚ùå –û—à–∏–±–∫–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏", show_alert=True)
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_confirm_delnew: {e}", exc_info=True)
        error_text = escape_message_parts("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏", version=2)
        await query.message.edit_text(error_text, parse_mode=ParseMode.MARKDOWN_V2)
        await query.answer("‚ùå –û—à–∏–±–∫–∞", show_alert=True)

async def handle_cancel_admin_operation(query: CallbackQuery, state: FSMContext, admin_user_id: int) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã –∞–¥–º–∏–Ω—Å–∫–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏"""
    try:
        cancel_text = escape_message_parts("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞", version=2)
        await query.message.edit_text(cancel_text, parse_mode=ParseMode.MARKDOWN_V2)
        await query.answer("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞", show_alert=False)
        logger.info(f"–ê–¥–º–∏–Ω {admin_user_id} –æ—Ç–º–µ–Ω–∏–ª –æ–ø–µ—Ä–∞—Ü–∏—é")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_cancel_admin_operation: {e}", exc_info=True)

@admin_callbacks_router.callback_query(lambda c: c.data and c.data.startswith('admin_style_'))
async def admin_style_selection_handler(query: CallbackQuery, state: FSMContext) -> None:
    await handle_admin_style_selection(query, state)
