# handlers/user/generation.py

import asyncio
import logging
from typing import Optional, List, Dict, Tuple
from aiogram import Router, Bot
from aiogram.types import CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup, Message
from aiogram.fsm.context import FSMContext
from aiogram.enums import ParseMode
from database import check_database_user, get_active_trainedmodel, update_user_credits
from config import ADMIN_IDS
from handlers.utils import (
    safe_escape_markdown as escape_md, send_message_with_fallback, check_resources, clean_admin_context
)
from keyboards import (
    create_admin_keyboard, create_main_menu_keyboard, create_avatar_style_choice_keyboard,
    create_new_male_avatar_styles_keyboard, create_new_female_avatar_styles_keyboard,
    create_aspect_ratio_keyboard, create_rating_keyboard
)
from generation.images import generate_image, process_prompt_async, prepare_model_params
from generation.utils import reset_generation_context

from logger import get_logger
logger = get_logger('generation')

# –°–æ–∑–¥–∞–Ω–∏–µ —Ä–æ—É—Ç–µ—Ä–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
generation_router = Router()

async def generate_photo_for_user(query: CallbackQuery, state: FSMContext, target_user_id: int) -> None:

    admin_id = query.from_user.id
    bot_id = (await query.bot.get_me()).id
    logger.debug(f"–ò–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–æ—Ç–æ –¥–ª—è target_user_id={target_user_id} –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º user_id={admin_id}")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if admin_id not in ADMIN_IDS:
        await query.answer("‚õî –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤", show_alert=True)
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ target_user_id –Ω–µ —è–≤–ª—è–µ—Ç—Å—è ID –±–æ—Ç–∞
    if target_user_id == bot_id:
        logger.error(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π target_user_id: {target_user_id} (ID –±–æ—Ç–∞)")
        await send_message_with_fallback(
            query.bot, admin_id,
            escape_md(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: `{target_user_id}`.", version=2),
            update_or_query=query,
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ö –¥–µ–π—Å—Ç–≤–∏—è–º", callback_data=f"user_actions_{target_user_id}")]
            ]),
            parse_mode=ParseMode.MARKDOWN_V2
        )
        await query.answer()
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    target_user_info = await check_database_user(target_user_id)
    if not target_user_info or (target_user_info[3] is None and target_user_info[8] is None):
        await send_message_with_fallback(
            query.bot, admin_id,
            escape_md(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID `{target_user_id}` –Ω–µ –Ω–∞–π–¥–µ–Ω.", version=2),
            update_or_query=query,
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ö –¥–µ–π—Å—Ç–≤–∏—è–º", callback_data=f"user_actions_{target_user_id}")]
            ]),
            parse_mode=ParseMode.MARKDOWN_V2
        )
        await query.answer()
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∞–≤–∞—Ç–∞—Ä–∞ —É —Ü–µ–ª–µ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    active_model_data = await get_active_trainedmodel(target_user_id)
    if not active_model_data or active_model_data[3] != 'success':
        await send_message_with_fallback(
            query.bot, admin_id,
            escape_md(f"‚ùå –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID `{target_user_id}` –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∞–≤–∞—Ç–∞—Ä–∞.", version=2),
            update_or_query=query,
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ö –¥–µ–π—Å—Ç–≤–∏—è–º", callback_data=f"user_actions_{target_user_id}")]
            ]),
            parse_mode=ParseMode.MARKDOWN_V2
        )
        await query.answer()
        return

    # –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    await clean_admin_context(state)
    logger.info(f"–ö–æ–Ω—Ç–µ–∫—Å—Ç –æ—á–∏—â–µ–Ω –ø–µ—Ä–µ–¥ –∞–¥–º–∏–Ω—Å–∫–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π –¥–ª—è user_id={target_user_id}")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    await state.update_data(
        admin_generation_for_user=target_user_id,
        generation_type='with_avatar',
        model_key='flux-trained',
        active_model_version=active_model_data[0],  # model_version
        active_trigger_word=active_model_data[1],   # trigger_word
        active_avatar_name=active_model_data[2],    # avatar_name
        old_model_id=active_model_data[4],         # model_id
        old_model_version=active_model_data[0],    # model_version
        is_admin_generation=True,
        message_recipient=admin_id,
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    await send_message_with_fallback(
        query.bot, admin_id,
        escape_md(f"üé® –ù–∞—á–∏–Ω–∞—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Ñ–æ—Ç–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID `{target_user_id}`\n\n"
                 f"–ê–≤–∞—Ç–∞—Ä: `{active_model_data[2]}`\n"
                 f"–¢—Ä–∏–≥–≥–µ—Ä: `{active_model_data[1]}`", version=2),
        update_or_query=query,
        reply_markup=create_avatar_style_choice_keyboard(),
        parse_mode=ParseMode.MARKDOWN_V2
    )
    await query.answer()

async def handle_admin_style_selection(query: CallbackQuery, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å—Ç–∏–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    admin_id = query.from_user.id
    
    if admin_id not in ADMIN_IDS:
        await query.answer("‚õî –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤", show_alert=True)
        return

    data = query.data
    logger.debug(f"–ê–¥–º–∏–Ω {admin_id} –≤—ã–±—Ä–∞–ª —Å—Ç–∏–ª—å: {data}")

    if data.startswith("style_new_male_"):
        style = data.replace("style_new_male_", "")
        await state.update_data(selected_style=style, gender="male")
        await send_message_with_fallback(
            query.bot, admin_id,
            escape_md(f"üé® –í—ã–±—Ä–∞–Ω —Å—Ç–∏–ª—å: `{style}`\n\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω:", version=2),
            update_or_query=query,
            reply_markup=create_aspect_ratio_keyboard(),
            parse_mode=ParseMode.MARKDOWN_V2
        )
    elif data.startswith("style_new_female_"):
        style = data.replace("style_new_female_", "")
        await state.update_data(selected_style=style, gender="female")
        await send_message_with_fallback(
            query.bot, admin_id,
            escape_md(f"üé® –í—ã–±—Ä–∞–Ω —Å—Ç–∏–ª—å: `{style}`\n\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω:", version=2),
            update_or_query=query,
            reply_markup=create_aspect_ratio_keyboard(),
            parse_mode=ParseMode.MARKDOWN_V2
        )
    elif data == "select_new_male_avatar_styles":
        await send_message_with_fallback(
            query.bot, admin_id,
            escape_md("üé® –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∏–ª—å –¥–ª—è –º—É–∂—Å–∫–æ–≥–æ –∞–≤–∞—Ç–∞—Ä–∞:", version=2),
            update_or_query=query,
            reply_markup=create_new_male_avatar_styles_keyboard(),
            parse_mode=ParseMode.MARKDOWN_V2
        )
    elif data == "select_new_female_avatar_styles":
        await send_message_with_fallback(
            query.bot, admin_id,
            escape_md("üé® –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∏–ª—å –¥–ª—è –∂–µ–Ω—Å–∫–æ–≥–æ –∞–≤–∞—Ç–∞—Ä–∞:", version=2),
            update_or_query=query,
            reply_markup=create_new_female_avatar_styles_keyboard(),
            parse_mode=ParseMode.MARKDOWN_V2
        )
    elif data.startswith(("male_styles_page_", "female_styles_page_")):
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ —Å—Ç–∏–ª–µ–π
        page = int(data.split("_")[-1])
        gender = "male" if data.startswith("male_styles_page_") else "female"
        
        if gender == "male":
            await send_message_with_fallback(
                query.bot, admin_id,
                escape_md(f"üé® –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page} –º—É–∂—Å–∫–∏—Ö —Å—Ç–∏–ª–µ–π:", version=2),
                update_or_query=query,
                reply_markup=create_new_male_avatar_styles_keyboard(page),
                parse_mode=ParseMode.MARKDOWN_V2
            )
        else:
            await send_message_with_fallback(
                query.bot, admin_id,
                escape_md(f"üé® –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page} –∂–µ–Ω—Å–∫–∏—Ö —Å—Ç–∏–ª–µ–π:", version=2),
                update_or_query=query,
                reply_markup=create_new_female_avatar_styles_keyboard(page),
                parse_mode=ParseMode.MARKDOWN_V2
            )

    await query.answer()

async def handle_admin_custom_prompt(message: Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    admin_id = message.from_user.id
    
    if admin_id not in ADMIN_IDS:
        return

    prompt = message.text.strip()
    if len(prompt) < 10:
        await message.answer("‚ùå –ü—Ä–æ–º–ø—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤")
        return

    await state.update_data(custom_prompt=prompt)
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    data = await state.get_data()
    target_user_id = data.get('admin_generation_for_user')
    
    await message.answer(
        escape_md(f"‚úÖ –ü—Ä–æ–º–ø—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: `{prompt}`\n\n"
                 f"–ù–∞—á–∏–Ω–∞—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID `{target_user_id}`", version=2),
        parse_mode=ParseMode.MARKDOWN_V2
    )

    # –ó–∞–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
    await start_admin_generation(message.bot, state, admin_id, target_user_id)

async def handle_admin_aspect_ratio_selection(query: CallbackQuery, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—è —Å—Ç–æ—Ä–æ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    admin_id = query.from_user.id
    
    if admin_id not in ADMIN_IDS:
        await query.answer("‚õî –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤", show_alert=True)
        return

    data = query.data
    if data.startswith("aspect_"):
        aspect_ratio = data.replace("aspect_", "")
        await state.update_data(aspect_ratio=aspect_ratio)
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        state_data = await state.get_data()
        target_user_id = state_data.get('admin_generation_for_user')
        
        await send_message_with_fallback(
            query.bot, admin_id,
            escape_md(f"üìê –í—ã–±—Ä–∞–Ω–æ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ: `{aspect_ratio}`\n\n"
                     f"–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∫–∞—Å—Ç–æ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ñ–æ—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID `{target_user_id}`:", version=2),
            update_or_query=query,
            parse_mode=ParseMode.MARKDOWN_V2
        )

    await query.answer()

async def handle_admin_generation_result(state: FSMContext, admin_id: int, target_user_id: int, result_data: Dict, bot: Bot) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
    await send_message_with_fallback(
        bot, admin_id,
        escape_md(f"‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID `{target_user_id}`\n\n"
                 f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç:\n"
                 f"‚Ä¢ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {len(result_data.get('image_paths', []))}\n"
                 f"‚Ä¢ –í—Ä–µ–º—è: {result_data.get('duration', 0):.2f}—Å\n"
                 f"‚Ä¢ –°—Ç–∏–ª—å: {result_data.get('style', 'N/A')}\n"
                 f"‚Ä¢ –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ: {result_data.get('aspect_ratio', 'N/A')}", version=2),
        parse_mode=ParseMode.MARKDOWN_V2,
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ö –¥–µ–π—Å—Ç–≤–∏—è–º", callback_data=f"user_actions_{target_user_id}")]
        ])
    )

    # –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
    await reset_generation_context(state)
    logger.info(f"–ê–¥–º–∏–Ω—Å–∫–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –¥–ª—è user_id={target_user_id}")

async def process_image_generation(
    bot: Bot,
    state: FSMContext,
    user_id: int,
    image_paths: List[str],
    duration: float,
    aspect_ratio: str,
    generation_type: str,
    model_key: str,
    admin_user_id: Optional[int] = None
) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
    
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        for i, image_path in enumerate(image_paths, 1):
            with open(image_path, 'rb') as photo:
                await bot.send_photo(
                    chat_id=user_id,
                    photo=photo,
                    caption=f"üé® –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ {i}/{len(image_paths)}\n"
                           f"‚è± –í—Ä–µ–º—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {duration:.2f}—Å\n"
                           f"üìê –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ: {aspect_ratio}"
                )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ä–µ–π—Ç–∏–Ω–≥–æ–º
        await bot.send_message(
            chat_id=user_id,
            text="‚≠ê –û—Ü–µ–Ω–∏—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:",
            reply_markup=create_rating_keyboard()
        )

        # –ï—Å–ª–∏ —ç—Ç–æ –∞–¥–º–∏–Ω—Å–∫–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è, —É–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        if admin_user_id:
            await handle_admin_generation_result(
                state, admin_user_id, user_id,
                {
                    'image_paths': image_paths,
                    'duration': duration,
                    'aspect_ratio': aspect_ratio,
                    'generation_type': generation_type,
                    'model_key': model_key
                },
                bot
            )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {e}")
        await bot.send_message(
            chat_id=user_id,
            text="‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"
        )

async def start_admin_generation(bot: Bot, state: FSMContext, admin_id: int, target_user_id: int) -> None:
    """–ó–∞–ø—É—Å–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç –∏–º–µ–Ω–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    
    try:
        data = await state.get_data()
        custom_prompt = data.get('custom_prompt', '')
        aspect_ratio = data.get('aspect_ratio', '1:1')
        style = data.get('selected_style', '')
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –º–æ–¥–µ–ª–∏
        model_params = await prepare_model_params(
            target_user_id,
            data.get('active_model_version'),
            data.get('active_trigger_word'),
            style
        )
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        result = await generate_image(
            prompt=custom_prompt,
            model_params=model_params,
            aspect_ratio=aspect_ratio,
            user_id=target_user_id
        )
        
        if result and result.get('image_paths'):
            await process_image_generation(
                bot=bot,
                state=state,
                user_id=target_user_id,
                image_paths=result['image_paths'],
                duration=result.get('duration', 0),
                aspect_ratio=aspect_ratio,
                generation_type='admin_generation',
                model_key='flux-trained',
                admin_user_id=admin_id
            )
        else:
            await send_message_with_fallback(
                bot, admin_id,
                escape_md(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID `{target_user_id}`", version=2),
                parse_mode=ParseMode.MARKDOWN_V2
            )
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∞–¥–º–∏–Ω—Å–∫–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e}")
        await send_message_with_fallback(
            bot, admin_id,
            escape_md(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {str(e)}", version=2),
            parse_mode=ParseMode.MARKDOWN_V2
        )

async def cancel(message: Message, state: FSMContext) -> None:
    """–û—Ç–º–µ–Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏"""
    await reset_generation_context(state)
    await message.answer("‚ùå –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
@generation_router.callback_query(
    lambda c: c.data and c.data.startswith((
        "admin_generate:", "admin_send_gen:", "select_new_male_avatar_styles",
        "select_new_female_avatar_styles", "style_new_male_", "style_new_female_",
        "male_styles_page_", "female_styles_page_", "enter_custom_prompt_manual",
        "enter_custom_prompt_llama", "aspect_"
    ))
)
async def generation_callback_handler(query: CallbackQuery, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback'–æ–≤ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏"""
    
    data = query.data
    admin_id = query.from_user.id
    
    if admin_id not in ADMIN_IDS:
        await query.answer("‚õî –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤", show_alert=True)
        return

    if data.startswith("admin_generate:"):
        target_user_id = int(data.split(":")[1])
        await generate_photo_for_user(query, state, target_user_id)
    elif data.startswith(("style_new_male_", "style_new_female_", "select_new_male_avatar_styles", 
                         "select_new_female_avatar_styles", "male_styles_page_", "female_styles_page_")):
        await handle_admin_style_selection(query, state)
    elif data.startswith("aspect_"):
        await handle_admin_aspect_ratio_selection(query, state)
    elif data in ["enter_custom_prompt_manual", "enter_custom_prompt_llama"]:
        await send_message_with_fallback(
            query.bot, admin_id,
            escape_md("‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –∫–∞—Å—Ç–æ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:", version=2),
            update_or_query=query,
            parse_mode=ParseMode.MARKDOWN_V2
        )

@generation_router.message(lambda m: m.text and not m.text.startswith('/'))
async def handle_admin_prompt_message(message: Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∞–¥–º–∏–Ω—Å–∫–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏"""
    
    admin_id = message.from_user.id
    if admin_id not in ADMIN_IDS:
        return

    data = await state.get_data()
    if data.get('is_admin_generation'):
        await handle_admin_custom_prompt(message, state)