"""
–ú–æ–¥—É–ª—å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ-—Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏
"""

import asyncio
import uuid
from typing import Optional

from aiogram import Router, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import CallbackQuery, Message, BufferedInputFile
from aiogram.enums import ParseMode

from handlers.utils import escape_message_parts
from database import check_database_user, update_user_credits
from config import ADMIN_IDS

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞
photo_generator = None

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä
photo_transform_router = Router()

class PhotoTransformStates(StatesGroup):
    waiting_for_photo = State()
    choosing_style = State()
    choosing_aspect_ratio = State()
    processing = State()

def init_photo_generator(replicate_api_key: str):
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ —Ñ–æ—Ç–æ"""
    global photo_generator
    # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞
    # photo_generator = PhotoGenerator(replicate_api_key)
    pass

def get_progress_bar(percent: int) -> str:
    """–°–æ–∑–¥–∞–µ—Ç –≤–∏–∑—É–∞–ª—å–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä"""
    filled = "‚ñà" * (percent // 10)
    empty = "‚ñë" * (10 - percent // 10)
    return f"{filled}{empty} {percent}%"

async def update_progress(progress_message: Message, state: FSMContext, expected_duration: int = 67):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏"""
    try:
        for i in range(1, 101):
            await asyncio.sleep(expected_duration / 100)
            
            progress_text = (
                f"‚è≥ **–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ...**\n\n"
                f"{get_progress_bar(i)} ‚Äì –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è..."
            )
            
            await progress_message.edit_text(
                escape_message_parts(progress_text, version=2),
                parse_mode=ParseMode.MARKDOWN_V2
            )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞: {e}")

@photo_transform_router.callback_query(F.data == "photo_transform")
async def start_photo_transform(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Ñ–æ—Ç–æ-—Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏"""
    try:
        await callback.answer()
        user_id = callback.from_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_info = await check_database_user(user_id)
        if not user_info:
            await callback.message.answer(
                escape_message_parts("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.", version=2),
                parse_mode=ParseMode.MARKDOWN_V2
            )
            return
        
        generations_left = user_info[0]
        if generations_left <= 0:
            await callback.message.answer(
                escape_message_parts(
                    "‚ùå –£ –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –ø–µ—á–µ–Ω—å–∫–∏!\n\n"
                    "üíé –ö—É–ø–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é.",
                    version=2
                ),
                parse_mode=ParseMode.MARKDOWN_V2
            )
            return
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–æ—Å—Ç–æ—è–Ω–∏—é –æ–∂–∏–¥–∞–Ω–∏—è —Ñ–æ—Ç–æ
        await state.set_state(PhotoTransformStates.waiting_for_photo)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é
        instruction_text = (
            f"üì∏ **–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –¥–ª—è —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏**\n\n"
            f"üí∞ –£ –≤–∞—Å –æ—Å—Ç–∞–ª–æ—Å—å –ø–µ—á–µ–Ω–µ–∫: `{generations_left}`\n\n"
            f"üìù –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ, –∏ —è –ø–æ–º–æ–≥—É –≤–∞–º –µ–≥–æ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å!"
        )
        
        await callback.message.answer(
            escape_message_parts(instruction_text, version=2),
            parse_mode=ParseMode.MARKDOWN_V2
        )
        
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å user_id={user_id} –Ω–∞—á–∞–ª –ø—Ä–æ—Ü–µ—Å—Å —Ñ–æ—Ç–æ-—Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ start_photo_transform –¥–ª—è user_id={user_id}: {e}", exc_info=True)
        await callback.message.answer(
            escape_message_parts("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", version=2),
            parse_mode=ParseMode.MARKDOWN_V2
        )

@photo_transform_router.message(PhotoTransformStates.waiting_for_photo, F.photo)
async def handle_photo(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ —Ñ–æ—Ç–æ"""
    try:
        user_id = message.from_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –µ—â–µ —Ä–∞–∑
        user_info = await check_database_user(user_id)
        if not user_info:
            await message.answer(
                escape_message_parts("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.", version=2),
                parse_mode=ParseMode.MARKDOWN_V2
            )
            return
        
        generations_left = user_info[0]
        if generations_left <= 0:
            await message.answer(
                escape_message_parts(
                    "‚ùå –£ –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –ø–µ—á–µ–Ω—å–∫–∏!\n\n"
                    "üíé –ö—É–ø–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é.",
                    version=2
                ),
                parse_mode=ParseMode.MARKDOWN_V2
            )
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–æ—Ç–æ
        photo_file_id = message.photo[-1].file_id
        await state.update_data(photo_file_id=photo_file_id)
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É —Å—Ç–∏–ª—è
        await state.set_state(PhotoTransformStates.choosing_style)
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å—Ç–∏–ª—è
        from keyboards import create_style_selection_keyboard
        style_keyboard = create_style_selection_keyboard()
        
        style_text = (
            f"üé® **–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∏–ª—å —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏**\n\n"
            f"üí∞ –û—Å—Ç–∞–ª–æ—Å—å –ø–µ—á–µ–Ω–µ–∫: `{generations_left}`\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∏–ª—å, –≤ –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –≤–∞—à–µ —Ñ–æ—Ç–æ:"
        )
        
        await message.answer(
            escape_message_parts(style_text, version=2),
            parse_mode=ParseMode.MARKDOWN_V2,
            reply_markup=style_keyboard
        )
        
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å user_id={user_id} –æ—Ç–ø—Ä–∞–≤–∏–ª —Ñ–æ—Ç–æ –¥–ª—è —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_photo –¥–ª—è user_id={user_id}: {e}", exc_info=True)
        await message.answer(
            escape_message_parts("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", version=2),
            parse_mode=ParseMode.MARKDOWN_V2
        )

@photo_transform_router.message(PhotoTransformStates.waiting_for_photo)
async def handle_wrong_content(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
    await message.answer(
        escape_message_parts("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ.", version=2),
        parse_mode=ParseMode.MARKDOWN_V2
    )

@photo_transform_router.callback_query(PhotoTransformStates.choosing_style, F.data.startswith("transform_style:"))
async def handle_style_selection(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å—Ç–∏–ª—è"""
    try:
        await callback.answer()
        user_id = callback.from_user.id
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Å—Ç–∏–ª—å
        selected_style = callback.data.split(":")[1]
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Å—Ç–∏–ª—å
        await state.update_data(selected_style=selected_style)
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—è —Å—Ç–æ—Ä–æ–Ω
        await state.set_state(PhotoTransformStates.choosing_aspect_ratio)
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—è —Å—Ç–æ—Ä–æ–Ω
        from keyboards import create_aspect_ratio_keyboard
        aspect_keyboard = create_aspect_ratio_keyboard()
        
        aspect_text = (
            f"üìê **–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω**\n\n"
            f"üé® –í—ã–±—Ä–∞–Ω–Ω—ã–π —Å—Ç–∏–ª—å: `{selected_style}`\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω –¥–ª—è –≤–∞—à–µ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:"
        )
        
        await callback.message.edit_text(
            escape_message_parts(aspect_text, version=2),
            parse_mode=ParseMode.MARKDOWN_V2,
            reply_markup=aspect_keyboard
        )
        
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å user_id={user_id} –≤—ã–±—Ä–∞–ª —Å—Ç–∏–ª—å: {selected_style}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_style_selection –¥–ª—è user_id={user_id}: {e}", exc_info=True)
        await callback.message.answer(
            escape_message_parts("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", version=2),
            parse_mode=ParseMode.MARKDOWN_V2
        )

@photo_transform_router.callback_query(PhotoTransformStates.choosing_aspect_ratio, F.data.startswith("transform_ratio:"))
async def handle_aspect_ratio_selection(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—è —Å—Ç–æ—Ä–æ–Ω"""
    try:
        await callback.answer()
        user_id = callback.from_user.id
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω
        aspect_ratio = callback.data.split(":")[1]
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        user_data = await state.get_data()
        photo_file_id = user_data.get('photo_file_id')
        selected_style = user_data.get('selected_style')
        
        if not photo_file_id or not selected_style:
            await callback.message.answer(
                escape_message_parts("‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏ —É—Ç–µ—Ä—è–Ω—ã.", version=2),
                parse_mode=ParseMode.MARKDOWN_V2
            )
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—â–µ —Ä–∞–∑
        user_info = await check_database_user(user_id)
        if not user_info:
            await callback.message.answer(
                escape_message_parts("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.", version=2),
                parse_mode=ParseMode.MARKDOWN_V2
            )
            return
        
        generations_left = user_info[0]
        if generations_left <= 0:
            await callback.message.answer(
                escape_message_parts(
                    "‚ùå –£ –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –ø–µ—á–µ–Ω—å–∫–∏!\n\n"
                    "üíé –ö—É–ø–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é.",
                    version=2
                ),
                parse_mode=ParseMode.MARKDOWN_V2
            )
            return
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–æ—Å—Ç–æ—è–Ω–∏—é –æ–±—Ä–∞–±–æ—Ç–∫–∏
        await state.set_state(PhotoTransformStates.processing)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        progress_text = (
            f"‚è≥ **–ù–∞—á–∏–Ω–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é...**\n\n"
            f"üé® –°—Ç–∏–ª—å: `{selected_style}`\n"
            f"üìê –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ: `{aspect_ratio}`\n\n"
            f"{get_progress_bar(0)} ‚Äì –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –æ–±—Ä–∞–±–æ—Ç–∫–µ..."
        )
        
        progress_message = await callback.message.answer(
            escape_message_parts(progress_text, version=2),
            parse_mode=ParseMode.MARKDOWN_V2
        )
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –≤ —Ñ–æ–Ω–µ
        progress_task = asyncio.create_task(
            update_progress(progress_message, state)
        )
        
        try:
            # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–æ—Ç–æ
            photo_file = await callback.bot.get_file(photo_file_id)
            photo_bytes = await callback.bot.download_file(photo_file.file_path)
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä, –µ—Å–ª–∏ –æ–Ω –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
            if photo_generator is None:
                from config import REPLICATE_API_KEY
                init_photo_generator(REPLICATE_API_KEY)
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
            result = await photo_generator.generate(
                image_bytes=photo_bytes,
                style=selected_style,
                aspect_ratio=aspect_ratio
            )
            
            if result and result.get('success'):
                # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞
                image_url = result.get('image_url')
                
                # –°–∫–∞—á–∏–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                import aiohttp
                async with aiohttp.ClientSession() as session:
                    async with session.get(image_url) as response:
                        if response.status == 200:
                            result_image_bytes = await response.read()
                            
                            # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
                            result_file = BufferedInputFile(
                                result_image_bytes,
                                filename=f"transformed_{user_id}_{uuid.uuid4().hex[:8]}.png"
                            )
                            
                            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                            success_text = (
                                f"‚úÖ **–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!**\n\n"
                                f"üé® –°—Ç–∏–ª—å: `{selected_style}`\n"
                                f"üìê –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ: `{aspect_ratio}`\n\n"
                                f"üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –Ω–∞–∂–∞–≤ –Ω–∞ –Ω–µ–≥–æ."
                            )
                            
                            await callback.bot.send_photo(
                                chat_id=user_id,
                                photo=result_file,
                                caption=escape_message_parts(success_text, version=2),
                                parse_mode=ParseMode.MARKDOWN_V2
                            )
                            
                            # –°–ø–∏—Å—ã–≤–∞–µ–º –ø–µ—á–µ–Ω—å–∫—É
                            await update_user_credits(user_id, -1, 'g')
                            
                            # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-—Å–æ–æ–±—â–µ–Ω–∏–µ
                            final_progress_text = (
                                f"‚úÖ **–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!**\n\n"
                                f"üé® –°—Ç–∏–ª—å: `{selected_style}`\n"
                                f"üìê –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ: `{aspect_ratio}`\n\n"
                                f"üí∞ –û—Å—Ç–∞–ª–æ—Å—å –ø–µ—á–µ–Ω–µ–∫: `{generations_left - 1}`"
                            )
                            
                            await progress_message.edit_text(
                                escape_message_parts(final_progress_text, version=2),
                                parse_mode=ParseMode.MARKDOWN_V2
                            )
                            
                            logger.info(f"–£—Å–ø–µ—à–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–æ—Ç–æ-—Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏ –¥–ª—è user_id={user_id}")
                            
                        else:
                            raise Exception(f"–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: {response.status}")
                    raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å URL —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞")
                    
            else:
                # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å
                error_message = result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞') if result else '–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏'
                raise Exception(error_message)
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ñ–æ—Ç–æ-—Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏ –¥–ª—è user_id={user_id}: {e}", exc_info=True)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
            error_text = (
                f"‚ùå **–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏**\n\n"
                f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ:\n"
                f"`{str(e)}`\n\n"
                f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:\n"
                f"‚Ä¢ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –¥—Ä—É–≥–æ–µ —Ñ–æ—Ç–æ\n"
                f"‚Ä¢ –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π —Å—Ç–∏–ª—å\n"
                f"‚Ä¢ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –ø–æ–∑–∂–µ"
            )
            
            await progress_message.edit_text(
                escape_message_parts(error_text, version=2),
                parse_mode=ParseMode.MARKDOWN_V2
            )
            
        finally:
            # –û—Ç–º–µ–Ω—è–µ–º –∑–∞–¥–∞—á—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
            progress_task.cancel()
            await state.clear()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_aspect_ratio_selection –¥–ª—è user_id={user_id}: {e}", exc_info=True)
        await callback.message.answer(
            escape_message_parts("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", version=2),
            parse_mode=ParseMode.MARKDOWN_V2
        )

@photo_transform_router.callback_query(F.data == "transform_cancel")
async def handle_cancel(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏"""
    try:
        await callback.answer()
        user_id = callback.from_user.id
        
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()
        
        await callback.message.answer(
            escape_message_parts("‚ùå –ü—Ä–æ—Ü–µ—Å—Å —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ—Ç–º–µ–Ω–µ–Ω.", version=2),
            parse_mode=ParseMode.MARKDOWN_V2
        )
        
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å user_id={user_id} –æ—Ç–º–µ–Ω–∏–ª –ø—Ä–æ—Ü–µ—Å—Å —Ñ–æ—Ç–æ-—Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_cancel –¥–ª—è user_id={user_id}: {e}", exc_info=True) 
