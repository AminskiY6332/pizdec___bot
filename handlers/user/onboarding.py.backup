# handlers/onboarding.py

import asyncio
import logging
import os
from datetime import datetime, timedelta
from typing import Optional, Dict, Any
import pytz
from aiogram import Bot, Router
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, FSInputFile, Message, CallbackQuery, InputMediaPhoto
from aiogram.enums import ParseMode
from aiogram.fsm.context import FSMContext
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger
import aiosqlite
from config import DATABASE_PATH, TARIFFS, ADMIN_IDS, ERROR_LOG_ADMIN
from handlers.utils import safe_escape_markdown as escape_md, get_tariff_text
from database import check_database_user, get_user_payments, is_old_user, mark_welcome_message_sent, get_users_for_reminders, is_user_blocked, block_user_access
from keyboards import create_subscription_keyboard, create_main_menu_keyboard
from onboarding_config import get_day_config, get_message_text, has_user_purchases

from logger import get_logger
logger = get_logger('main')

onboarding_router = Router()

# –ü—Ä–∏–º–µ—Ä—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
EXAMPLE_IMAGES = [
    "images/example1.jpg",
    "images/example2.jpg",
    "images/example3.jpg",
]

async def send_onboarding_message(bot: Bot, user_id: int, message_type: str, subscription_data: Optional[tuple] = None, first_purchase: bool = False) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞."""
    logger.debug("–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Ç–∏–ø–∞ %s –¥–ª—è user_id=%s", message_type, user_id)

    try:
        username = subscription_data[3] if subscription_data and len(subscription_data) > 3 else "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
        first_name = subscription_data[8] if subscription_data and len(subscription_data) > 8 else "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—Ç–∞—Ä—ã–º
        is_old_user_flag = await is_old_user(user_id, cutoff_date="2025-07-11")
        logger.debug("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å user_id=%s is_old_user=%s", user_id, is_old_user_flag)

        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—Ç–∞—Ä—ã–π, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
        if is_old_user_flag and message_type.startswith("reminder_"):
            logger.info("–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ %s –ù–ï –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è user_id=%s: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—Ç–∞—Ä—ã–π", message_type, user_id)
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–∫—É–ø–∫–∏
        has_purchases = await has_user_purchases(user_id, DATABASE_PATH)
        if has_purchases:
            logger.debug("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s —É–∂–µ –∏–º–µ–µ—Ç –ø–æ–∫—É–ø–∫–∏, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –≤–æ—Ä–æ–Ω–∫—É", user_id)
            return

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–æ—Å–ª–µ–¥–Ω–µ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–∏
        async with aiosqlite.connect(DATABASE_PATH) as conn:
            conn.row_factory = aiosqlite.Row
            c = await conn.cursor()
            await c.execute("SELECT last_reminder_type, last_reminder_sent, welcome_message_sent FROM users WHERE user_id = ?", (user_id,))
            reminder_data = await c.fetchone()
            last_reminder_type = reminder_data['last_reminder_type'] if reminder_data else None
            last_reminder_sent = reminder_data['last_reminder_sent'] if reminder_data else None
            welcome_message_sent = reminder_data['welcome_message_sent'] if reminder_data else 0

        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è, –µ—Å–ª–∏ –æ–Ω–æ —É–∂–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
        if message_type == "welcome" and welcome_message_sent:
            logger.info("–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è user_id=%s, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º", user_id)
            return

        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è, –µ—Å–ª–∏ –æ–Ω–æ —É–∂–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
        if last_reminder_type == message_type:
            logger.info("–°–æ–æ–±—â–µ–Ω–∏–µ %s —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è user_id=%s, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º", message_type, user_id)
            return

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        message_data = get_message_text(message_type, first_name)
        if not message_data:
            logger.error("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è: %s –¥–ª—è user_id=%s", message_type, user_id)
            return

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
        if message_type == "welcome":
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(
                    text=message_data["button_text"],
                    callback_data=message_data["callback_data"]
                )]
            ])
            with_images = True
        elif message_type == "reminder_day5":
            # –î–ª—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –¥–Ω—è –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ —Ç–∞—Ä–∏—Ñ—ã
            keyboard = await create_subscription_keyboard(hide_mini_tariff=False)
            with_images = False
        else:
            # –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –¥–Ω–µ–π –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –æ–ø–ª–∞—Ç—ã –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–∞—Ä–∏—Ñ–∞
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(
                    text=message_data["button_text"],
                    callback_data=message_data["callback_data"]
                )]
            ])
            with_images = False

        try:
            if with_images:
                # –§–æ—Ä–º–∏—Ä—É–µ–º –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—É –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
                media_group = []
                for img_path in EXAMPLE_IMAGES:
                    if os.path.exists(img_path):
                        media_group.append(InputMediaPhoto(media=FSInputFile(path=img_path)))
                    else:
                        logger.warning("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ: %s", img_path)
                if media_group:
                    await bot.send_media_group(
                        chat_id=user_id,
                        media=media_group
                    )
                    logger.info("–ú–µ–¥–∏–∞–≥—Ä—É–ø–ø–∞ —Å %d –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é %s", len(media_group), user_id)
                else:
                    logger.warning("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—ã –¥–ª—è user_id=%s", user_id)

            await bot.send_message(
                chat_id=user_id,
                text=escape_md(message_data["text"], version=2),
                reply_markup=keyboard,
                parse_mode=ParseMode.MARKDOWN_V2
            )
            logger.info("–°–æ–æ–±—â–µ–Ω–∏–µ %s –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é %s", message_type, user_id)

            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
            moscow_tz = pytz.timezone('Europe/Moscow')
            async with aiosqlite.connect(DATABASE_PATH) as conn:
                c = await conn.cursor()
                if message_type == "welcome":
                    await c.execute(
                        "UPDATE users SET welcome_message_sent = 1, last_reminder_type = ?, last_reminder_sent = ? WHERE user_id = ?",
                        (message_type, datetime.now(moscow_tz).strftime('%Y-%m-%d %H:%M:%S'), user_id)
                    )
                else:
                    await c.execute(
                        "UPDATE users SET last_reminder_type = ?, last_reminder_sent = ? WHERE user_id = ?",
                        (message_type, datetime.now(moscow_tz).strftime('%Y-%m-%d %H:%M:%S'), user_id)
                    )
                await conn.commit()
                logger.debug("–°—Ç–∞—Ç—É—Å —Å–æ–æ–±—â–µ–Ω–∏—è %s –æ–±–Ω–æ–≤–ª—ë–Ω –¥–ª—è user_id=%s", message_type, user_id)

            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–æ–≤ –æ–± —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
            if message_type.startswith("reminder_"):
                admin_message = escape_md(
                    f"üì¨ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ '{message_type}' —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ID {user_id} (@{username})",
                    version=2
                )
                for admin_id in ADMIN_IDS:
                    try:
                        await bot.send_message(
                            chat_id=admin_id,
                            text=admin_message,
                            parse_mode=ParseMode.MARKDOWN_V2
                        )
                        logger.info("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–∏ %s –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω—É %s", message_type, admin_id)
                    except Exception as e:
                        logger.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É %s –¥–ª—è user_id=%s: %s", admin_id, user_id, e)

        except Exception as e:
            error_msg = str(e)
            logger.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è %s –¥–ª—è user_id=%s: %s", message_type, user_id, error_msg)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –æ—à–∏–±–∫–∏ –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ
            if "chat not found" in error_msg.lower():
                logger.warning("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞ –∏–ª–∏ —É–¥–∞–ª–∏–ª —á–∞—Ç", user_id)
                # –ë–ª–æ–∫–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
                block_reason = f"–ß–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω: {error_msg}"
                await block_user_access(user_id, block=True, block_reason=block_reason)
                return
            elif "bot can't initiate conversation" in error_msg.lower():
                logger.warning("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s –Ω–µ –Ω–∞—á–∞–ª –¥–∏–∞–ª–æ–≥ —Å –±–æ—Ç–æ–º", user_id)
                return
            elif any(phrase in error_msg.lower() for phrase in [
                "user_is_blocked", "user is blocked",
                "bot was blocked by the user", "forbidden: bot was blocked"
            ]):
                logger.warning("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞: %s", user_id, error_msg)
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
                from handlers.utils import handle_user_blocked_bot
                await handle_user_blocked_bot(user_id, error_msg)
                return
            else:
                # –î–ª—è –¥—Ä—É–≥–∏—Ö –æ—à–∏–±–æ–∫ –ø—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
                try:
                    await bot.send_message(
                        chat_id=user_id,
                        text=escape_md("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É: @AXIDI_Help", version=2),
                        reply_markup=await create_main_menu_keyboard(user_id),
                        parse_mode=ParseMode.MARKDOWN_V2
                    )
                except Exception as send_error:
                    logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é %s: %s", user_id, send_error)

            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–æ–≤ –æ–± –æ—à–∏–±–∫–µ
            for admin_id in ADMIN_IDS:
                try:
                    await bot.send_message(
                        chat_id=admin_id,
                        text=escape_md(f"üö® –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è '{message_type}' –¥–ª—è user_id={user_id}: {error_msg}", version=2),
                        parse_mode=ParseMode.MARKDOWN_V2
                    )
                    logger.info("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ %s –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω—É %s", message_type, admin_id)
                except Exception as e_admin:
                    logger.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ –∞–¥–º–∏–Ω—É %s: %s", admin_id, e_admin)

    except Exception as e:
        logger.error("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ send_onboarding_message –¥–ª—è user_id=%s, message_type=%s: %s", user_id, message_type, e, exc_info=True)
        for admin_id in ERROR_LOG_ADMIN:
            try:
                await bot.send_message(
                    chat_id=admin_id,
                    text=escape_md(f"üö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ send_onboarding_message –¥–ª—è user_id={user_id}, message_type={message_type}: {str(e)}", version=2),
                    parse_mode=ParseMode.MARKDOWN_V2
                )
            except Exception as e_admin:
                logger.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É %s: %s", admin_id, e_admin)

async def schedule_welcome_message(bot: Bot, user_id: int) -> None:
    """–ü–ª–∞–Ω–∏—Ä—É–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫—É –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ 1 —á–∞—Å –ø–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏."""
    try:
        subscription_data = await check_database_user(user_id)
        if not subscription_data:
            logger.error("–ù–µ–ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è user_id=%s", user_id)
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–∫—É–ø–∫–∏
        has_purchases = await has_user_purchases(user_id, DATABASE_PATH)
        if has_purchases:
            logger.debug("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s —É–∂–µ –∏–º–µ–µ—Ç –ø–æ–∫—É–ø–∫–∏, –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –ø–ª–∞–Ω–∏—Ä—É–µ—Ç—Å—è", user_id)
            return

        moscow_tz = pytz.timezone('Europe/Moscow')
        current_time = datetime.now(moscow_tz)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –¥–∞—Ç—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        registration_date = current_time
        if subscription_data and len(subscription_data) > 10 and subscription_data[10]:
            try:
                registration_date = moscow_tz.localize(datetime.strptime(subscription_data[10], '%Y-%m-%d %H:%M:%S'))
            except ValueError as e:
                logger.warning("–ù–µ–≤–∞–ª–∏–¥–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –≤ subscription_data[10] –¥–ª—è user_id=%s: %s. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–µ–∫—É—â–∞—è –¥–∞—Ç–∞. –û—à–∏–±–∫–∞: %s", user_id, subscription_data[10], e)
                logger.debug("–°–æ–¥–µ—Ä–∂–∏–º–æ–µ subscription_data –¥–ª—è user_id=%s: %s", user_id, subscription_data)

        # –ü–ª–∞–Ω–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —á–µ—Ä–µ–∑ 1 —á–∞—Å
        schedule_time = registration_date + timedelta(hours=1)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–æ –ª–∏ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        async with aiosqlite.connect(DATABASE_PATH) as conn:
            conn.row_factory = aiosqlite.Row
            c = await conn.cursor()
            await c.execute("SELECT welcome_message_sent FROM users WHERE user_id = ?", (user_id,))
            result = await c.fetchone()
            welcome_sent = result['welcome_message_sent'] if result else 0

        if welcome_sent:
            logger.debug("–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è user_id=%s, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º", user_id)
            return

        if schedule_time <= current_time:
            logger.warning("–ü–æ–ø—ã—Ç–∫–∞ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ø—Ä–æ—à–ª–æ–º –¥–ª—è user_id=%s", user_id)
            await send_onboarding_message(bot, user_id, "welcome", subscription_data)
            return

        scheduler = AsyncIOScheduler(timezone=moscow_tz)
        job_id = f"welcome_{user_id}"

        logger.info("–ü–ª–∞–Ω–∏—Ä—É–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è user_id=%s –Ω–∞ %s", user_id, schedule_time)
        scheduler.add_job(
            send_onboarding_message,
            trigger='date',
            run_date=schedule_time,
            args=[bot, user_id, "welcome", subscription_data],
            id=job_id,
            misfire_grace_time=300
        )
        scheduler.start()
        logger.info("–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è user_id=%s", user_id)

    except Exception as e:
        logger.error("–û—à–∏–±–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è user_id=%s: %s", user_id, e, exc_info=True)

async def schedule_daily_reminders(bot: Bot) -> None:
    """–ü–ª–∞–Ω–∏—Ä—É–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ 11:15 –ø–æ –ú–°–ö."""
    try:
        logger.info("–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è –≤ 11:15 –ø–æ –ú–°–ö")
        # –ó–∞–¥–∞—á–∞ —Ç–µ–ø–µ—Ä—å –ø–ª–∞–Ω–∏—Ä—É–µ—Ç—Å—è –≤ main.py —á–µ—Ä–µ–∑ –æ—Å–Ω–æ–≤–Ω–æ–π –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
    except Exception as e:
        logger.error("–û—à–∏–±–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: %s", e, exc_info=True)

async def send_daily_reminders(bot: Bot) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º."""
    try:
        users = await get_users_for_reminders()
        logger.info("–ù–∞–π–¥–µ–Ω–æ %d –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π", len(users))

        moscow_tz = pytz.timezone('Europe/Moscow')
        current_time = datetime.now(moscow_tz)

        for user in users:
            user_id = user['user_id']
            first_name = user['first_name']
            username = user['username']
            created_at = user['created_at']
            last_reminder_type = user['last_reminder_type']

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            if await is_user_blocked(user_id):
                logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å user_id=%s –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ", user_id)
                continue

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—Ç–∞—Ä—ã–º
            is_old_user_flag = await is_old_user(user_id, cutoff_date="2025-07-11")
            if is_old_user_flag:
                logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å user_id=%s —Å—Ç–∞—Ä—ã–π, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ", user_id)
                continue

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–∫—É–ø–∫–∏
            has_purchases = await has_user_purchases(user_id, DATABASE_PATH)
            if has_purchases:
                logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å user_id=%s —É–∂–µ –∏–º–µ–µ—Ç –ø–æ–∫—É–ø–∫–∏, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ", user_id)
                continue

            try:
                registration_date = datetime.strptime(created_at, '%Y-%m-%d %H:%M:%S').replace(tzinfo=moscow_tz)
            except ValueError as e:
                logger.warning("–ù–µ–≤–∞–ª–∏–¥–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –¥–ª—è user_id=%s: %s. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º. –û—à–∏–±–∫–∞: %s", user_id, created_at, e)
                continue

            days_since_registration = (current_time.date() - registration_date.date()).days

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å
            if days_since_registration == 1 and last_reminder_type != "reminder_day2":
                message_type = "reminder_day2"
            elif days_since_registration == 2 and last_reminder_type != "reminder_day3":
                message_type = "reminder_day3"
            elif days_since_registration == 3 and last_reminder_type != "reminder_day4":
                message_type = "reminder_day4"
            elif days_since_registration >= 4 and last_reminder_type != "reminder_day5":
                message_type = "reminder_day5"
            else:
                continue

            subscription_data = await check_database_user(user_id)
            if not subscription_data or len(subscription_data) < 14:
                logger.error("–ù–µ–ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è user_id=%s, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º", user_id)
                continue

            logger.info("–û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è %s –¥–ª—è user_id=%s", message_type, user_id)
            await send_onboarding_message(bot, user_id, message_type, subscription_data)

        logger.info("–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã")

    except Exception as e:
        logger.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: %s", e, exc_info=True)

async def proceed_to_tariff_callback(callback_query: CallbackQuery, state: FSMContext, bot: Bot) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ '–ù–∞—á–∞—Ç—å' –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ —Ç–∞—Ä–∏—Ñ–∞–º."""
    user_id = callback_query.from_user.id
    subscription_data = await check_database_user(user_id)
    if not subscription_data or len(subscription_data) < 14:
        await callback_query.message.answer(
            escape_md("‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", version=2),
            parse_mode=ParseMode.MARKDOWN_V2
        )
        await callback_query.answer()
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–∫—É–ø–∫–∏
    has_purchases = await has_user_purchases(user_id, DATABASE_PATH)
    first_purchase = bool(subscription_data[5]) if len(subscription_data) > 5 else True

    if has_purchases:
        # –î–ª—è –æ–ø–ª–∞—Ç–∏–≤—à–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ —Ç–∞—Ä–∏—Ñ—ã
        tariff_message_text = get_tariff_text(first_purchase=first_purchase, is_paying_user=True)
        subscription_kb = await create_subscription_keyboard(hide_mini_tariff=False)
        await callback_query.message.answer(
            tariff_message_text,
            reply_markup=subscription_kb,
            parse_mode=ParseMode.MARKDOWN_V2
        )
    else:
        # –î–ª—è –Ω–µ–æ–ø–ª–∞—Ç–∏–≤—à–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–∞—Ä–∏—Ñ "–ö–æ–º—Ñ–æ—Ä—Ç"
        day_config = get_day_config(1)  # –î–µ–Ω—å 1 - —Ç–∞—Ä–∏—Ñ "–ö–æ–º—Ñ–æ—Ä—Ç"
        tariff_key = day_config.get("tariff_key")
        price = day_config.get("price")
        description = day_config.get("description")

        if tariff_key and price:
            message_text = f"üíé –¢–∞—Ä–∏—Ñ '{tariff_key.title()}' –∑–∞ {price}‚ÇΩ\n{description}\n\n–¢—ã –ø–æ–ª—É—á–∞–µ—à—å:\n‚úÖ 70 —Ñ–æ—Ç–æ –≤—ã—Å–æ–∫–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞\n‚úÖ 1 –∞–≤–∞—Ç–∞—Ä –≤ –ø–æ–¥–∞—Ä–æ–∫ –ø—Ä–∏ –ø–µ—Ä–≤–æ–π –ø–æ–∫—É–ø–∫–µ\n‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é\n‚úÖ –û–∂–∏–≤–ª–µ–Ω–∏–µ —Ñ–æ—Ç–æ\n‚úÖ –ò–¥–µ–∏ –∏–∑ –∫–∞–Ω–∞–ª–∞: @pixelpie_idea"

            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text=f"üí≥ –í—ã–±—Ä–∞—Ç—å —Ç–∞—Ä–∏—Ñ –∑–∞ {price}‚ÇΩ", callback_data=f"pay_{price}")],
                [InlineKeyboardButton(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")]
            ])

            await callback_query.message.answer(
                escape_md(message_text, version=2),
                reply_markup=keyboard,
                parse_mode=ParseMode.MARKDOWN_V2
            )
        else:
            # Fallback –Ω–∞ –≤—Å–µ —Ç–∞—Ä–∏—Ñ—ã
            tariff_message_text = get_tariff_text(first_purchase=first_purchase, is_paying_user=False)
            subscription_kb = await create_subscription_keyboard(hide_mini_tariff=False)
            await callback_query.message.answer(
                tariff_message_text,
                reply_markup=subscription_kb,
                parse_mode=ParseMode.MARKDOWN_V2
            )

    await callback_query.answer()

def setup_onboarding_handlers():
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞."""
    @onboarding_router.callback_query(lambda c: c.data == "proceed_to_tariff")
    async def tariff_callback_handler(query: CallbackQuery, state: FSMContext) -> None:
        logger.debug("tariff_callback_handler: Callback_query –ø–æ–ª—É—á–µ–Ω: id=%s, data=%s, user_id=%s", query.id, query.data, query.from_user.id)
        await proceed_to_tariff_callback(query, state, query.bot)

    @onboarding_router.callback_query(lambda c: c.data == "show_all_tariffs")
    async def show_all_tariffs_handler(query: CallbackQuery, state: FSMContext) -> None:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ '–í—ã–±—Ä–∞—Ç—å —Ç–∞—Ä–∏—Ñ' –¥–ª—è –ø–æ–∫–∞–∑–∞ –≤—Å–µ—Ö —Ç–∞—Ä–∏—Ñ–æ–≤."""
        user_id = query.from_user.id
        subscription_data = await check_database_user(user_id)
        if not subscription_data or len(subscription_data) < 14:
            await query.message.answer(
                escape_md("‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", version=2),
                parse_mode=ParseMode.MARKDOWN_V2
            )
            await query.answer()
            return

        first_purchase = bool(subscription_data[5]) if len(subscription_data) > 5 else True

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ —Ç–∞—Ä–∏—Ñ—ã
        tariff_message_text = get_tariff_text(first_purchase=first_purchase, is_paying_user=False)
        subscription_kb = await create_subscription_keyboard(hide_mini_tariff=False)
        await query.message.answer(
            tariff_message_text,
            reply_markup=subscription_kb,
            parse_mode=ParseMode.MARKDOWN_V2
        )
        await query.answer()
