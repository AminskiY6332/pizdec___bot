# handlers/user/commands.py
"""
–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã

–ü–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ –∏–∑ handlers/commands.py:
- start() - –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
- menu() - –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é  
- help_command() - —Å–ø—Ä–∞–≤–∫–∞
- check_training() - –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—É—á–µ–Ω–∏—è –∞–≤–∞—Ç–∞—Ä–æ–≤
- check_user_blocked() - –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
- extract_utm_from_text() - –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ UTM –º–µ—Ç–æ–∫
"""

import os
import re
import pytz
from datetime import datetime
# from aiogram import Bot  # –ù–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–π –∏–º–ø–æ—Ä—Ç
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, FSInputFile
from aiogram.fsm.context import FSMContext
from aiogram.enums import ParseMode
from config import ADMIN_IDS
from database import (
    add_user_without_subscription,
    is_old_user,
    get_user_actions_stats,
    is_user_blocked,
    get_user_trainedmodels,
    check_database_user,
    get_user_payments,
    update_user_credits
)
from keyboards import create_main_menu_keyboard, create_payment_only_keyboard
from generation import reset_generation_context
from handlers.utils import safe_escape_markdown as escape_md, send_message_with_fallback
from handlers.user.onboarding import schedule_welcome_message
from bot_counter import bot_counter

from logger import get_logger
logger = get_logger('main')


def extract_utm_from_text(text: str) -> str:
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç UTM-–º–µ—Ç–∫—É –∏–∑ —Ç–µ–∫—Å—Ç–∞ —Å—Å—ã–ª–∫–∏ –Ω–∞ –±–æ—Ç–∞.

    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:
    - https://t.me/botname?start=utm_telegram_ads
    - https://t.me/botname?start=ref_123456&utm=telegram_ads
    - /start utm_telegram_ads
    - /start ref_123456 utm_telegram_ads

    Args:
        text: –ü–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è

    Returns:
        str: UTM-–∏—Å—Ç–æ—á–Ω–∏–∫ –∏–ª–∏ None
    """
    if not text:
        return None

    # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ UTM –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö
    patterns = [
        r'utm=([a-zA-Z0-9_]+)',  # utm=telegram_ads
        r'utm_([a-zA-Z0-9_]+)',  # utm_telegram_ads
        r'start=.*?utm_([a-zA-Z0-9_]+)',  # start=utm_telegram_ads
        r'start=.*?&utm=([a-zA-Z0-9_]+)',  # start=ref_123&utm=telegram_ads
    ]

    for pattern in patterns:
        match = re.search(pattern, text)
        if match:
            utm_source = match.group(1)
            # –í–∞–ª–∏–¥–∞—Ü–∏—è UTM-–∏—Å—Ç–æ—á–Ω–∏–∫–∞
            if utm_source and len(utm_source) <= 50:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É
                return utm_source

    return None


async def check_user_blocked(message: Message) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –±–ª–æ–∫–µ."""
    user_id = message.from_user.id
    if await is_user_blocked(user_id):
        logger.info("–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å user_id=%s –ø—ã—Ç–∞–ª—Å—è –≤—ã–ø–æ–ª–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ", user_id)
        return True
    return False


async def start(message: Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /start, –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ."""
    user_id = message.from_user.id
    if await check_user_blocked(message):
        return

    username = message.from_user.username or "–ë–µ–∑ –∏–º–µ–Ω–∏"
    first_name = message.from_user.first_name or "N/A"
    bot = message.bot

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è UTM –∏–∑ —Å—Å—ã–ª–∫–∏
    full_text = message.text
    logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s (%s) –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞. –ü–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç: %s", user_id, username, full_text)
    await reset_generation_context(state, "start_command")

    referrer_id = None
    utm_source = None

    # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ UTM-–º–µ—Ç–∫–∏ –∏–∑ —Å—Å—ã–ª–∫–∏
    utm_source = extract_utm_from_text(full_text)
    if utm_source:
        logger.info("User %s came with UTM source: %s", user_id, utm_source)

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥—ã /start (–¥–ª—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö —Å—Å—ã–ª–æ–∫)
    args = full_text.split()[1:] if len(full_text.split()) > 1 else []
    if args:
        for arg in args:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏
            if arg.startswith("ref_"):
                try:
                    referrer_id_str = arg.split("_")[1]
                    if referrer_id_str.isdigit():
                        referrer_id = int(referrer_id_str)
                        if referrer_id == user_id:
                            logger.info("User %s tried to use their own referral link.", user_id)
                            referrer_id = None
                        else:
                            ref_data = await check_database_user(referrer_id)
                            if not ref_data or ref_data[3] is None:
                                logger.warning("Referrer ID %s not found.", referrer_id)
                                referrer_id = None
                            elif await is_user_blocked(referrer_id):
                                logger.warning("Referrer ID %s is blocked.", referrer_id)
                                referrer_id = None
                            else:
                                referral_actions = await get_user_actions_stats(action='use_referral')
                                referrer_referrals = [action for action in referral_actions if action['details'].get('referrer_id') == referrer_id]
                                if len(referrer_referrals) >= 100:
                                    logger.warning("Referrer ID %s has reached maximum referrals (100).", referrer_id)
                                    referrer_id = None
                                else:
                                    logger.info("User %s came from referral link of %s", user_id, referrer_id)
                except (IndexError, ValueError):
                    logger.warning("Invalid referral link format: %s", arg)
                    referrer_id = None

    await add_user_without_subscription(user_id, username, first_name, referrer_id=referrer_id, utm_source=utm_source)

    try:
        subscription_data = await check_database_user(user_id)
        if not subscription_data or len(subscription_data) < 11:
            logger.error("–ù–µ–ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è user_id=%s: %s", user_id, subscription_data)
            await message.answer(
                escape_md("‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /start –ø–æ–∑–∂–µ.", version= 2),
                parse_mode=ParseMode.MARKDOWN_V2
            )
            return
        is_notified = subscription_data[4]
        first_purchase = bool(subscription_data[5])
        last_reminder_type = subscription_data[9]
        created_at = subscription_data[10]
    except Exception as e:  # noqa: B001
        logger.error("–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è user_id=%s: %s", user_id, e, exc_info=True)
        await message.answer(
            escape_md("‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /start –ø–æ–∑–∂–µ.", version=2),
            parse_mode=ParseMode.MARKDOWN_V2
        )
        return

    if not is_notified and user_id not in ADMIN_IDS:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ —Å–∏—Å—Ç–µ–º—É –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        try:
            from monitoring_system import BotMonitoringSystem
            monitoring = BotMonitoringSystem(bot)
            await monitoring.send_new_user_notification(user_id, username, first_name)
        except Exception as e:  # noqa: B001  # noqa: B001
            logger.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ —á–µ—Ä–µ–∑ —Å–∏—Å—Ç–µ–º—É –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: %s", e)
            # Fallback –∫ —Å—Ç–∞—Ä–æ–º—É —Å–ø–æ—Å–æ–±—É
            for admin_id_notify in ADMIN_IDS:
                try:
                    display_name = f"@{username}" if username != "–ë–µ–∑ –∏–º–µ–Ω–∏" else f"{first_name} (ID {user_id})"
                    admin_text = (
                        escape_md(f"‚ú® –ù–æ–≤–∞—è –ü–µ—á–µ–Ω—å–∫–∞üç™: {display_name}", version=2) +
                        (escape_md(f" (–ø—Ä–∏–≥–ª–∞—à–µ–Ω ID {referrer_id})", version=2) if referrer_id else "")
                    )
                    await bot.send_message(
                        chat_id=admin_id_notify,
                        text=admin_text,
                        parse_mode=ParseMode.MARKDOWN_V2
                    )
                except Exception as e_admin:  # noqa: B001
                    logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –∞–¥–º–∏–Ω–∞ %s: %s", admin_id_notify, e_admin)

        await update_user_credits(user_id, "set_notified", amount=1)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—Ç–∞—Ä—ã–º
    is_old_user_flag = await is_old_user(user_id, cutoff_date="2025-07-11")
    logger.debug("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å user_id=%s is_old_user=%s", user_id, is_old_user_flag)

    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—Ä–µ–º—è –∏ –¥–Ω–∏ —Å –º–æ–º–µ–Ω—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    moscow_tz = pytz.timezone('Europe/Moscow')
    registration_date = datetime.now(moscow_tz)
    time_since_registration = float('inf')
    days_since_registration = 0
    if created_at:
        try:
            registration_date = moscow_tz.localize(datetime.strptime(created_at, '%Y-%m-%d %H:%M:%S'))
            time_since_registration = (datetime.now(moscow_tz) - registration_date).total_seconds()
            days_since_registration = (datetime.now(moscow_tz).date() - registration_date.date()).days
            logger.debug("Calculated time_since_registration=%s for user_id=%s", time_since_registration, user_id)
        except ValueError as e:
            logger.warning("–ù–µ–≤–∞–ª–∏–¥–Ω–∞—è –¥–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –¥–ª—è user_id=%s: %s. –û—à–∏–±–∫–∞: %s", user_id, created_at, e)

    # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    welcome_text = (
        escape_md("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ PixelPie! üç™", version=2) + "\n\n" +
        escape_md("–ü—Ä–∏–≤–µ—Ç, –¥—Ä—É–∂–æ–∫ üç™ —è PixelPie - —Ç–≤–æ–π –ü–∏–∫—Å–µ–ª—å–Ω—ã–π –ø–∏—Ä–æ–∂–æ–∫.", version=2) + "\n\n" +
        escape_md("–°–Ω–∞—á–∞–ª–∞ —è –æ–±—É—á–∞—é—Å—å –Ω–∞ —Ç–≤–æ–∏—Ö —Ñ–æ—Ç–æ, –∞ –ø–æ—Ç–æ–º —Å–æ–∑–¥–∞—é —à–µ–¥–µ–≤—Ä—ã! –î–ª—è —Å—Ç–∞—Ä—Ç–∞ –≤—ã–±–µ—Ä–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –¥–ª—è —Ç–µ–±—è –ø–∞–∫–µ—Ç –ø–µ—á–µ–Ω–µ–∫, –∑–∞—Ç–µ–º —Å–æ–∑–¥–∞–π —Å–≤–æ–π –∞–≤–∞—Ç–∞—Ä. –ö–∞–∫? –û—á–µ–Ω—å –ø—Ä–æ—Å—Ç–æ!", version=2) + "\n\n" +
        escape_md("–ü–µ—Ä–≤–æ–µ ‚Äî –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å–≤–æ–∏ —Ñ–æ—Ç–∫–∏. –î–∞-–¥–∞, –Ω–µ —Å—Ç–µ—Å–Ω—è–π—Å—è, —è –≤—Å–µ —Ä–∞–≤–Ω–æ –∏—Ö –Ω–µ —Å–æ—Ö—Ä–∞–Ω—é, –≤ –æ—Ç–ª–∏—á–∏–µ –æ—Ç —Ç–≤–æ–∏—Ö –±—ã–≤—à–∏—Ö üòÉ –î–∞–ª–µ–µ –ø—Ä–æ—Å—Ç–æ –Ω–∞—á–Ω–∏ –æ–±—É—á–µ–Ω–∏–µ, –¥–∞–π —Å–≤–æ–µ–º—É –∞–≤–∞—Ç–∞—Ä—É –∏–º—è (–ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ –∑–æ–≤–∏ –µ–≥–æ \"–ü–∏—Ä–æ–∂–æ–∫\", —ç—Ç–æ –º–æ—ë!) –∏ –≤—É–∞–ª—è ‚Äî —Ç–≤–æ–π –∞–≤–∞—Ç–∞—Ä –≥–æ—Ç–æ–≤ –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ñ–æ—Ç–æ!", version=2) + "\n\n" +
        escape_md("–§–æ—Ç–∫–∏ –º–æ–≥—É—Ç –±—ã—Ç—å –æ–±—ã—á–Ω—ã–º–∏, –Ω–æ –µ—Å–ª–∏ —É —Ç–µ–±—è –µ—Å—Ç—å —Å—Ç—É–¥–∏–π–Ω—ã–µ, —Ç–æ —è –æ–±–µ—â–∞—é, —Ä–µ–∑—É–ª—å—Ç–∞—Ç –±—É–¥–µ—Ç –æ–≥–Ω–µ–Ω–Ω—ã–º! üî•", version=2) + "\n\n" +
        escape_md("–¢–∞–∫ —á—Ç–æ, –º–æ–π –¥—Ä—É–≥, —Å–∞–º–æ–µ –≤—Ä–µ–º—è –ø–µ—Ä–µ–π—Ç–∏ –∫ —Å–æ–∑–¥–∞–Ω–∏—é —à–µ–¥–µ–≤—Ä–æ–≤! üî•", version=2)
    )
    if referrer_id:
        welcome_text += (
            "\n\n" +
            escape_md(f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è—é —Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–µ–π –ø–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—é –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID {referrer_id}!", version=2) + "\n" +
            escape_md("üéÅ –ü–æ—Å–ª–µ —Ç–≤–æ–µ–π –ø–µ—Ä–≤–æ–π –ø–æ–∫—É–ø–∫–∏ —Ç—ã –ø–æ–ª—É—á–∏—à—å +1 –ø–µ—á–µ–Ω—å–∫—É –≤ –ø–æ–¥–∞—Ä–æ–∫, –∞ —Ç–≤–æ–π –¥—Ä—É–≥ ‚Äî 10% –æ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–µ—á–µ–Ω–µ–∫ –≤ —Ç–≤–æ—ë–º —Ç–∞—Ä–∏—Ñ–µ!", version=2)
        )

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã
    payments = await get_user_payments(user_id)
    is_paying_user = bool(payments) or not first_purchase
    logger.debug("start: user_id=%s, payments=%s, payment_count=%d, first_purchase=%s, is_paying_user=%s", 
                user_id, payments, len(payments) if payments else 0, first_purchase, is_paying_user)

        # –õ–æ–≥–∏–∫–∞ –¥–ª—è —Å—Ç–∞—Ä—ã—Ö –Ω–µ–æ–ø–ª–∞—Ç–∏–≤—à–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    if is_old_user_flag and not is_paying_user:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–¥–Ω–æ –æ–±—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Å—Ç–∞—Ä—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        welcome_text += (
            "\n\n" +
            escape_md("üç™ –ö–∞–∂–µ—Ç—Å—è, —Ç—ã –¥–∞–≤–Ω–æ —Å –Ω–∞–º–∏, –Ω–æ –µ—â—ë –Ω–µ –≤—ã–±—Ä–∞–ª —Ç–∞—Ä–∏—Ñ! üöÄ", version=2) + "\n" +
            escape_md("–ü–æ–ø—Ä–æ–±—É–π PixelPie –∏ —Å–æ–∑–¥–∞–≤–∞–π –∫—Ä—É—Ç—ã–µ —Ñ–æ—Ç–æ:\n", version=2) +
            escape_md("‚úîÔ∏è –¢–∞—Ä–∏—Ñ '–ú–∏–Ω–∏' –∑–∞ 399‚ÇΩ ‚Äî 10 –ø–µ—á–µ–Ω–µ–∫\n", version=2) +
            escape_md("‚úîÔ∏è –¢–∞—Ä–∏—Ñ '–õ–∞–π—Ç' –∑–∞ 599‚ÇΩ ‚Äî 30 –ø–µ—á–µ–Ω–µ–∫\n", version=2) +
            escape_md("‚úîÔ∏è –¢–∞—Ä–∏—Ñ '–ö–æ–º—Ñ–æ—Ä—Ç' –∑–∞ 1199‚ÇΩ ‚Äî 70 –ø–µ—á–µ–Ω–µ–∫\n", version=2) +
            escape_md("‚úîÔ∏è –ò–ª–∏ –≤—ã–±–µ—Ä–∏ —Ç–æ–ª—å–∫–æ –∞–≤–∞—Ç–∞—Ä –∑–∞ 590‚ÇΩ\n", version=2) +
            escape_md("üì∏ –ü–æ–ª—É—á–∏ –¥–æ—Å—Ç—É–ø –∫ —Å–æ–∑–¥–∞–Ω–∏—é –∞–≤–∞—Ç–∞—Ä–æ–≤ –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ñ–æ—Ç–æ –≤ –ª—é–±–æ–º —Å—Ç–∏–ª–µ!", version=2)
        )
        reply_markup = await create_payment_only_keyboard(user_id, time_since_registration, days_since_registration, last_reminder_type, is_old_user=True)
    else:
        # –î–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–ª–∏ –æ–ø–ª–∞—Ç–∏–≤—à–∏—Ö —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        reply_markup = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="–í–ø–µ—Ä—ë–¥ üöÄ", callback_data="proceed_to_payment")]
            ]
        )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await message.answer(
        welcome_text,
        reply_markup=reply_markup,
        parse_mode=ParseMode.MARKDOWN_V2
    )

    # –ü–ª–∞–Ω–∏—Ä—É–µ–º –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–æ–≤—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–æ–≤—ã—Ö –Ω–µ–æ–ø–ª–∞—Ç–∏–≤—à–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    if not is_paying_user and not is_old_user_flag:
        await schedule_welcome_message(bot, user_id)
        logger.info("–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω—ã –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è user_id=%s", user_id)
    else:
        logger.info("–û–Ω–±–æ—Ä–¥–∏–Ω–≥–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ù–ï –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω—ã –¥–ª—è user_id=%s (is_paying_user=%s, is_old_user=%s)", 
                   user_id, is_paying_user, is_old_user_flag)


async def menu(message: Message, state: FSMContext) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å —É—á–µ—Ç–æ–º —Å—Ç–∞—Ç—É—Å–∞ –æ–ø–ª–∞—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    user_id = message.from_user.id
    if await check_user_blocked(message):
        return

    bot = message.bot
    logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s –≤—ã–∑–≤–∞–ª /menu.", user_id)

    # –û—á–∏—Å—Ç–∫–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –≤–∏–¥–µ–æ
    user_data = await state.get_data()
    if 'menu_video_message_id' in user_data:
        try:
            await bot.delete_message(chat_id=user_id, message_id=user_data['menu_video_message_id'])
            await state.update_data(menu_video_message_id=None)
        except Exception as e:  # noqa: B001  # noqa: B001
            logger.debug("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –≤–∏–¥–µ–æ –º–µ–Ω—é: %s", e)

    if 'generation_video_message_id' in user_data:
        try:
            await bot.delete_message(chat_id=user_id, message_id=user_data['generation_video_message_id'])
            await state.update_data(generation_video_message_id=None)
        except Exception as e:  # noqa: B001  # noqa: B001
            logger.debug("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤–∏–¥–µ–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: %s", e)

    await reset_generation_context(state, "menu_command")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–∫–∏
    try:
        subscription_data = await check_database_user(user_id)
        if not subscription_data or len(subscription_data) < 14:
            logger.error("–ù–µ–ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è user_id=%s: %s", user_id, subscription_data)
            error_text = escape_md("‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /menu –ø–æ–∑–∂–µ.", version=2)
            main_menu_kb = await create_main_menu_keyboard(user_id)
            await message.answer(
                error_text,
                reply_markup=main_menu_kb,
                parse_mode=ParseMode.MARKDOWN_V2
            )
            return
        generations_left, avatar_left, _, _, _, first_purchase_db_val, _, _, _, last_reminder_type, created_at, _, _, _ = subscription_data
        first_purchase = bool(first_purchase_db_val)
    except Exception as e:  # noqa: B001
        logger.error("–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è user_id=%s: %s", user_id, e, exc_info=True)
        error_text = escape_md("‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /menu –ø–æ–∑–∂–µ.", version=2)
        main_menu_kb = await create_main_menu_keyboard(user_id)
        await message.answer(
            error_text,
            reply_markup=main_menu_kb,
            parse_mode=ParseMode.MARKDOWN_V2
        )
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –æ–ø–ª–∞—Ç—ã
    payments = await get_user_payments(user_id)
    is_paying_user = bool(payments) or not first_purchase
    logger.debug("menu: user_id=%s, payments=%s, payment_count=%d, first_purchase=%s, is_paying_user=%s", 
                user_id, payments, len(payments) if payments else 0, first_purchase, is_paying_user)

    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—Ä–µ–º—è –∏ –¥–Ω–∏ —Å –º–æ–º–µ–Ω—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    moscow_tz = pytz.timezone('Europe/Moscow')
    registration_date = datetime.now(moscow_tz)
    time_since_registration = float('inf')
    days_since_registration = 0
    if created_at:
        try:
            registration_date = moscow_tz.localize(datetime.strptime(created_at, '%Y-%m-%d %H:%M:%S'))
            time_since_registration = (datetime.now(moscow_tz) - registration_date).total_seconds()
            days_since_registration = (datetime.now(moscow_tz).date() - registration_date.date()).days
            logger.debug("Calculated time_since_registration=%s for user_id=%s", time_since_registration, user_id)
        except ValueError as e:
            logger.warning("–ù–µ–≤–∞–ª–∏–¥–Ω–∞—è –¥–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –¥–ª—è user_id=%s: %s. –û—à–∏–±–∫–∞: %s", user_id, created_at, e)

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –º–µ–Ω—é —Å —Å—á—ë—Ç—á–∏–∫–æ–º
    try:
        total = await bot_counter.get_total_count()
        formatted = bot_counter.format_number(total)
        menu_text = (
            f"üé® PixelPie | üë• {formatted} –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
            f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
            f"üåà –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é!\n"
            f"–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å —Å–µ–≥–æ–¥–Ω—è? üòä\n"
            f"üì∏ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å ‚Äî –°–æ–∑–¥–∞–π—Ç–µ –í–∞—à–∏ —Ñ–æ—Ç–æ –∏–ª–∏ –í–∏–¥–µ–æ\n"
            f"üé≠ –ú–æ–∏ –∞–≤–∞—Ç–∞—Ä—ã ‚Äî —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π –∞–≤–∞—Ç–∞—Ä –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –∞–∫—Ç–∏–≤–Ω—ã–π\n"
            f"üíé –ö—É–ø–∏—Ç—å –ø–∞–∫–µ—Ç ‚Äî –ø–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å –¥–ª—è –Ω–æ–≤—ã—Ö –≥–µ–Ω–µ—Ä–∞—Ü–∏–π\n"
            f"üë§ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç ‚Äî –í–∞—à –±–∞–ª–∞–Ω—Å, –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –ò—Å—Ç–æ—Ä–∏—è\n"
            f"üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ ‚Äî –º—ã –≤—Å–µ–≥–¥–∞ –≥–æ—Ç–æ–≤—ã –ø–æ–º–æ—á—å! 24/7\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –ø—É–Ω–∫—Ç —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ üëá"
        )
        menu_text = escape_md(menu_text, version=2)
    except Exception as e:  # noqa: B001
        logger.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –º–µ–Ω—é –¥–ª—è user_id=%s: %s", user_id, e, exc_info=True)
        menu_text = escape_md("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ–Ω—é. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", version=2)
        main_menu_kb = await create_main_menu_keyboard(user_id)
        await message.answer(
            menu_text,
            reply_markup=main_menu_kb,
            parse_mode=ParseMode.MARKDOWN_V2
        )
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Ç–∞—Ä–∏—Ñ–æ–≤ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –¥–Ω—è
    tariff_message_text = ""
    if not is_paying_user:
        if days_since_registration == 0:
            logger.debug("Day 0 tariff check: time_since_registration=%s", time_since_registration)
            if time_since_registration <= 1800:  # –î–æ 30 –º–∏–Ω—É—Ç
                tariff_message_text = escape_md(
                    "üíé –¢–∞—Ä–∏—Ñ '–ö–æ–º—Ñ–æ—Ä—Ç' –∑–∞ 1199‚ÇΩ\n"
                    "üç™ –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ!\n\n"
                    "1199‚ÇΩ –≤–º–µ—Å—Ç–æ 2999‚ÇΩ ‚Äî —Å–∫–∏–¥–∫–∞ 60%\n"
                    "‚è≥ –¢–æ–ª—å–∫–æ –≤ –ø–µ—Ä–≤—ã–µ 30 –º–∏–Ω—É—Ç!\n\n"
                    "–¢—ã –ø–æ–ª—É—á–∞–µ—à—å:\n"
                    "‚úÖ 70 —Ñ–æ—Ç–æ –≤—ã—Å–æ–∫–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞\n"
                    "‚úÖ 1 –∞–≤–∞—Ç–∞—Ä –≤ –ø–æ–¥–∞—Ä–æ–∫ –ø—Ä–∏ –ø–µ—Ä–≤–æ–π –ø–æ–∫—É–ø–∫–µ\n"
                    "‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é\n"
                    "‚úÖ –û–∂–∏–≤–ª–µ–Ω–∏–µ —Ñ–æ—Ç–æ\n"
                    "‚úÖ –ò–¥–µ–∏ –∏–∑ –∫–∞–Ω–∞–ª–∞: @pixelpie_idea\n\n"
                    "üì• –°–¥–µ–ª–∞–π –∞–≤–∞—Ç–∞—Ä, –∫–∞–∫ —É —Ç–æ–ø–æ–≤—ã—Ö –±–ª–æ–≥–µ—Ä–æ–≤ ‚Äî –±–µ–∑ —Å—Ç—É–¥–∏–∏ –∏ —Ñ–æ—Ç–æ—à–æ–ø–∞",
                    version=2
                )
            elif time_since_registration <= 5400:  # 30‚Äì90 –º–∏–Ω—É—Ç
                tariff_message_text = escape_md(
                    "‚è≥ –¢–∞—Ä–∏—Ñ '–õ–∞–π—Ç' –∑–∞ 599‚ÇΩ\n"
                    "üç™ –ü–æ—Å–ª–µ–¥–Ω–∏–π —à–∞–Ω—Å –≤–∑—è—Ç—å –ø—Ä–æ–±–Ω—ã–π —Å—Ç–∞—Ä—Ç!\n\n"
                    "üî• 599‚ÇΩ –≤–º–µ—Å—Ç–æ 2999‚ÇΩ ‚Äî —Å–∫–∏–¥–∫–∞ 80%\n\n"
                    "–¢—ã –ø–æ–ª—É—á–∞–µ—à—å:\n"
                    "‚úÖ 30 —Ñ–æ—Ç–æ\n"
                    "‚úÖ 1 –∞–≤–∞—Ç–∞—Ä –≤ –ø–æ–¥–∞—Ä–æ–∫ –ø—Ä–∏ –ø–µ—Ä–≤–æ–π –ø–æ–∫—É–ø–∫–µ\n"
                    "‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é\n"
                    "‚úÖ –û–∂–∏–≤–ª–µ–Ω–∏–µ —Ñ–æ—Ç–æ\n"
                    "‚úÖ –ò–¥–µ–∏ –∏–∑ –∫–∞–Ω–∞–ª–∞ @pixelpie_idea",
                    version=2
                )
            else:  # –ü–æ—Å–ª–µ 90 –º–∏–Ω—É—Ç
                tariff_message_text = escape_md(
                    "üß™ –¢–∞—Ä–∏—Ñ '–ú–∏–Ω–∏' –∑–∞ 399‚ÇΩ\n"
                    "üç™ –¢–µ—Å—Ç–æ–≤—ã–π –ø–∞–∫–µ—Ç ‚Äî –±–µ–∑ –æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤ –∏ –±–æ–ª—å—à–∏—Ö –≤–ª–æ–∂–µ–Ω–∏–π:\n\n"
                    "‚úÖ 10 —Ñ–æ—Ç–æ\n"
                    "‚úÖ 1 –∞–≤–∞—Ç–∞—Ä –≤ –ø–æ–¥–∞—Ä–æ–∫ –ø—Ä–∏ –ø–µ—Ä–≤–æ–π –ø–æ–∫—É–ø–∫–µ\n"
                    "‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ —Ç–≤–æ–µ–º—É –æ–ø–∏—Å–∞–Ω–∏—é\n"
                    "‚úÖ –î–æ—Å—Ç—É–ø –∫ –∏–¥–µ—è–º –∏–∑ @pixelpie_idea\n"
                    "üí≥ –í—Å–µ–≥–æ 399‚ÇΩ ‚Äî —á—Ç–æ–±—ã –ø–æ–Ω—è—Ç—å, –Ω–∞—Å–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –∑–∞—Ö–æ–¥–∏—Ç PixelPie!\n"
                    "üò± –¢–∞–∫–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –±–æ–ª—å—à–µ –Ω–µ –ø–æ—è–≤–∏—Ç—Å—è!",
                    version=2
                )
        elif days_since_registration == 1:
            tariff_message_text = escape_md(
                "‚è≥ –¢–∞—Ä–∏—Ñ '–õ–∞–π—Ç' –∑–∞ 599‚ÇΩ\n"
                "üç™ –ü–æ—Å–ª–µ–¥–Ω–∏–π —à–∞–Ω—Å –≤–∑—è—Ç—å –ø—Ä–æ–±–Ω—ã–π —Å—Ç–∞—Ä—Ç!\n\n"
                "üî• 599‚ÇΩ –≤–º–µ—Å—Ç–æ 2999‚ÇΩ ‚Äî —Å–∫–∏–¥–∫–∞ 80%\n\n"
                "–¢—ã –ø–æ–ª—É—á–∞–µ—à—å:\n"
                "‚úÖ 30 —Ñ–æ—Ç–æ\n"
                "‚úÖ 1 –∞–≤–∞—Ç–∞—Ä –≤ –ø–æ–¥–∞—Ä–æ–∫ –ø—Ä–∏ –ø–µ—Ä–≤–æ–π –ø–æ–∫—É–ø–∫–µ\n"
                "‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é\n"
                "‚úÖ –û–∂–∏–≤–ª–µ–Ω–∏–µ —Ñ–æ—Ç–æ\n"
                "‚úÖ –ò–¥–µ–∏ –∏–∑ –∫–∞–Ω–∞–ª–∞ @pixelpie_idea",
                version=2
            )
        elif 2 <= days_since_registration <= 4:
            tariff_message_text = escape_md(
                "üß™ –¢–∞—Ä–∏—Ñ '–ú–∏–Ω–∏' –∑–∞ 399‚ÇΩ\n"
                "üç™ –¢–µ—Å—Ç–æ–≤—ã–π –ø–∞–∫–µ—Ç ‚Äî –±–µ–∑ –æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤ –∏ –±–æ–ª—å—à–∏—Ö –≤–ª–æ–∂–µ–Ω–∏–π:\n\n"
                "‚úÖ 10 —Ñ–æ—Ç–æ\n"
                "‚úÖ 1 –∞–≤–∞—Ç–∞—Ä –≤ –ø–æ–¥–∞—Ä–æ–∫ –ø—Ä–∏ –ø–µ—Ä–≤–æ–π –ø–æ–∫—É–ø–∫–µ\n"
                "‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ —Ç–≤–æ–µ–º—É –æ–ø–∏—Å–∞–Ω–∏—é\n"
                "‚úÖ –î–æ—Å—Ç—É–ø –∫ –∏–¥–µ—è–º –∏–∑ @pixelpie_idea\n"
                "üí≥ –í—Å–µ–≥–æ 399‚ÇΩ ‚Äî —á—Ç–æ–±—ã –ø–æ–Ω—è—Ç—å, –Ω–∞—Å–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –∑–∞—Ö–æ–¥–∏—Ç PixelPie!\n"
                "üò± –¢–∞–∫–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –±–æ–ª—å—à–µ –Ω–µ –ø–æ—è–≤–∏—Ç—Å—è!",
                version=2
            )
        elif days_since_registration >= 5 and last_reminder_type == "reminder_day5":
            tariff_message_text = escape_md(
                "üç™ –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–µ—á–µ–Ω—å–∫–∞, –º–æ–π –¥—Ä—É–≥! üç™\n"
                "–¢–≤–æ—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è —Å–∫–∏–¥–∫–∞ —Å–∫–æ—Ä–æ –∏—Å—á–µ–∑–Ω–µ—Ç‚Ä¶\n"
                "–ê —Ç—ã —Ç–∞–∫ –∏ –Ω–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞–ª, –Ω–∞ —á—Ç–æ —Å–ø–æ—Å–æ–±–µ–Ω PixelPie.\n\n"
                "‚è≥ –í—ã–±–µ—Ä–∏ —Ç–∞—Ä–∏—Ñ –∏ –Ω–∞—á–Ω–∏ —Å–æ–∑–¥–∞–≤–∞—Ç—å –∫—Ä—É—Ç—ã–µ —Ñ–æ—Ç–æ:\n\n"
                "‚úîÔ∏è 1199‚ÇΩ –∑–∞ –ø–æ–ª–Ω—ã–π –ø–∞–∫–µ—Ç (–≤–º–µ—Å—Ç–æ 2999‚ÇΩ)\n"
                "‚úîÔ∏è –ò–ª–∏ 599‚ÇΩ –∑–∞ –ø—Ä–æ–±–Ω—ã–π —Å—Ç–∞—Ä—Ç\n"
                "‚úîÔ∏è –ò–ª–∏ 399‚ÇΩ –∑–∞ —Ç–µ—Å—Ç–æ–≤—ã–π –ø–∞–∫–µ—Ç\n"
                "‚úîÔ∏è –ò–ª–∏ 590‚ÇΩ —Ç–æ–ª—å–∫–æ –∑–∞ –∞–≤–∞—Ç–∞—Ä\n\n"
                "üì∏ –¢—ã –ø–æ–ª—É—á–∏—à—å –¥–æ—Å—Ç—É–ø –∫ —Å–æ–∑–¥–∞–Ω–∏—é –∞–≤–∞—Ç–∞—Ä–∞ –∏ –Ω–∞—á–Ω—ë—à—å –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ñ–æ—Ç–æ —Å —Å–æ–±–æ–π ‚Äî –≤ –ª—é–±–æ–º –æ–±—Ä–∞–∑–µ.\n\n"
                "–•–æ—á–µ—à—å —É—Å–ø–µ—Ç—å?",
                version=2
            )

    # –õ–æ–≥–∏–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–µ–Ω—é
    if generations_left > 0 or avatar_left > 0 or user_id in ADMIN_IDS:
        # –î–ª—è –æ–ø–ª–∞—Ç–∏–≤—à–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–ª–∏ –∞–¥–º–∏–Ω–æ–≤: –ø–æ–ª–Ω–æ–µ –º–µ–Ω—é —Å –≤–∏–¥–µ–æ
        menu_video_path = "images/welcome1.mp4"
        main_menu_keyboard = await create_main_menu_keyboard(user_id)
        try:
            if os.path.exists(menu_video_path):
                video_file = FSInputFile(path=menu_video_path)
                video_message = await bot.send_video(
                    chat_id=user_id,
                    video=video_file,
                    caption=menu_text,
                    reply_markup=main_menu_keyboard,
                    parse_mode=ParseMode.MARKDOWN_V2
                )
                await state.update_data(menu_video_message_id=video_message.message_id)
                logger.debug("–í–∏–¥–µ–æ –º–µ–Ω—é –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è user_id=%s, message_id=%s", user_id, video_message.message_id)
            else:
                logger.warning("–í–∏–¥–µ–æ –º–µ–Ω—é –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ –ø—É—Ç–∏: %s", menu_video_path)
                await message.answer(
                    menu_text,
                    reply_markup=main_menu_keyboard,
                    parse_mode=ParseMode.MARKDOWN_V2
                )
        except Exception as e:  # noqa: B001  # noqa: B001
            logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∏–¥–µ–æ –º–µ–Ω—é –¥–ª—è user_id=%s: %s", user_id, e, exc_info=True)
            await message.answer(
                menu_text,
                reply_markup=main_menu_keyboard,
                parse_mode=ParseMode.MARKDOWN_V2
            )
    else:
        # –î–ª—è –Ω–µ–æ–ø–ª–∞—Ç–∏–≤—à–∏—Ö: —Ç–µ–∫—Å—Ç –º–µ–Ω—é + —Ç–∞—Ä–∏—Ñ—ã + –∫–Ω–æ–ø–∫–∏ –æ–ø–ª–∞—Ç—ã
        payment_only_kb = await create_payment_only_keyboard(user_id, time_since_registration, days_since_registration, last_reminder_type)
        full_message = f"{menu_text}\n\n{tariff_message_text}"
        try:
            await message.answer(
                full_message,
                reply_markup=payment_only_kb,
                parse_mode=ParseMode.MARKDOWN_V2
            )
            logger.debug("–ú–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏ –æ–ø–ª–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è user_id=%s: %s", user_id, full_message[:200])
        except Exception as e:  # noqa: B001  # noqa: B001
            logger.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–µ–æ–ø–ª–∞—Ç–∏–≤—à–µ–≥–æ user_id=%s: %s", user_id, e, exc_info=True)
            await message.answer(
                escape_md("‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /menu –ø–æ–∑–∂–µ.", version=2),
                reply_markup=await create_main_menu_keyboard(user_id),
                parse_mode=ParseMode.MARKDOWN_V2
            )


async def help_command(message: Message, state: FSMContext) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø—Ä–∞–≤–∫—É."""
    user_id = message.from_user.id
    if await check_user_blocked(message):
        return

    # bot = message.bot  # –ù–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è
    logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s –≤—ã–∑–≤–∞–ª /help.", user_id)
    await reset_generation_context(state, "help_command")

    help_text = (
        escape_md("‚ÑπÔ∏è PixelPie ‚Äî —Ç–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–æ—Ç–æ –∏ –≤–∏–¥–µ–æ! üòä", version=2) + "\n\n" +
        escape_md("1Ô∏è‚É£ –ò—Å–ø–æ–ª—å–∑—É–π /menu –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ì–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é –±–æ—Ç–∞.", version=2) + "\n\n" +
        escape_md("2Ô∏è‚É£ –í —Ä–∞–∑–¥–µ–ª–µ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç—ã –º–æ–∂–µ—à—å:", version=2) + "\n" +
        escape_md("   - ‚ú® –§–æ—Ç–æ—Å–µ—Å—Å–∏—è (—Å –∞–≤–∞—Ç–∞—Ä–æ–º): –°–æ–∑–¥–∞–≤–∞–π —Ñ–æ—Ç–æ —Å–æ —Å–≤–æ–∏–º –ª–∏—á–Ω—ã–º –∞–≤–∞—Ç–∞—Ä–æ–º –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å—Ç–∏–ª—è—Ö. –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π –∏–ª–∏ –≤—ã–±–µ—Ä–∏ –∞–∫—Ç–∏–≤–Ω—ã–π –∞–≤–∞—Ç–∞—Ä!", version=2) + "\n" +
        escape_md("   - üë• –§–æ—Ç–æ –ø–æ —Ä–µ—Ñ–µ—Ä–µ–Ω—Å—É: –ó–∞–≥—Ä—É–∑–∏ —Å–≤–æ–µ —Ñ–æ—Ç–æ –∏ –º–∞—Å–∫—É (–ø–æ –∂–µ–ª–∞–Ω–∏—é), —á—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å –µ–≥–æ —á–∞—Å—Ç—å –ø–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–º—É –æ–ø–∏—Å–∞–Ω–∏—é (–ø—Ä–æ–º—Ç—É). –¢—Ä–µ–±—É–µ—Ç—Å—è –∞–∫—Ç–∏–≤–Ω—ã–π –∞–≤–∞—Ç–∞—Ä.", version=2) + "\n" +
        escape_md("   - üé• AI-–≤–∏–¥–µ–æ (Kling 2.1): –ü—Ä–µ–≤—Ä–∞—Ç–∏ —Å—Ç–∞—Ç–∏—á–Ω–æ–µ —Ñ–æ—Ç–æ –≤ –∫–æ—Ä–æ—Ç–∫–æ–µ –¥–∏–Ω–∞–º–∏—á–Ω–æ–µ –≤–∏–¥–µ–æ. –¢—Ä–µ–±—É–µ—Ç—Å—è –æ—Ç 20-30 –ø–µ—á–µ–Ω–µ–∫ —Å –±–∞–ª–∞–Ω—Å–∞.", version=2) + "\n\n" +
        escape_md("3Ô∏è‚É£ –ú–æ–∏ –∞–≤–∞—Ç–∞—Ä—ã:", version=2) + "\n" +
        escape_md("   - –ü—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∞—Ç—É—Å–∞ –æ–±—É—á–µ–Ω–∏—è —Ç–≤–æ–∏—Ö –∞–≤–∞—Ç–∞—Ä–æ–≤.", version=2) + "\n" +
        escape_md("   - –ê–∫—Ç–∏–≤–∞—Ü–∏—è –≥–æ—Ç–æ–≤–æ–≥–æ –∞–≤–∞—Ç–∞—Ä–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏.", version=2) + "\n" +
        escape_md("   - –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∞–≤–∞—Ç–∞—Ä–∞ (—Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–∞–∫–µ—Ç —Å –∞–≤–∞—Ç–∞—Ä–∞–º–∏ –∏–ª–∏ –ø–æ–∫—É–ø–∫–∞ –æ—Ç–¥–µ–ª—å–Ω–æ).", version=2) + "\n\n" +
        escape_md("4Ô∏è‚É£ –ö—É–ø–∏—Ç—å –ø–∞–∫–µ—Ç:", version=2) + "\n" +
        escape_md("   - –ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –ø–æ–ø–æ–ª–Ω–∏—Ç—å —Å–≤–æ–π –±–∞–ª–∞–Ω—Å –ø–µ—á–µ–Ω—å–∫–∞–º–∏ –∏ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–≤–∞—Ç–∞—Ä–æ–≤.", version=2) + "\n\n" +
        escape_md("5Ô∏è‚É£ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç:", version=2) + "\n" +
        escape_md("   - –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞ –ø–µ—á–µ–Ω–µ–∫ –∏ –∞–≤–∞—Ç–∞—Ä–æ–≤.", version=2) + "\n" +
        escape_md("   - –ü—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è.", version=2) + "\n" +
        escape_md("   - –î–æ—Å—Ç—É–ø –∫ —Å–æ–∑–¥–∞–Ω–∏—é –Ω–æ–≤–æ–≥–æ –∞–≤–∞—Ç–∞—Ä–∞ –∏ –ø—Ä–æ—Å–º–æ—Ç—Ä—É —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö.", version=2) + "\n\n" +
        escape_md("6Ô∏è‚É£ –ü–æ–¥–¥–µ—Ä–∂–∫–∞:", version=2) + "\n" +
        escape_md("   - –ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã, –ø—Ä–æ–±–ª–µ–º—ã –∏–ª–∏ –µ—Å—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, —Å–º–µ–ª–æ –ø–∏—à–∏ –Ω–∞–º: @AXIDI_Help", version=2) + "\n\n" +
        escape_md("‚ú® –¢–≤–æ—Ä–∏ –∏ —Å–æ–∑–¥–∞–≤–∞–π —à–µ–¥–µ–≤—Ä—ã –≤–º–µ—Å—Ç–µ —Å PixelPie! ‚ú®", version=2)
    )

    main_menu_kb = await create_main_menu_keyboard(user_id)
    await message.answer(
        help_text,
        reply_markup=main_menu_kb,
        parse_mode=ParseMode.MARKDOWN_V2
    )
    logger.debug("–°–ø—Ä–∞–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –¥–ª—è user_id=%s", user_id)


async def check_training(message: Message, state: FSMContext, user_id: int) -> None:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å –æ–±—É—á–µ–Ω–∏—è –∞–≤–∞—Ç–∞—Ä–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ç–µ–∫—É—â–∏–µ –º–æ–¥–µ–ª–∏ –∏ –∏—Ö —Å—Ç–∞—Ç—É—Å, –∏—Å–ø–æ–ª—å–∑—É—è –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
    –£—á–∏—Ç—ã–≤–∞–µ—Ç –∞–¥–º–∏–Ω—Å–∫–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–µ–π—Å—Ç–≤—É–µ—Ç –æ—Ç –∏–º–µ–Ω–∏ –¥—Ä—É–≥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    logger.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –æ–±—É—á–µ–Ω–∏—è –¥–ª—è user_id=%s (–≤—Ö–æ–¥—è—â–∏–π –ø–∞—Ä–∞–º–µ—Ç—Ä)", user_id)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–¥–º–∏–Ω—Å–∫–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
    user_data = await state.get_data()
    is_admin_generation = user_data.get('is_admin_generation', False)
    target_user_id = user_data.get('admin_generation_for_user', user_id)
    effective_user_id = target_user_id if is_admin_generation else user_id
    logger.debug("check_training: user_id=%s, is_admin_generation=%s, target_user_id=%s, effective_user_id=%s", 
                user_id, is_admin_generation, target_user_id, effective_user_id)

    if await is_user_blocked(effective_user_id):
        logger.info("–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å user_id=%s –ø—ã—Ç–∞–ª—Å—è –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –æ–±—É—á–µ–Ω–∏—è", effective_user_id)
        await state.update_data(user_id=user_id)
        return

    bot = message.bot
    await reset_generation_context(state, "check_training_logic", user_id=user_id)

    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        subscription_data = await check_database_user(effective_user_id)
        if not subscription_data or len(subscription_data) < 11:
            logger.error("–ù–µ–ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è user_id=%s: %s", effective_user_id, subscription_data)
            text = escape_md(
                f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID {effective_user_id}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É: @AXIDI_Help",
                version=2
            )
            await send_message_with_fallback(
                message.bot, user_id, text,
                reply_markup=await create_main_menu_keyboard(user_id),
                parse_mode=ParseMode.MARKDOWN_V2
            )
            await state.update_data(user_id=user_id)
            return

        # –†–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏
        _, _, _, _, _, _, _, active_avatar_id, _, _, _, _, _, _ = subscription_data
        logger.debug("–î–∞–Ω–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—É—á–µ–Ω—ã –¥–ª—è user_id=%s", effective_user_id)

        trained_models = await get_user_trainedmodels(effective_user_id)
        if not trained_models:
            text = (
                escape_md(f"üö´ –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID {effective_user_id} –ø–æ–∫–∞ –Ω–µ—Ç –∞–≤–∞—Ç–∞—Ä–æ–≤ –≤ –æ–±—É—á–µ–Ω–∏–∏ –∏–ª–∏ –≥–æ—Ç–æ–≤—ã—Ö. –•–æ—á–µ—à—å —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π? üõ†", version=2) + "\n" +
                escape_md("–ù–∞–∂–º–∏ /menu –∏ –≤—ã–±–µ—Ä–∏ '–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç' - '–°–æ–∑–¥–∞—Ç—å –∞–≤–∞—Ç–∞—Ä'!", version=2)
            )
            await send_message_with_fallback(
                bot, user_id, text,
                reply_markup=await create_main_menu_keyboard(user_id),
                parse_mode=ParseMode.MARKDOWN_V2
            )
            await state.update_data(user_id=user_id)
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –º–æ–¥–µ–ª—è—Ö
        response_text = escape_md(f"üé≠ –°—Ç–∞—Ç—É—Å –∞–≤–∞—Ç–∞—Ä–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID {effective_user_id}:\n\n", version=2)

        for i, model_tuple in enumerate(trained_models, 1):
            avatar_id, _, _, status, _, trigger_word, _, _, avatar_name = model_tuple[:9]
            
            status_emoji = {
                'starting': 'üü°',
                'processing': 'üîÑ', 
                'succeeded': '‚úÖ',
                'failed': '‚ùå',
                'canceled': '‚≠ï'
            }.get(status, '‚ùì')
            
            is_active = "üü¢ –ê–ö–¢–ò–í–ù–´–ô" if avatar_id == active_avatar_id else ""
            
            response_text += escape_md(f"{status_emoji} –ê–≤–∞—Ç–∞—Ä #{i}: {avatar_name or f'–ú–æ–¥–µ–ª—å {avatar_id}'} {is_active}\n", version=2)
            response_text += escape_md(f"  ‚îî –°—Ç–∞—Ç—É—Å: {status}\n", version=2)
            if trigger_word:
                response_text += escape_md(f"  ‚îî –°–ª–æ–≤–æ: {trigger_word}\n", version=2)
            response_text += "\n"

        response_text += escape_md("–í—ã–±–µ—Ä–∏—Ç–µ –∞–∫—Ç–∏–≤–Ω—ã–π –∞–≤–∞—Ç–∞—Ä —á–µ—Ä–µ–∑ '–ú–æ–∏ –∞–≤–∞—Ç–∞—Ä—ã' –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é!", version=2)

        await send_message_with_fallback(
            bot, user_id, response_text,
            reply_markup=await create_main_menu_keyboard(user_id),
            parse_mode=ParseMode.MARKDOWN_V2
        )
        
        await state.update_data(user_id=user_id)
        logger.info("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–≤–∞—Ç–∞—Ä–∞—Ö –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –¥–ª—è user_id=%s", user_id)

    except Exception as e:  # noqa: B001
        logger.error("–û—à–∏–±–∫–∞ –≤ check_training –¥–ª—è user_id=%s: %s", user_id, e, exc_info=True)
        error_text = escape_md("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ –æ–±—É—á–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", version=2)
        await send_message_with_fallback(
            bot, user_id, error_text,
            reply_markup=await create_main_menu_keyboard(user_id),
            parse_mode=ParseMode.MARKDOWN_V2
        )
        await state.update_data(user_id=user_id)
