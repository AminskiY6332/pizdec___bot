# handlers/admin/payments.py

import asyncio
import logging
import os
import uuid
import pytz
from datetime import datetime, timedelta
from decimal import Decimal
from typing import List, Dict
from aiogram import Router, Bot
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup, FSInputFile
from aiogram.fsm.context import FSMContext
from aiogram.enums import ParseMode
from aiogram.filters import Command
from database import get_payments_by_date, get_generation_cost_log, get_registrations_by_date
from config import ADMIN_IDS, DATABASE_PATH
from generation_config import IMAGE_GENERATION_MODELS
from excel_utils import create_payments_excel, create_registrations_excel
from keyboards import create_admin_keyboard
from handlers.utils import safe_escape_markdown as escape_md, send_message_with_fallback, anti_spam
from states import BotStates

from logger import get_logger
logger = get_logger('payments')

# –°–æ–∑–¥–∞–Ω–∏–µ —Ä–æ—É—Ç–µ—Ä–∞ –¥–ª—è –ø–ª–∞—Ç–µ–∂–µ–π
payments_router = Router()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏–º–≤–æ–ª–æ–≤ –≤ Markdown V2
def escape_md_v2(text: str) -> str:
    """–≠–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è ParseMode.MARKDOWN_V2."""
    characters_to_escape = r'_[]()*~`#+-=|{}!.>'
    for char in characters_to_escape:
        text = text.replace(char, f'\\{char}')
    return text

async def show_payments_menu(query: CallbackQuery, state: FSMContext) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π."""
    user_id = query.from_user.id
    if user_id not in ADMIN_IDS:
        await send_message_with_fallback(
            query.bot, user_id, escape_md_v2("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏\\."),
            reply_markup=await create_admin_keyboard(user_id),
            parse_mode=ParseMode.MARKDOWN_V2
        )
        return

    try:
        msk_tz = pytz.timezone('Europe/Moscow')
        today = datetime.now(msk_tz).strftime('%Y-%m-%d')
        yesterday = (datetime.now(msk_tz) - timedelta(days=1)).strftime('%Y-%m-%d')
        last_7_days_start = (datetime.now(msk_tz) - timedelta(days=7)).strftime('%Y-%m-%d')
        last_30_days_start = (datetime.now(msk_tz) - timedelta(days=30)).strftime('%Y-%m-%d')

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞—Ç
        for date_str in [today, yesterday, last_7_days_start, last_30_days_start]:
            datetime.strptime(date_str, '%Y-%m-%d')

        # –ò–∑–º–µ–Ω–µ–Ω–∏–µ: –§–æ—Ä–º–∞—Ç –¥–∞—Ç –Ω–µ —ç–∫—Ä–∞–Ω–∏—Ä—É–µ–º, —Ç–∞–∫ –∫–∞–∫ –æ–Ω –≤–Ω—É—Ç—Ä–∏ ` ` –∏ –±–µ–∑–æ–ø–∞—Å–µ–Ω
        text = (
            escape_md("üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–ª–∞—Ç–µ–∂–µ–π –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π\n\n"
                         "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—ã –≤—Ä—É—á–Ω—É—é –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n") +
            "`YYYY-MM-DD` (–¥–ª—è –æ–¥–Ω–æ–≥–æ –¥–Ω—è)\n–∏–ª–∏\n`YYYY-MM-DD YYYY-MM-DD` (–¥–ª—è –¥–∏–∞–ø–∞–∑–æ–Ω–∞)\\.\n\n" +
            escape_md_v2("–ü—Ä–∏–º–µ—Ä:\n") +
            f"`{today}` –∏–ª–∏ `{last_30_days_start} {today}`"
        )

        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–°–µ–≥–æ–¥–Ω—è", callback_data=f"payments_date_{today}_{today}")],
            [InlineKeyboardButton(text="–í—á–µ—Ä–∞", callback_data=f"payments_date_{yesterday}_{yesterday}")],
            [InlineKeyboardButton(text="–ü–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π", callback_data=f"payments_date_{last_7_days_start}_{today}")],
            [InlineKeyboardButton(text="–ü–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π", callback_data=f"payments_date_{last_30_days_start}_{today}")],
            [InlineKeyboardButton(text="–í–≤–µ—Å—Ç–∏ –¥–∞—Ç—ã –≤—Ä—É—á–Ω—É—é", callback_data="payments_manual_date")],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel")]
        ])

        await send_message_with_fallback(
            query.bot, user_id, text,
            reply_markup=keyboard, parse_mode=ParseMode.MARKDOWN_V2
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ show_payments_menu –¥–ª—è user_id={user_id}: {e}", exc_info=True)
        await send_message_with_fallback(
            query.bot, user_id, escape_md_v2("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –º–µ–Ω—é\\. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞\\."),
            reply_markup=await create_admin_keyboard(user_id),
            parse_mode=ParseMode.MARKDOWN_V2
        )

async def handle_payments_date(query: CallbackQuery, state: FSMContext, start_date: str, end_date: str) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥."""
    user_id = query.from_user.id
    if user_id not in ADMIN_IDS:
        await send_message_with_fallback(
            query.bot, user_id, escape_md_v2("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏\\."),
            reply_markup=await create_admin_keyboard(user_id),
            parse_mode=ParseMode.MARKDOWN_V2
        )
        return

    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–ª–∞—Ç–µ–∂–∞—Ö
        payments_data = await get_payments_by_date(start_date, end_date)
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è—Ö
        registrations_data = await get_registrations_by_date(start_date, end_date)
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–π
        generation_costs = await get_generation_cost_log(start_date, end_date)
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        total_payments = len(payments_data) if payments_data else 0
        total_amount = sum(payment[2] for payment in payments_data) if payments_data else 0
        total_registrations = len(registrations_data) if registrations_data else 0
        total_generation_cost = sum(cost[2] for cost in generation_costs) if generation_costs else 0
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –æ—Ç—á–µ—Ç–∞
        text_parts = [
            escape_md_v2("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –ø–µ—Ä–∏–æ–¥ ") + f"`{start_date}` - `{end_date}`\n\n",
            escape_md_v2("üí∞ –ü–ª–∞—Ç–µ–∂–∏:\n") +
            f"  ‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: `{total_payments}`\n" +
            f"  ‚Ä¢ –û–±—â–∞—è —Å—É–º–º–∞: `{total_amount}` —Ä—É–±\\.\n\n",
            escape_md_v2("üë• –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:\n") +
            f"  ‚Ä¢ –ù–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: `{total_registrations}`\n\n",
            escape_md_v2("üé® –ì–µ–Ω–µ—Ä–∞—Ü–∏–∏:\n") +
            f"  ‚Ä¢ –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: `{total_generation_cost}` —Ä—É–±\\.\n\n"
        ]
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª–∏ –ø–æ –º–æ–¥–µ–ª—è–º –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        if generation_costs:
            model_costs = {}
            for cost in generation_costs:
                model_name = cost[1]
                model_costs[model_name] = model_costs.get(model_name, 0) + cost[2]
            
            text_parts.append(escape_md_v2("üìà –î–µ—Ç–∞–ª–∏ –ø–æ –º–æ–¥–µ–ª—è–º:\n"))
            for model, cost in model_costs.items():
                text_parts.append(f"  ‚Ä¢ {model}: `{cost}` —Ä—É–±\\.\n")
        
        text = "".join(text_parts)
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –æ–ø—Ü–∏—è–º–∏ —ç–∫—Å–ø–æ—Ä—Ç–∞
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üìä –≠–∫—Å–ø–æ—Ä—Ç –ø–ª–∞—Ç–µ–∂–µ–π", callback_data=f"export_payments_{start_date}_{end_date}")],
            [InlineKeyboardButton(text="üìä –≠–∫—Å–ø–æ—Ä—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π", callback_data=f"export_registrations_{start_date}_{end_date}")],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_payments")]
        ])
        
        await send_message_with_fallback(
            query.bot, user_id, text,
            reply_markup=keyboard,
            parse_mode=ParseMode.MARKDOWN_V2
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_payments_date –¥–ª—è user_id={user_id}: {e}", exc_info=True)
        await send_message_with_fallback(
            query.bot, user_id, escape_md_v2("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏\\. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞\\."),
            reply_markup=await create_admin_keyboard(user_id),
            parse_mode=ParseMode.MARKDOWN_V2
        )

async def handle_manual_date_input(query: CallbackQuery, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤–≤–æ–¥ –¥–∞—Ç –≤—Ä—É—á–Ω—É—é."""
    user_id = query.from_user.id
    if user_id not in ADMIN_IDS:
        await send_message_with_fallback(
            query.bot, user_id, escape_md_v2("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏\\."),
            reply_markup=await create_admin_keyboard(user_id),
            parse_mode=ParseMode.MARKDOWN_V2
        )
        return

    text = (
        escape_md_v2("üìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n\n") +
        "`YYYY-MM-DD` (–¥–ª—è –æ–¥–Ω–æ–≥–æ –¥–Ω—è)\n–∏–ª–∏\n`YYYY-MM-DD YYYY-MM-DD` (–¥–ª—è –¥–∏–∞–ø–∞–∑–æ–Ω–∞)\n\n" +
        escape_md_v2("–ü—Ä–∏–º–µ—Ä—ã:\n") +
        "`2024-01-15` –∏–ª–∏ `2024-01-01 2024-01-31`"
    )

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîô –û—Ç–º–µ–Ω–∞", callback_data="admin_payments")]
    ])

    await send_message_with_fallback(
        query.bot, user_id, text,
        reply_markup=keyboard,
        parse_mode=ParseMode.MARKDOWN_V2
    )
    await state.set_state(BotStates.AWAITING_PAYMENTS_DATE)

async def handle_payments_date_input(message: Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –¥–∞—Ç –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π."""
    user_id = message.from_user.id
    if user_id not in ADMIN_IDS:
        return

    date_input = message.text.strip()
    
    try:
        if ' ' in date_input:
            # –î–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç
            start_date, end_date = date_input.split(' ', 1)
            start_date = start_date.strip()
            end_date = end_date.strip()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç
            datetime.strptime(start_date, '%Y-%m-%d')
            datetime.strptime(end_date, '%Y-%m-%d')
        else:
            # –û–¥–Ω–∞ –¥–∞—Ç–∞
            start_date = date_input.strip()
            end_date = start_date
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã
            datetime.strptime(start_date, '%Y-%m-%d')
        
        # –í—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        fake_query = type('FakeQuery', (), {
            'from_user': message.from_user,
            'bot': message.bot,
            'data': f"payments_date_{start_date}_{end_date}"
        })()
        
        await handle_payments_date(fake_query, state, start_date, end_date)
        
    except ValueError:
        text = escape_md_v2("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã\\. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç `YYYY-MM-DD`\\.")
        await send_message_with_fallback(
            message.bot, user_id, text,
            parse_mode=ParseMode.MARKDOWN_V2
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_payments_date_input –¥–ª—è user_id={user_id}: {e}", exc_info=True)
        text = escape_md_v2("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞—Ç\\. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞\\.")
        await send_message_with_fallback(
            message.bot, user_id, text,
            parse_mode=ParseMode.MARKDOWN_V2
        )

async def show_replicate_costs(query: CallbackQuery, state: FSMContext) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞—Ç—Ä–∞—Ç –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏."""
    user_id = query.from_user.id
    if user_id not in ADMIN_IDS:
        await send_message_with_fallback(
            query.bot, user_id, escape_md_v2("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏\\."),
            reply_markup=await create_admin_keyboard(user_id),
            parse_mode=ParseMode.MARKDOWN_V2
        )
        return

    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π
        msk_tz = pytz.timezone('Europe/Moscow')
        end_date = datetime.now(msk_tz).strftime('%Y-%m-%d')
        start_date = (datetime.now(msk_tz) - timedelta(days=30)).strftime('%Y-%m-%d')
        
        generation_costs = await get_generation_cost_log(start_date, end_date)
        
        if not generation_costs:
            text = escape_md_v2("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –∑–∞—Ç—Ä–∞—Ç–∞—Ö –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π\\.")
            await send_message_with_fallback(
                query.bot, user_id, text,
                reply_markup=await create_admin_keyboard(user_id),
                parse_mode=ParseMode.MARKDOWN_V2
            )
            return
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –º–æ–¥–µ–ª—è–º
        model_costs = {}
        total_cost = 0
        
        for cost in generation_costs:
            model_name = cost[1]
            cost_amount = cost[2]
            model_costs[model_name] = model_costs.get(model_name, 0) + cost_amount
            total_cost += cost_amount
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –æ—Ç—á–µ—Ç–∞
        text_parts = [
            escape_md_v2("üé® –ó–∞—Ç—Ä–∞—Ç—ã –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π\n\n") +
            f"–û–±—â–∞—è —Å—É–º–º–∞: `{total_cost}` —Ä—É–±\\.\n\n"
        ]
        
        for model, cost in model_costs.items():
            percentage = (cost / total_cost * 100) if total_cost > 0 else 0
            text_parts.append(f"‚Ä¢ {model}: `{cost}` —Ä—É–±\\. \\({percentage:.1f}%\\)\n")
        
        text = "".join(text_parts)
        
        await send_message_with_fallback(
            query.bot, user_id, text,
            reply_markup=await create_admin_keyboard(user_id),
            parse_mode=ParseMode.MARKDOWN_V2
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ show_replicate_costs –¥–ª—è user_id={user_id}: {e}", exc_info=True)
        await send_message_with_fallback(
            query.bot, user_id, escape_md_v2("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞—Ç—Ä–∞—Ç\\."),
            reply_markup=await create_admin_keyboard(user_id),
            parse_mode=ParseMode.MARKDOWN_V2
        )

async def cancel_payments(message: Message, state: FSMContext) -> None:
    """–û—Ç–º–µ–Ω—è–µ—Ç –≤–≤–æ–¥ –¥–∞—Ç –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π."""
    user_id = message.from_user.id
    if user_id not in ADMIN_IDS:
        return

    await state.clear()
    text = escape_md_v2("‚ùå –í–≤–æ–¥ –¥–∞—Ç –æ—Ç–º–µ–Ω–µ–Ω\\.")
    await send_message_with_fallback(
        message.bot, user_id, text,
        reply_markup=await create_admin_keyboard(user_id),
        parse_mode=ParseMode.MARKDOWN_V2
    )

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
@payments_router.callback_query(
    lambda c: c.data and c.data.startswith("payments_date_") or c.data in ["payments_manual_date", "admin_payments"]
)
async def payments_callback_handler(query: CallbackQuery, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –ø–ª–∞—Ç–µ–∂–µ–π."""
    user_id = query.from_user.id
    if user_id not in ADMIN_IDS:
        await query.answer("‚õî –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤", show_alert=True)
        return

    callback_data = query.data
    logger.debug(f"payments_callback_handler: user_id={user_id}, callback_data={callback_data}")

    try:
        if callback_data == "admin_payments":
            await show_payments_menu(query, state)
        elif callback_data == "payments_manual_date":
            await handle_manual_date_input(query, state)
        elif callback_data.startswith("payments_date_"):
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞—Ç—ã –∏–∑ callback_data
            parts = callback_data.split("_")
            if len(parts) >= 4:
                start_date = parts[2]
                end_date = parts[3]
                await handle_payments_date(query, state, start_date, end_date)
            else:
                await query.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö", show_alert=True)
        else:
            logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π callback_data: {callback_data}")
            await query.answer("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞", show_alert=True)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ payments_callback_handler: {e}")
        await query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π
@payments_router.message(BotStates.AWAITING_PAYMENT_DATES)
async def handle_payments_date_input_wrapper(message: Message, state: FSMContext) -> None:
    """–û–±–µ—Ä—Ç–∫–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–≤–æ–¥–∞ –¥–∞—Ç –ø–ª–∞—Ç–µ–∂–µ–π."""
    await handle_payments_date_input(message, state)

@payments_router.message(Command("cancel"))
async def cancel_payments_wrapper(message: Message, state: FSMContext) -> None:
    """–û–±–µ—Ä—Ç–∫–∞ –¥–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–æ–¥–∞ –¥–∞—Ç –ø–ª–∞—Ç–µ–∂–µ–π."""
    await cancel_payments(message, state)