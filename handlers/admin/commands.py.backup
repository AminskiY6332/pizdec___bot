# handlers/admin/commands.py
"""
–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã

–ü–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ –∏–∑ handlers/commands.py:
- addcook() - –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–µ—á–µ–Ω–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
- delcook() - —É–¥–∞–ª–µ–Ω–∏–µ –ø–µ—á–µ–Ω–µ–∫ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è  
- addnew() - –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
- delnew() - —É–¥–∞–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
- user_id_info() - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
- dev_test_tariff() - —Ç–µ—Å—Ç–æ–≤—ã–π —Ç–∞—Ä–∏—Ñ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞
- debug_avatars() - –æ—Ç–ª–∞–¥–∫–∞ –∞–≤–∞—Ç–∞—Ä–æ–≤
"""

import logging
import asyncio
import os
import pytz
import aiosqlite
from aiogram import Bot
from datetime import datetime
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, FSInputFile
from aiogram.fsm.context import FSMContext
from aiogram.enums import ParseMode
from config import ADMIN_IDS, REPLICATE_USERNAME_OR_ORG_NAME
from database import (
    add_user_without_subscription,
    check_user_resources,
    update_user_balance,
    is_old_user,
    get_user_actions_stats,
    is_user_blocked,
    get_user_trainedmodels,
    get_active_trainedmodel,
    check_database_user,
    get_user_payments,
    update_user_credits,
    get_user_info,
    get_user_by_username,
    get_user_generation_stats
)
from keyboards import create_main_menu_keyboard, create_subscription_keyboard, create_user_profile_keyboard, create_payment_only_keyboard
from generation import reset_generation_context, check_training_status
from handlers.utils import safe_escape_markdown as escape_md, get_tariff_text, send_message_with_fallback
from ..user.onboarding import send_onboarding_message, schedule_welcome_message, schedule_daily_reminders
from bot_counter import bot_counter

from logger import get_logger
logger = get_logger('main')

async def dev_test_tariff(message: Message, state: FSMContext) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–π —Ç–∞—Ä–∏—Ñ —Ç–æ–ª—å–∫–æ –≥–ª–∞–≤–Ω–æ–º—É —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É."""
    user_id = message.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –≥–ª–∞–≤–Ω—ã–π —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫
    if user_id != 5667999089:
        await message.answer("‚ùå –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≥–ª–∞–≤–Ω–æ–º—É —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É.")
        return

    from config import TARIFFS
    test_tariff = TARIFFS.get("—Ç–µ—Å—Ç")

    if not test_tariff:
        await message.answer("‚ùå –¢–µ—Å—Ç–æ–≤—ã–π —Ç–∞—Ä–∏—Ñ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.")
        return

    text = escape_md(f"""üß™ –¢–ï–°–¢–û–í–´–ô –¢–ê–†–ò–§ –î–õ–Ø –ü–†–û–í–ï–†–ö–ò –ü–õ–ê–¢–ï–ñ–ï–ô

üíé {test_tariff['display']}
üìù –û–ø–∏—Å–∞–Ω–∏–µ: {test_tariff['description']}
üí∞ –°—É–º–º–∞: {test_tariff['amount']:.2f}‚ÇΩ
üç™ –ü–µ—á–µ–Ω—å–∫–∏: {test_tariff['photos']}

üîó –≠—Ç–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Ç–∞—Ä–∏—Ñ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã.""", version=2)

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=test_tariff["display"], callback_data=test_tariff["callback"])],
        [InlineKeyboardButton(text="üè† –í –º–µ–Ω—é", callback_data="back_to_menu")]
    ])

    await message.answer(
        text,
        reply_markup=keyboard,
        parse_mode=ParseMode.MARKDOWN_V2
    )

    logger.info(f"–¢–µ—Å—Ç–æ–≤—ã–π —Ç–∞—Ä–∏—Ñ –ø–æ–∫–∞–∑–∞–Ω –≥–ª–∞–≤–Ω–æ–º—É —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É user_id={user_id}")
    await state.update_data(user_id=user_id)

async def debug_avatars(message: Message, state: FSMContext) -> None:
    """–û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤–∞—Ç–∞—Ä–æ–≤ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)."""
    user_id = message.from_user.id

    if user_id not in ADMIN_IDS:
        await message.answer(
            escape_md("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.", version=2),
            parse_mode=ParseMode.MARKDOWN_V2
        )
        return

    if await is_user_blocked(user_id):
        logger.info(f"–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å user_id={user_id} –ø—ã—Ç–∞–ª—Å—è –≤—ã–ø–æ–ª–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ")
        return

    bot = message.bot

    try:
        models = await get_user_trainedmodels(user_id)

        if not models:
            await message.answer(
                escape_md("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –æ–±—É—á–µ–Ω–Ω—ã—Ö –∞–≤–∞—Ç–∞—Ä–æ–≤.", version=2),
                parse_mode=ParseMode.MARKDOWN_V2
            )
            return

        active_model = await get_active_trainedmodel(user_id)
        
        text = escape_md(f"üîç –û–¢–õ–ê–î–ö–ê –ê–í–ê–¢–ê–†–û–í\n\n", version=2)
        
        for model in models:
            status = "‚úÖ –ê–ö–¢–ò–í–ï–ù" if model['id'] == active_model['id'] else "‚è∏Ô∏è –ù–ï–ê–ö–¢–ò–í–ï–ù"
            text += escape_md(f"üé≠ {model['name']}\n", version=2)
            text += escape_md(f"üìä –°—Ç–∞—Ç—É—Å: {status}\n", version=2)
            text += escape_md(f"üÜî ID: {model['id']}\n", version=2)
            text += escape_md(f"üìÖ –°–æ–∑–¥–∞–Ω: {model['created_at']}\n", version=2)
            text += escape_md(f"üîÑ –û–±–Ω–æ–≤–ª–µ–Ω: {model['updated_at']}\n\n", version=2)

        await message.answer(
            text,
            parse_mode=ParseMode.MARKDOWN_V2
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ debug_avatars: {e}", exc_info=True)
        await message.answer(
            escape_md("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞–≤–∞—Ç–∞—Ä–∞—Ö.", version=2),
            parse_mode=ParseMode.MARKDOWN_V2
        )

async def addcook(message: Message, state: FSMContext) -> None:
    """–î–æ–±–∞–≤–ª—è–µ—Ç –ø–µ—á–µ–Ω—å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)."""
    user_id = message.from_user.id

    if user_id not in ADMIN_IDS:
        await message.answer(
            escape_md("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.", version=2),
            parse_mode=ParseMode.MARKDOWN_V2
        )
        return

    if await is_user_blocked(user_id):
        logger.info(f"–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å user_id={user_id} –ø—ã—Ç–∞–ª—Å—è –≤—ã–ø–æ–ª–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ")
        return

    try:
        # –ü–∞—Ä—Å–∏–º –∫–æ–º–∞–Ω–¥—É: /addcook user_id –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        parts = message.text.split()
        if len(parts) != 3:
            await message.answer(
                escape_md("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã.\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /addcook user_id –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ\n–ü—Ä–∏–º–µ—Ä: /addcook 123456 30", version=2),
                parse_mode=ParseMode.MARKDOWN_V2
            )
            return

        target_user_id = int(parts[1])
        amount = int(parts[2])

        if amount <= 0:
            await message.answer(
                escape_md("‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—á–µ–Ω–µ–∫ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º.", version=2),
                parse_mode=ParseMode.MARKDOWN_V2
            )
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_info = await get_user_info(target_user_id)
        if not user_info:
            await message.answer(
                escape_md(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {target_user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.", version=2),
                parse_mode=ParseMode.MARKDOWN_V2
            )
            return

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        text = escape_md(f"üîß –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–ï –î–û–ë–ê–í–õ–ï–ù–ò–Ø –ü–ï–ß–ï–ù–ï–ö\n\n", version=2)
        text += escape_md(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_info['username'] or '–ë–µ–∑ –∏–º–µ–Ω–∏'}\n", version=2)
        text += escape_md(f"üÜî ID: {target_user_id}\n", version=2)
        text += escape_md(f"üç™ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {user_info['generations_left']}\n", version=2)
        text += escape_md(f"‚ûï –î–æ–±–∞–≤–∏—Ç—å: {amount}\n", version=2)
        text += escape_md(f"üìä –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {user_info['generations_left'] + amount}\n\n", version=2)
        text += escape_md(f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", version=2)

        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"confirm_addcook_{target_user_id}_{amount}")],
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_admin_operation")]
        ])

        await message.answer(
            text,
            reply_markup=keyboard,
            parse_mode=ParseMode.MARKDOWN_V2
        )

    except ValueError:
        await message.answer(
            escape_md("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —á–∏—Å–ª–∞.", version=2),
            parse_mode=ParseMode.MARKDOWN_V2
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ addcook: {e}", exc_info=True)
        await message.answer(
            escape_md("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã.", version=2),
            parse_mode=ParseMode.MARKDOWN_V2
        )

async def delcook(message: Message, state: FSMContext) -> None:
    """–£–¥–∞–ª—è–µ—Ç –ø–µ—á–µ–Ω—å–∫–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)."""
    user_id = message.from_user.id

    if user_id not in ADMIN_IDS:
        await message.answer(
            escape_md("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.", version=2),
            parse_mode=ParseMode.MARKDOWN_V2
        )
        return

    if await is_user_blocked(user_id):
        logger.info(f"–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å user_id={user_id} –ø—ã—Ç–∞–ª—Å—è –≤—ã–ø–æ–ª–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ")
        return

    try:
        # –ü–∞—Ä—Å–∏–º –∫–æ–º–∞–Ω–¥—É: /delcook user_id –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        parts = message.text.split()
        if len(parts) != 3:
            await message.answer(
                escape_md("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã.\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /delcook user_id –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ\n–ü—Ä–∏–º–µ—Ä: /delcook 123456 10", version=2),
                parse_mode=ParseMode.MARKDOWN_V2
            )
            return

        target_user_id = int(parts[1])
        amount = int(parts[2])

        if amount <= 0:
            await message.answer(
                escape_md("‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—á–µ–Ω–µ–∫ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º.", version=2),
                parse_mode=ParseMode.MARKDOWN_V2
            )
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_info = await get_user_info(target_user_id)
        if not user_info:
            await message.answer(
                escape_md(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {target_user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.", version=2),
                parse_mode=ParseMode.MARKDOWN_V2
            )
            return

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        text = escape_md(f"üîß –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–ï –£–î–ê–õ–ï–ù–ò–Ø –ü–ï–ß–ï–ù–ï–ö\n\n", version=2)
        text += escape_md(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_info['username'] or '–ë–µ–∑ –∏–º–µ–Ω–∏'}\n", version=2)
        text += escape_md(f"üÜî ID: {target_user_id}\n", version=2)
        text += escape_md(f"üç™ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {user_info['generations_left']}\n", version=2)
        text += escape_md(f"‚ûñ –£–¥–∞–ª–∏—Ç—å: {amount}\n", version=2)
        text += escape_md(f"üìä –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {max(0, user_info['generations_left'] - amount)}\n\n", version=2)
        text += escape_md(f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", version=2)

        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"confirm_delcook_{target_user_id}_{amount}")],
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_admin_operation")]
        ])

        await message.answer(
            text,
            reply_markup=keyboard,
            parse_mode=ParseMode.MARKDOWN_V2
        )

    except ValueError:
        await message.answer(
            escape_md("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —á–∏—Å–ª–∞.", version=2),
            parse_mode=ParseMode.MARKDOWN_V2
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ delcook: {e}", exc_info=True)
        await message.answer(
            escape_md("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã.", version=2),
            parse_mode=ParseMode.MARKDOWN_V2
        )

async def addnew(message: Message, state: FSMContext) -> None:
    """–î–æ–±–∞–≤–ª—è–µ—Ç –∞–≤–∞—Ç–∞—Ä—ã (–ø–µ—á–µ–Ω—å–∫–∏) –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)."""
    user_id = message.from_user.id

    if user_id not in ADMIN_IDS:
        await message.answer(
            escape_md("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.", version=2),
            parse_mode=ParseMode.MARKDOWN_V2
        )
        return

    if await is_user_blocked(user_id):
        logger.info(f"–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å user_id={user_id} –ø—ã—Ç–∞–ª—Å—è –≤—ã–ø–æ–ª–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ")
        return

    try:
        # –ü–∞—Ä—Å–∏–º –∫–æ–º–∞–Ω–¥—É: /addnew user_id –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        parts = message.text.split()
        if len(parts) != 3:
            await message.answer(
                escape_md("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã.\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /addnew user_id –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ\n–ü—Ä–∏–º–µ—Ä: /addnew 123456 30", version=2),
                parse_mode=ParseMode.MARKDOWN_V2
            )
            return

        target_user_id = int(parts[1])
        amount = int(parts[2])

        if amount <= 0:
            await message.answer(
                escape_md("‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–≤–∞—Ç–∞—Ä–æ–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º.", version=2),
                parse_mode=ParseMode.MARKDOWN_V2
            )
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_info = await get_user_info(target_user_id)
        if not user_info:
            await message.answer(
                escape_md(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {target_user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.", version=2),
                parse_mode=ParseMode.MARKDOWN_V2
            )
            return

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        text = escape_md(f"üîß –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–ï –î–û–ë–ê–í–õ–ï–ù–ò–Ø –ê–í–ê–¢–ê–†–û–í\n\n", version=2)
        text += escape_md(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_info['username'] or '–ë–µ–∑ –∏–º–µ–Ω–∏'}\n", version=2)
        text += escape_md(f"üÜî ID: {target_user_id}\n", version=2)
        text += escape_md(f"üé≠ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å –∞–≤–∞—Ç–∞—Ä–æ–≤: {user_info['generations_left']}\n", version=2)
        text += escape_md(f"‚ûï –î–æ–±–∞–≤–∏—Ç—å: {amount}\n", version=2)
        text += escape_md(f"üìä –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {user_info['generations_left'] + amount}\n\n", version=2)
        text += escape_md(f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", version=2)

        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"confirm_addnew_{target_user_id}_{amount}")],
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_admin_operation")]
        ])

        await message.answer(
            text,
            reply_markup=keyboard,
            parse_mode=ParseMode.MARKDOWN_V2
        )

    except ValueError:
        await message.answer(
            escape_md("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —á–∏—Å–ª–∞.", version=2),
            parse_mode=ParseMode.MARKDOWN_V2
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ addnew: {e}", exc_info=True)
        await message.answer(
            escape_md("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã.", version=2),
            parse_mode=ParseMode.MARKDOWN_V2
        )

async def delnew(message: Message, state: FSMContext) -> None:
    """–£–¥–∞–ª—è–µ—Ç –∞–≤–∞—Ç–∞—Ä—ã (–ø–µ—á–µ–Ω—å–∫–∏) —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)."""
    user_id = message.from_user.id

    if user_id not in ADMIN_IDS:
        await message.answer(
            escape_md("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.", version=2),
            parse_mode=ParseMode.MARKDOWN_V2
        )
        return

    if await is_user_blocked(user_id):
        logger.info(f"–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å user_id={user_id} –ø—ã—Ç–∞–ª—Å—è –≤—ã–ø–æ–ª–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ")
        return

    try:
        # –ü–∞—Ä—Å–∏–º –∫–æ–º–∞–Ω–¥—É: /delnew user_id –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        parts = message.text.split()
        if len(parts) != 3:
            await message.answer(
                escape_md("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã.\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /delnew user_id –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ\n–ü—Ä–∏–º–µ—Ä: /delnew 123456 10", version=2),
                parse_mode=ParseMode.MARKDOWN_V2
            )
            return

        target_user_id = int(parts[1])
        amount = int(parts[2])

        if amount <= 0:
            await message.answer(
                escape_md("‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–≤–∞—Ç–∞—Ä–æ–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º.", version=2),
                parse_mode=ParseMode.MARKDOWN_V2
            )
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_info = await get_user_info(target_user_id)
        if not user_info:
            await message.answer(
                escape_md(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {target_user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.", version=2),
                parse_mode=ParseMode.MARKDOWN_V2
            )
            return

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        text = escape_md(f"üîß –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–ï –£–î–ê–õ–ï–ù–ò–Ø –ê–í–ê–¢–ê–†–û–í\n\n", version=2)
        text += escape_md(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_info['username'] or '–ë–µ–∑ –∏–º–µ–Ω–∏'}\n", version=2)
        text += escape_md(f"üÜî ID: {target_user_id}\n", version=2)
        text += escape_md(f"üé≠ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å –∞–≤–∞—Ç–∞—Ä–æ–≤: {user_info['generations_left']}\n", version=2)
        text += escape_md(f"‚ûñ –£–¥–∞–ª–∏—Ç—å: {amount}\n", version=2)
        text += escape_md(f"üìä –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {max(0, user_info['generations_left'] - amount)}\n\n", version=2)
        text += escape_md(f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", version=2)

        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"confirm_delnew_{target_user_id}_{amount}")],
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_admin_operation")]
        ])

        await message.answer(
            text,
            reply_markup=keyboard,
            parse_mode=ParseMode.MARKDOWN_V2
        )

    except ValueError:
        await message.answer(
            escape_md("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —á–∏—Å–ª–∞.", version=2),
            parse_mode=ParseMode.MARKDOWN_V2
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ delnew: {e}", exc_info=True)
        await message.answer(
            escape_md("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã.", version=2),
            parse_mode=ParseMode.MARKDOWN_V2
        )

async def user_id_info(message: Message, state: FSMContext) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)."""
    user_id = message.from_user.id

    if user_id not in ADMIN_IDS:
        await message.answer(
            escape_md("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.", version=2),
            parse_mode=ParseMode.MARKDOWN_V2
        )
        return

    if await is_user_blocked(user_id):
        logger.info(f"–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å user_id={user_id} –ø—ã—Ç–∞–ª—Å—è –≤—ã–ø–æ–ª–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ")
        return

    try:
        # –ü–∞—Ä—Å–∏–º –∫–æ–º–∞–Ω–¥—É: /id user_id
        parts = message.text.split()
        if len(parts) != 2:
            await message.answer(
                escape_md("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã.\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /id user_id\n–ü—Ä–∏–º–µ—Ä: /id 123456", version=2),
                parse_mode=ParseMode.MARKDOWN_V2
            )
            return

        target_user_id = int(parts[1])

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        user_info = await get_user_info(target_user_id)
        if not user_info:
            await message.answer(
                escape_md(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {target_user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.", version=2),
                parse_mode=ParseMode.MARKDOWN_V2
            )
            return

        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats = await get_user_actions_stats(target_user_id)
        payments = await get_user_payments(target_user_id)
        generation_stats = await get_user_generation_stats(target_user_id)

        text = escape_md(f"üë§ –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï\n\n", version=2)
        text += escape_md(f"üÜî ID: {target_user_id}\n", version=2)
        text += escape_md(f"üë§ –ò–º—è: {user_info['username'] or '–ë–µ–∑ –∏–º–µ–Ω–∏'}\n", version=2)
        text += escape_md(f"üìß Email: {user_info['email'] or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n", version=2)
        text += escape_md(f"üç™ –ü–µ—á–µ–Ω—å–∫–∏: {user_info['credits']}\n", version=2)
        text += escape_md(f"üìÖ –ü–æ–¥–ø–∏—Å–∫–∞ –¥–æ: {user_info['subscription_end'] or '–ù–µ—Ç'}\n", version=2)
        text += escape_md(f"üìä –î–µ–π—Å—Ç–≤–∏–π: {stats.get('total_actions', 0)}\n", version=2)
        text += escape_md(f"üí∞ –ü–ª–∞—Ç–µ–∂–µ–π: {len(payments)}\n", version=2)
        text += escape_md(f"üé≠ –ì–µ–Ω–µ—Ä–∞—Ü–∏–π: {generation_stats.get('total_generations', 0)}\n", version=2)
        text += escape_md(f"üìÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: {user_info['created_at']}\n", version=2)

        await message.answer(
            text,
            parse_mode=ParseMode.MARKDOWN_V2
        )

    except ValueError:
        await message.answer(
            escape_md("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —á–∏—Å–ª–∞.", version=2),
            parse_mode=ParseMode.MARKDOWN_V2
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ user_id_info: {e}", exc_info=True)
        await message.answer(
            escape_md("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ.", version=2),
            parse_mode=ParseMode.MARKDOWN_V2
        )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback'–æ–≤ –¥–ª—è –∞–¥–º–∏–Ω—Å–∫–∏—Ö –∫–æ–º–∞–Ω–¥
from aiogram.types import CallbackQuery
from aiogram import F

async def confirm_addcook_callback(query: CallbackQuery, state: FSMContext) -> None:
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–µ—á–µ–Ω–µ–∫."""
    user_id = query.from_user.id
    
    if user_id not in ADMIN_IDS:
        await query.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤.", show_alert=True)
        return
    
    try:
        # –ü–∞—Ä—Å–∏–º callback_data: confirm_addcook_{target_user_id}_{amount}
        parts = query.data.split('_')
        target_user_id = int(parts[2])
        amount = int(parts[3])
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        user_info = await get_user_info(target_user_id)
        if not user_info:
            await query.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å
        new_balance = user_info['generations_left'] + amount
        await update_user_balance(target_user_id, amount, 0)  # –¥–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—á–µ–Ω—å–∫–∏, –∞–≤–∞—Ç–∞—Ä—ã –Ω–µ —Ç—Ä–æ–≥–∞–µ–º
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        await query.message.edit_text(
            escape_md(f"‚úÖ –ü–µ—á–µ–Ω—å–∫–∏ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã!\n\nüë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_info['username'] or '–ë–µ–∑ –∏–º–µ–Ω–∏'}\nüÜî ID: {target_user_id}\nüç™ –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {new_balance}", version=2),
            parse_mode=ParseMode.MARKDOWN_V2
        )
        await query.answer("‚úÖ –û–ø–µ—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!", show_alert=True)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ confirm_addcook_callback: {e}", exc_info=True)
        await query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏.", show_alert=True)

async def confirm_delcook_callback(query: CallbackQuery, state: FSMContext) -> None:
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –ø–µ—á–µ–Ω–µ–∫."""
    user_id = query.from_user.id
    
    if user_id not in ADMIN_IDS:
        await query.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤.", show_alert=True)
        return
    
    try:
        # –ü–∞—Ä—Å–∏–º callback_data: confirm_delcook_{target_user_id}_{amount}
        parts = query.data.split('_')
        target_user_id = int(parts[2])
        amount = int(parts[3])
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        user_info = await get_user_info(target_user_id)
        if not user_info:
            await query.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å
        new_balance = max(0, user_info['generations_left'] - amount)
        await update_user_balance(target_user_id, amount, 0, 'subtract')  # —É–¥–∞–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—á–µ–Ω—å–∫–∏, –∞–≤–∞—Ç–∞—Ä—ã –Ω–µ —Ç—Ä–æ–≥–∞–µ–º
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        await query.message.edit_text(
            escape_md(f"‚úÖ –ü–µ—á–µ–Ω—å–∫–∏ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã!\n\nüë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_info['username'] or '–ë–µ–∑ –∏–º–µ–Ω–∏'}\nüÜî ID: {target_user_id}\nüç™ –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {new_balance}", version=2),
            parse_mode=ParseMode.MARKDOWN_V2
        )
        await query.answer("‚úÖ –û–ø–µ—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!", show_alert=True)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ confirm_delcook_callback: {e}", exc_info=True)
        await query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏.", show_alert=True)

async def confirm_addnew_callback(query: CallbackQuery, state: FSMContext) -> None:
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–≤–∞—Ç–∞—Ä–æ–≤."""
    user_id = query.from_user.id
    
    if user_id not in ADMIN_IDS:
        await query.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤.", show_alert=True)
        return
    
    try:
        # –ü–∞—Ä—Å–∏–º callback_data: confirm_addnew_{target_user_id}_{amount}
        parts = query.data.split('_')
        target_user_id = int(parts[2])
        amount = int(parts[3])
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        user_info = await get_user_info(target_user_id)
        if not user_info:
            await query.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –∞–≤–∞—Ç–∞—Ä–æ–≤
        new_balance = user_info['generations_left'] + amount
        await update_user_balance(target_user_id, 0, amount)  # –¥–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∞–≤–∞—Ç–∞—Ä—ã, –ø–µ—á–µ–Ω—å–∫–∏ –Ω–µ —Ç—Ä–æ–≥–∞–µ–º
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        await query.message.edit_text(
            escape_md(f"‚úÖ –ê–≤–∞—Ç–∞—Ä—ã —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã!\n\nüë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_info['username'] or '–ë–µ–∑ –∏–º–µ–Ω–∏'}\nüÜî ID: {target_user_id}\nüé≠ –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {new_balance}", version=2),
            parse_mode=ParseMode.MARKDOWN_V2
        )
        await query.answer("‚úÖ –û–ø–µ—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!", show_alert=True)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ confirm_addnew_callback: {e}", exc_info=True)
        await query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏.", show_alert=True)

async def confirm_delnew_callback(query: CallbackQuery, state: FSMContext) -> None:
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –∞–≤–∞—Ç–∞—Ä–æ–≤."""
    user_id = query.from_user.id
    
    if user_id not in ADMIN_IDS:
        await query.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤.", show_alert=True)
        return
    
    try:
        # –ü–∞—Ä—Å–∏–º callback_data: confirm_delnew_{target_user_id}_{amount}
        parts = query.data.split('_')
        target_user_id = int(parts[2])
        amount = int(parts[3])
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        user_info = await get_user_info(target_user_id)
        if not user_info:
            await query.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –∞–≤–∞—Ç–∞—Ä–æ–≤
        new_balance = max(0, user_info['generations_left'] - amount)
        await update_user_balance(target_user_id, 0, amount, 'subtract')  # —É–¥–∞–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∞–≤–∞—Ç–∞—Ä—ã
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        await query.message.edit_text(
            escape_md(f"‚úÖ –ê–≤–∞—Ç–∞—Ä—ã —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã!\n\nüë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_info['username'] or '–ë–µ–∑ –∏–º–µ–Ω–∏'}\nüÜî ID: {target_user_id}\nüé≠ –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {new_balance}", version=2),
            parse_mode=ParseMode.MARKDOWN_V2
        )
        await query.answer("‚úÖ –û–ø–µ—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!", show_alert=True)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ confirm_delnew_callback: {e}", exc_info=True)
        await query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏.", show_alert=True)

async def cancel_admin_operation_callback(query: CallbackQuery, state: FSMContext) -> None:
    """–û—Ç–º–µ–Ω–∞ –∞–¥–º–∏–Ω—Å–∫–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏."""
    user_id = query.from_user.id
    
    if user_id not in ADMIN_IDS:
        await query.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤.", show_alert=True)
        return
    
    await query.message.edit_text(
        escape_md("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.", version=2),
        parse_mode=ParseMode.MARKDOWN_V2
    )
    await query.answer("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞", show_alert=True)
