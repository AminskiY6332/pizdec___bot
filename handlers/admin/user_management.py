# handlers/admin/user_management.py

import asyncio
import logging
import uuid
import re
from states import BotStates
from datetime import datetime
from typing import List, Dict, Optional
from aiogram import Router, Bot
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.fsm.context import FSMContext
from aiogram.enums import ParseMode
from aiogram.filters import Command
from database import (
    check_database_user, get_user_generation_stats, get_user_payments, get_user_trainedmodels,
    get_user_rating_and_registration, get_user_logs, delete_user_activity, block_user_access, is_user_blocked,
    update_user_credits, get_active_trainedmodel, search_users_by_query
)
from config import ADMIN_IDS
from keyboards import create_admin_user_actions_keyboard, create_admin_keyboard
from handlers.utils import (
    escape_message_parts, send_message_with_fallback, truncate_text,
    create_isolated_context, clean_admin_context
)
import aiosqlite
from keyboards import create_main_menu_keyboard

from logger import get_logger
logger = get_logger('main')

# –°–æ–∑–¥–∞–Ω–∏–µ —Ä–æ—É—Ç–µ—Ä–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
user_management_router = Router()

async def show_user_actions(query: CallbackQuery, state: FSMContext) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ–π—Å—Ç–≤–∏—è, –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∞–¥–º–∏–Ω—É –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    user_id = query.from_user.id
    if user_id not in ADMIN_IDS:
        await query.answer("‚õî –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤", show_alert=True)
        await state.clear()
        text = escape_message_parts("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤.", version=2)
        await query.message.answer(
            text,
            parse_mode=ParseMode.MARKDOWN_V2
        )
        return

    callback_data = query.data
    logger.debug(f"show_user_actions: user_id={user_id}, callback_data={callback_data}")

    try:
        parts = callback_data.split("_")
        if len(parts) < 3 or parts[0] != "user" or parts[1] != "actions":
            raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç callback_data")
        target_user_id = int(parts[2])
    except (ValueError, IndexError) as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback_data: {callback_data}, error: {e}")
        await state.clear()
        text = escape_message_parts(
            "‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã.",
            " –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
            version=2
        )
        await send_message_with_fallback(
            query.bot, user_id, text,
            reply_markup=await create_admin_user_actions_keyboard(0, False),
            parse_mode=ParseMode.MARKDOWN_V2
        )
        return

    target_user_info = await check_database_user(target_user_id)
    if not target_user_info or (target_user_info[3] is None and target_user_info[8] is None):
        await state.clear()
        text = escape_message_parts(
            f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID `{target_user_id}` –Ω–µ –Ω–∞–π–¥–µ–Ω.",
            version=2
        )
        await send_message_with_fallback(
            query.bot, user_id, text,
            reply_markup=await create_admin_user_actions_keyboard(target_user_id, False),
            parse_mode=ParseMode.MARKDOWN_V2
        )
        return

    g_left, a_left, _, u_name, _, f_purchase_val, email_val, act_avatar_id, f_name, _, _, _, _, _ = target_user_info
    display_name = f_name or u_name or f"ID {target_user_id}"
    username_display = f"(@{u_name})" if u_name and u_name != "–ë–µ–∑ –∏–º–µ–Ω–∏" else ""
    email_display = email_val or "–ù–µ —É–∫–∞–∑–∞–Ω"

    text_parts = [
        "üë§ –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ\n\n",
        f"–ò–º—è: {display_name} {username_display}\n",
        f"ID: `{target_user_id}`\n",
        f"Email: {email_display}\n",
        "\nüí∞ –ë–∞–ª–∞–Ω—Å:\n",
        f"  ‚Ä¢ –ü–µ—á–µ–Ω—å–∫–∏: `{g_left}`\n",
        f"  ‚Ä¢ –ê–≤–∞—Ç–∞—Ä—ã: `{a_left}`\n"
    ]

    gen_stats = await get_user_generation_stats(target_user_id)
    if gen_stats:
        total_generations = gen_stats.get('total_generations', 0)
        successful_generations = gen_stats.get('successful_generations', 0)
        failed_generations = gen_stats.get('failed_generations', 0)
        text_parts.extend([
            "\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–π:\n",
            f"  ‚Ä¢ –í—Å–µ–≥–æ: `{total_generations}`\n",
            f"  ‚Ä¢ –£—Å–ø–µ—à–Ω—ã—Ö: `{successful_generations}`\n",
            f"  ‚Ä¢ –ù–µ—É–¥–∞—á–Ω—ã—Ö: `{failed_generations}`\n"
        ])

    payments = await get_user_payments(target_user_id)
    if payments:
        total_payments = len(payments)
        total_amount = sum(payment[2] for payment in payments if payment[2])
        text_parts.extend([
            "\nüí≥ –ü–ª–∞—Ç–µ–∂–∏:\n",
            f"  ‚Ä¢ –í—Å–µ–≥–æ –ø–ª–∞—Ç–µ–∂–µ–π: `{total_payments}`\n",
            f"  ‚Ä¢ –û–±—â–∞—è —Å—É–º–º–∞: `{total_amount}` —Ä—É–±.\n"
        ])

    text = "".join(text_parts)
    await send_message_with_fallback(
        query.bot, user_id, text,
        reply_markup=await create_admin_user_actions_keyboard(target_user_id, True),
        parse_mode=ParseMode.MARKDOWN_V2
    )

async def show_user_profile_admin(query: CallbackQuery, state: FSMContext, target_user_id: int) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∞–¥–º–∏–Ω–∞."""
    user_id = query.from_user.id
    if user_id not in ADMIN_IDS:
        await query.answer("‚õî –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤", show_alert=True)
        return

    target_user_info = await check_database_user(target_user_id)
    if not target_user_info:
        await query.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return

    g_left, a_left, _, u_name, _, f_purchase_val, email_val, act_avatar_id, f_name, _, _, _, _, _ = target_user_info
    display_name = f_name or u_name or f"ID {target_user_id}"
    username_display = f"(@{u_name})" if u_name and u_name != "–ë–µ–∑ –∏–º–µ–Ω–∏" else ""
    email_display = email_val or "–ù–µ —É–∫–∞–∑–∞–Ω"

    text_parts = [
        "üë§ –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n\n",
        f"–ò–º—è: {display_name} {username_display}\n",
        f"ID: `{target_user_id}`\n",
        f"Email: {email_display}\n",
        "\nüí∞ –ë–∞–ª–∞–Ω—Å:\n",
        f"  ‚Ä¢ –ü–µ—á–µ–Ω—å–∫–∏: `{g_left}`\n",
        f"  ‚Ä¢ –ê–≤–∞—Ç–∞—Ä—ã: `{a_left}`\n"
    ]

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–π—Ç–∏–Ω–≥–µ –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    rating_info = await get_user_rating_and_registration(target_user_id)
    if rating_info:
        rating, registration_date = rating_info
        text_parts.extend([
            "\nüìÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:\n",
            f"  ‚Ä¢ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: `{registration_date}`\n",
            f"  ‚Ä¢ –†–µ–π—Ç–∏–Ω–≥: `{rating}`\n"
        ])

    text = "".join(text_parts)
    await send_message_with_fallback(
        query.bot, user_id, text,
        reply_markup=await create_admin_user_actions_keyboard(target_user_id, True),
        parse_mode=ParseMode.MARKDOWN_V2
    )

async def show_user_avatars_admin(query: CallbackQuery, state: FSMContext, target_user_id: int) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∞–≤–∞—Ç–∞—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∞–¥–º–∏–Ω–∞."""
    user_id = query.from_user.id
    if user_id not in ADMIN_IDS:
        await query.answer("‚õî –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤", show_alert=True)
        return

    trained_models = await get_user_trainedmodels(target_user_id)
    if not trained_models:
        text = escape_message_parts(
            f"‚ùå –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID `{target_user_id}` –Ω–µ—Ç –æ–±—É—á–µ–Ω–Ω—ã—Ö –∞–≤–∞—Ç–∞—Ä–æ–≤.",
            version=2
        )
        await send_message_with_fallback(
            query.bot, user_id, text,
            reply_markup=await create_admin_user_actions_keyboard(target_user_id, True),
            parse_mode=ParseMode.MARKDOWN_V2
        )
        return

    text_parts = [
        f"üé≠ –ê–≤–∞—Ç–∞—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID `{target_user_id}`\n\n"
    ]

    for i, model in enumerate(trained_models, 1):
        model_name = model[1] or f"–ê–≤–∞—Ç–∞—Ä {i}"
        created_date = model[2] or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        status = "‚úÖ –ê–∫—Ç–∏–≤–Ω—ã–π" if model[3] else "‚ùå –ù–µ–∞–∫—Ç–∏–≤–Ω—ã–π"
        
        text_parts.extend([
            f"{i}\\. {model_name}\n",
            f"   üìÖ –°–æ–∑–¥–∞–Ω: `{created_date}`\n",
            f"   üìä –°—Ç–∞—Ç—É—Å: {status}\n\n"
        ])

    text = "".join(text_parts)
    await send_message_with_fallback(
        query.bot, user_id, text,
        reply_markup=await create_admin_user_actions_keyboard(target_user_id, True),
        parse_mode=ParseMode.MARKDOWN_V2
    )

async def show_user_logs(query: CallbackQuery, state: FSMContext, target_user_id: int) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ª–æ–≥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∞–¥–º–∏–Ω–∞."""
    user_id = query.from_user.id
    if user_id not in ADMIN_IDS:
        await query.answer("‚õî –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤", show_alert=True)
        return

    logs = await get_user_logs(target_user_id, limit=10)
    if not logs:
        text = escape_message_parts(
            f"‚ùå –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID `{target_user_id}` –Ω–µ—Ç –ª–æ–≥–æ–≤.",
            version=2
        )
        await send_message_with_fallback(
            query.bot, user_id, text,
            reply_markup=await create_admin_user_actions_keyboard(target_user_id, True),
            parse_mode=ParseMode.MARKDOWN_V2
        )
        return

    text_parts = [
        f"üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID `{target_user_id}`\n\n"
    ]

    for i, log in enumerate(logs, 1):
        log_type = log[1] or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        log_message = log[2] or "–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è"
        log_date = log[3] or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        
        # –û–±—Ä–µ–∑–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        if len(log_message) > 100:
            log_message = log_message[:97] + "..."
        
        text_parts.extend([
            f"{i}\\. **{log_type}**\n",
            f"   üìù {log_message}\n",
            f"   üìÖ `{log_date}`\n\n"
        ])

    text = "".join(text_parts)
    await send_message_with_fallback(
        query.bot, user_id, text,
        reply_markup=await create_admin_user_actions_keyboard(target_user_id, True),
        parse_mode=ParseMode.MARKDOWN_V2
    )

async def change_balance_admin(query: CallbackQuery, state: FSMContext) -> None:
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –∏–∑–º–µ–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    user_id = query.from_user.id
    if user_id not in ADMIN_IDS:
        await query.answer("‚õî –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤", show_alert=True)
        return

    callback_data = query.data
    try:
        parts = callback_data.split("_")
        if len(parts) < 4 or parts[0] != "change" or parts[1] != "balance":
            raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç callback_data")
        target_user_id = int(parts[2])
        balance_type = parts[3]  # "g" –¥–ª—è –ø–µ—á–µ–Ω–µ–∫, "a" –¥–ª—è –∞–≤–∞—Ç–∞—Ä–æ–≤
    except (ValueError, IndexError) as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback_data: {callback_data}, error: {e}")
        await query.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã", show_alert=True)
        return

    await state.update_data(
        target_user_id=target_user_id,
        balance_type=balance_type
    )

    balance_name = "–ø–µ—á–µ–Ω–µ–∫" if balance_type == "g" else "–∞–≤–∞—Ç–∞—Ä–æ–≤"
    text = escape_message_parts(
        f"üí∞ –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ {balance_name} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID `{target_user_id}`\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ —á–∏—Å–ª–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è, –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ –¥–ª—è –≤—ã—á–∏—Ç–∞–Ω–∏—è.\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: `+10` –∏–ª–∏ `-5`",
        version=2
    )

    await send_message_with_fallback(
        query.bot, user_id, text,
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –û—Ç–º–µ–Ω–∞", callback_data=f"user_actions_{target_user_id}")]
        ]),
        parse_mode=ParseMode.MARKDOWN_V2
    )
    await state.set_state(BotStates.AWAITING_BALANCE_CHANGE)

async def handle_balance_change_input(message: Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –∏–∑–º–µ–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞."""
    user_id = message.from_user.id
    if user_id not in ADMIN_IDS:
        return

    try:
        change_amount = int(message.text)
    except ValueError:
        text = escape_message_parts(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ.\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ —á–∏—Å–ª–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è, –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ –¥–ª—è –≤—ã—á–∏—Ç–∞–Ω–∏—è.",
            version=2
        )
        await send_message_with_fallback(
            message.bot, user_id, text,
            parse_mode=ParseMode.MARKDOWN_V2
        )
        return

    user_data = await state.get_data()
    target_user_id = user_data.get('target_user_id')
    balance_type = user_data.get('balance_type')

    if not target_user_id or not balance_type:
        await state.clear()
        text = escape_message_parts("‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏ —É—Ç–µ—Ä—è–Ω—ã.", version=2)
        await send_message_with_fallback(
            message.bot, user_id, text,
            parse_mode=ParseMode.MARKDOWN_V2
        )
        return

    # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    success = await update_user_credits(target_user_id, change_amount, balance_type)
    
    if success:
        balance_name = "–ø–µ—á–µ–Ω–µ–∫" if balance_type == "g" else "–∞–≤–∞—Ç–∞—Ä–æ–≤"
        operation = "–¥–æ–±–∞–≤–ª–µ–Ω–æ" if change_amount > 0 else "–≤—ã—á—Ç–µ–Ω–æ"
        abs_amount = abs(change_amount)
        
        text = escape_message_parts(
            f"‚úÖ –ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID `{target_user_id}` –æ–±–Ω–æ–≤–ª–µ–Ω!\n\n"
            f"–û–ø–µ—Ä–∞—Ü–∏—è: {operation} `{abs_amount}` {balance_name}",
            version=2
        )
    else:
        text = escape_message_parts(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID `{target_user_id}`",
            version=2
        )

    await send_message_with_fallback(
        message.bot, user_id, text,
        reply_markup=await create_admin_user_actions_keyboard(target_user_id, True),
        parse_mode=ParseMode.MARKDOWN_V2
    )
    await state.clear()

async def delete_user_admin(query: CallbackQuery, state: FSMContext, target_user_id: int) -> None:
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    user_id = query.from_user.id
    if user_id not in ADMIN_IDS:
        await query.answer("‚õî –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤", show_alert=True)
        return

    target_user_info = await check_database_user(target_user_id)
    if not target_user_info:
        await query.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return

    g_left, a_left, _, u_name, _, f_purchase_val, email_val, act_avatar_id, f_name, _, _, _, _, _ = target_user_info
    display_name = f_name or u_name or f"ID {target_user_id}"

    text = escape_message_parts(
        f"‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è?\n\n"
        f"–ò–º—è: {display_name}\n"
        f"ID: `{target_user_id}`\n"
        f"–ë–∞–ª–∞–Ω—Å: {g_left} –ø–µ—á–µ–Ω–µ–∫, {a_left} –∞–≤–∞—Ç–∞—Ä–æ–≤\n\n"
        f"‚ö†Ô∏è –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!",
        version=2
    )

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"confirm_delete_user_{target_user_id}")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"user_actions_{target_user_id}")]
    ])

    await send_message_with_fallback(
        query.bot, user_id, text,
        reply_markup=keyboard,
        parse_mode=ParseMode.MARKDOWN_V2
    )

async def confirm_delete_user(query: CallbackQuery, state: FSMContext, target_user_id: int) -> None:
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç —É–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    user_id = query.from_user.id
    if user_id not in ADMIN_IDS:
        await query.answer("‚õî –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤", show_alert=True)
        return

    # –£–¥–∞–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    success = await delete_user_activity(target_user_id)
    
    if success:
        text = escape_message_parts(
            f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID `{target_user_id}` —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!",
            version=2
        )
    else:
        text = escape_message_parts(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID `{target_user_id}`",
            version=2
        )

    await send_message_with_fallback(
        query.bot, user_id, text,
        reply_markup=await create_admin_keyboard(),
        parse_mode=ParseMode.MARKDOWN_V2
    )

async def block_user_admin(query: CallbackQuery, state: FSMContext) -> None:
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    user_id = query.from_user.id
    if user_id not in ADMIN_IDS:
        await query.answer("‚õî –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤", show_alert=True)
        return

    callback_data = query.data
    try:
        parts = callback_data.split("_")
        if len(parts) < 3 or parts[0] != "block" or parts[1] != "user":
            raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç callback_data")
        target_user_id = int(parts[2])
    except (ValueError, IndexError) as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback_data: {callback_data}, error: {e}")
        await query.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã", show_alert=True)
        return

    target_user_info = await check_database_user(target_user_id)
    if not target_user_info:
        await query.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return

    g_left, a_left, _, u_name, _, f_purchase_val, email_val, act_avatar_id, f_name, _, _, _, _, _ = target_user_info
    display_name = f_name or u_name or f"ID {target_user_id}"

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    is_blocked = await is_user_blocked(target_user_id)
    if is_blocked:
        text = escape_message_parts(
            f"‚ÑπÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω\n\n"
            f"–ò–º—è: {display_name}\n"
            f"ID: `{target_user_id}`",
            version=2
        )
        await send_message_with_fallback(
            query.bot, user_id, text,
            reply_markup=await create_admin_user_actions_keyboard(target_user_id, True),
            parse_mode=ParseMode.MARKDOWN_V2
        )
        return

    text = escape_message_parts(
        f"üö´ –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è?\n\n"
        f"–ò–º—è: {display_name}\n"
        f"ID: `{target_user_id}`\n"
        f"–ë–∞–ª–∞–Ω—Å: {g_left} –ø–µ—á–µ–Ω–µ–∫, {a_left} –∞–≤–∞—Ç–∞—Ä–æ–≤\n\n"
        f"‚ö†Ô∏è –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Å–º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞!",
        version=2
    )

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üö´ –î–∞, –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"confirm_block_user_{target_user_id}")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"user_actions_{target_user_id}")]
    ])

    await send_message_with_fallback(
        query.bot, user_id, text,
        reply_markup=keyboard,
        parse_mode=ParseMode.MARKDOWN_V2
    )

async def confirm_block_user(query: CallbackQuery, state: FSMContext, bot: Bot, is_fake_query: bool = False) -> None:
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    user_id = query.from_user.id if not is_fake_query else query.from_user.id
    if user_id not in ADMIN_IDS:
        if not is_fake_query:
            await query.answer("‚õî –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤", show_alert=True)
        return

    callback_data = query.data
    try:
        parts = callback_data.split("_")
        if len(parts) < 4 or parts[0] != "confirm" or parts[1] != "block" or parts[2] != "user":
            raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç callback_data")
        target_user_id = int(parts[3])
    except (ValueError, IndexError) as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback_data: {callback_data}, error: {e}")
        if not is_fake_query:
            await query.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã", show_alert=True)
        return

    target_user_info = await check_database_user(target_user_id)
    if not target_user_info:
        if not is_fake_query:
            await query.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return

    g_left, a_left, _, u_name, _, f_purchase_val, email_val, act_avatar_id, f_name, _, _, _, _, _ = target_user_info
    display_name = f_name or u_name or f"ID {target_user_id}"

    # –ë–ª–æ–∫–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    success = await block_user_access(target_user_id)
    
    if success:
        text = escape_message_parts(
            f"üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω!\n\n"
            f"–ò–º—è: {display_name}\n"
            f"ID: `{target_user_id}`",
            version=2
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        try:
            block_notification = escape_message_parts(
                "üö´ –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.\n\n"
                "–ï—Å–ª–∏ –≤—ã —Å—á–∏—Ç–∞–µ—Ç–µ, —á—Ç–æ —ç—Ç–æ –ø—Ä–æ–∏–∑–æ—à–ª–æ –ø–æ –æ—à–∏–±–∫–µ, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
                version=2
            )
            await send_message_with_fallback(
                bot, target_user_id, block_notification,
                parse_mode=ParseMode.MARKDOWN_V2
            )
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_user_id}: {e}")
    else:
        text = escape_message_parts(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID `{target_user_id}`",
            version=2
        )

    if not is_fake_query:
        await send_message_with_fallback(
            query.bot, user_id, text,
            reply_markup=await create_admin_keyboard(),
            parse_mode=ParseMode.MARKDOWN_V2
        )

async def search_users_admin(query: CallbackQuery, state: FSMContext) -> None:
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."""
    user_id = query.from_user.id
    if user_id not in ADMIN_IDS:
        await query.answer("‚õî –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤", show_alert=True)
        return

    text = escape_message_parts(
        "üîç –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å:\n"
        "‚Ä¢ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: 123456789)\n"
        "‚Ä¢ –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: @username)\n"
        "‚Ä¢ Email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
        "‚Ä¢ –ß–∞—Å—Ç—å –∏–º–µ–Ω–∏ –∏–ª–∏ —Ñ–∞–º–∏–ª–∏–∏",
        version=2
    )

    await send_message_with_fallback(
        query.bot, user_id, text,
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –û—Ç–º–µ–Ω–∞", callback_data="admin_panel")]
        ]),
        parse_mode=ParseMode.MARKDOWN_V2
    )
    await state.set_state(BotStates.AWAITING_USER_SEARCH)

async def handle_user_search_input(message: Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞."""
    user_id = message.from_user.id
    if user_id not in ADMIN_IDS:
        return

    search_query = message.text.strip()
    if not search_query:
        text = escape_message_parts(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å.",
            version=2
        )
        await send_message_with_fallback(
            message.bot, user_id, text,
            parse_mode=ParseMode.MARKDOWN_V2
        )
        return

    # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    users = await search_users_by_query(search_query, limit=10)
    
    if not users:
        text = escape_message_parts(
            f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ø–æ –∑–∞–ø—Ä–æ—Å—É \"{search_query}\" –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.",
            version=2
        )
        await send_message_with_fallback(
            message.bot, user_id, text,
            reply_markup=await create_admin_keyboard(),
            parse_mode=ParseMode.MARKDOWN_V2
        )
        await state.clear()
        return

    text_parts = [
        f"üîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É \"{search_query}\"\n\n"
    ]

    for i, user in enumerate(users, 1):
        user_id_result, g_left, a_left, u_name, _, f_purchase_val, email_val, act_avatar_id, f_name, _, _, _, _, _ = user
        display_name = f_name or u_name or f"ID {user_id_result}"
        username_display = f"(@{u_name})" if u_name and u_name != "–ë–µ–∑ –∏–º–µ–Ω–∏" else ""
        
        text_parts.extend([
            f"{i}\\. **{display_name}** {username_display}\n",
            f"   ID: `{user_id_result}`\n",
            f"   üí∞ –ë–∞–ª–∞–Ω—Å: {g_left} –ø–µ—á–µ–Ω–µ–∫, {a_left} –∞–≤–∞—Ç–∞—Ä–æ–≤\n"
        ])
        
        if email_val:
            text_parts.append(f"   üìß Email: {email_val}\n")
        
        text_parts.append("\n")

    text = "".join(text_parts)
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    keyboard_buttons = []
    for user in users[:5]:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º 5 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ –¥–ª—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        user_id_result = user[0]
        display_name = user[8] or user[3] or f"ID {user_id_result}"
        button_text = f"üë§ {display_name[:20]}"  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É —Ç–µ–∫—Å—Ç–∞ –∫–Ω–æ–ø–∫–∏
        keyboard_buttons.append([InlineKeyboardButton(
            text=button_text,
            callback_data=f"user_actions_{user_id_result}"
        )])

    keyboard_buttons.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_panel")])
    keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)

    await send_message_with_fallback(
        message.bot, user_id, text,
        reply_markup=keyboard,
        parse_mode=ParseMode.MARKDOWN_V2
    )
    await state.clear()

async def confirm_reset_avatar(query: CallbackQuery, state: FSMContext, target_user_id: int) -> None:
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç —Å–±—Ä–æ—Å –∞–≤–∞—Ç–∞—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    user_id = query.from_user.id
    if user_id not in ADMIN_IDS:
        await query.answer("‚õî –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤", show_alert=True)
        return

    target_user_info = await check_database_user(target_user_id)
    if not target_user_info:
        await query.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return

    g_left, a_left, _, u_name, _, f_purchase_val, email_val, act_avatar_id, f_name, _, _, _, _, _ = target_user_info
    display_name = f_name or u_name or f"ID {target_user_id}"

    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∞–≤–∞—Ç–∞—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    async with aiosqlite.connect(DATABASE_PATH) as conn:
        await conn.execute(
            "UPDATE users SET active_avatar_id = NULL WHERE user_id = ?",
            (target_user_id,)
        )
        await conn.commit()

    text = escape_message_parts(
        f"üîÑ –ê–≤–∞—Ç–∞—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–±—Ä–æ—à–µ–Ω!\n\n"
        f"–ò–º—è: {display_name}\n"
        f"ID: `{target_user_id}`\n\n"
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–º–æ–∂–µ—Ç –≤—ã–±—Ä–∞—Ç—å –Ω–æ–≤—ã–π –∞–≤–∞—Ç–∞—Ä –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –±–æ—Ç–∞.",
        version=2
    )

    await send_message_with_fallback(
        query.bot, user_id, text,
        reply_markup=await create_admin_user_actions_keyboard(target_user_id, True),
        parse_mode=ParseMode.MARKDOWN_V2
    )

async def cancel(message: Message, state: FSMContext) -> None:
    """–û—Ç–º–µ–Ω—è–µ—Ç —Ç–µ–∫—É—â—É—é –æ–ø–µ—Ä–∞—Ü–∏—é."""
    user_id = message.from_user.id
    if user_id not in ADMIN_IDS:
        return

    await state.clear()
    text = escape_message_parts("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.", version=2)
    await send_message_with_fallback(
        message.bot, user_id, text,
        reply_markup=await create_admin_keyboard(),
        parse_mode=ParseMode.MARKDOWN_V2
    )

async def handle_block_reason_input(message: Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –ø—Ä–∏—á–∏–Ω—ã –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏."""
    user_id = message.from_user.id
    if user_id not in ADMIN_IDS:
        return

    reason = message.text.strip()
    if not reason:
        text = escape_message_parts(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏.",
            version=2
        )
        await send_message_with_fallback(
            message.bot, user_id, text,
            parse_mode=ParseMode.MARKDOWN_V2
        )
        return

    user_data = await state.get_data()
    target_user_id = user_data.get('target_user_id')

    if not target_user_id:
        await state.clear()
        text = escape_message_parts("‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏ —É—Ç–µ—Ä—è–Ω—ã.", version=2)
        await send_message_with_fallback(
            message.bot, user_id, text,
            parse_mode=ParseMode.MARKDOWN_V2
        )
        return

    # –ë–ª–æ–∫–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —É–∫–∞–∑–∞–Ω–Ω–æ–π –ø—Ä–∏—á–∏–Ω–æ–π
    success = await block_user_access(target_user_id, reason=reason)
    
    if success:
        text = escape_message_parts(
            f"üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID `{target_user_id}` –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω!\n\n"
            f"–ü—Ä–∏—á–∏–Ω–∞: {reason}",
            version=2
        )
    else:
        text = escape_message_parts(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID `{target_user_id}`",
            version=2
        )

    await send_message_with_fallback(
        message.bot, user_id, text,
        reply_markup=await create_admin_keyboard(),
        parse_mode=ParseMode.MARKDOWN_V2
    )
    await state.clear()

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
@user_management_router.callback_query(
    lambda c: c.data and c.data.startswith((
        'user_actions_', 'view_user_profile_', 'user_avatars_', 'user_logs_', 'change_balance_',
        'delete_user_', 'confirm_delete_user_', 'block_user_', 'confirm_block_user_', 'payments_',
        'visualize_', 'reset_avatar_', 'add_photos_to_user_', 'add_avatar_to_user_', 'chat_with_user_',
        'give_subscription_', 'activity_'
    ))
)
async def user_management_callback_handler(query: CallbackQuery, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏."""
    user_id = query.from_user.id
    if user_id not in ADMIN_IDS:
        await query.answer("‚õî –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤", show_alert=True)
        return

    callback_data = query.data
    logger.debug(f"user_management_callback_handler: user_id={user_id}, callback_data={callback_data}")

    try:
        if callback_data.startswith("user_actions_"):
            await show_user_actions(query, state)
        elif callback_data.startswith("view_user_profile_"):
            target_user_id = int(callback_data.split("_")[3])
            await show_user_profile_admin(query, state, target_user_id)
        elif callback_data.startswith("user_avatars_"):
            target_user_id = int(callback_data.split("_")[2])
            await show_user_avatars_admin(query, state, target_user_id)
        elif callback_data.startswith("user_logs_"):
            target_user_id = int(callback_data.split("_")[2])
            await show_user_logs(query, state, target_user_id)
        elif callback_data.startswith("change_balance_"):
            await change_balance_admin(query, state)
        elif callback_data.startswith("delete_user_"):
            target_user_id = int(callback_data.split("_")[2])
            await delete_user_admin(query, state, target_user_id)
        elif callback_data.startswith("confirm_delete_user_"):
            target_user_id = int(callback_data.split("_")[3])
            await confirm_delete_user(query, state, target_user_id)
        elif callback_data.startswith("block_user_"):
            await block_user_admin(query, state)
        elif callback_data.startswith("confirm_block_user_"):
            target_user_id = int(callback_data.split("_")[3])
            await confirm_block_user(query, state, query.bot)
        elif callback_data.startswith("reset_avatar_"):
            target_user_id = int(callback_data.split("_")[2])
            await confirm_reset_avatar(query, state, target_user_id)
        else:
            logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π callback_data: {callback_data}")
            await query.answer("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞", show_alert=True)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ user_management_callback_handler: {e}")
        await query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π
@user_management_router.message(BotStates.AWAITING_BALANCE_CHANGE)
async def handle_balance_change_input_wrapper(message: Message, state: FSMContext) -> None:
    """–û–±–µ—Ä—Ç–∫–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–≤–æ–¥–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞."""
    await handle_balance_change_input(message, state)

@user_management_router.message(BotStates.AWAITING_USER_SEARCH)
async def handle_user_search_input_wrapper(message: Message, state: FSMContext) -> None:
    """–û–±–µ—Ä—Ç–∫–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–≤–æ–¥–∞ –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."""
    await handle_user_search_input(message, state)

@user_management_router.message(BotStates.AWAITING_BLOCK_REASON)
async def handle_block_reason_input_wrapper(message: Message, state: FSMContext) -> None:
    """–û–±–µ—Ä—Ç–∫–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–≤–æ–¥–∞ –ø—Ä–∏—á–∏–Ω—ã –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏."""
    await handle_block_reason_input(message, state)

@user_management_router.message(Command("cancel"))
async def cancel_wrapper(message: Message, state: FSMContext) -> None:
    """–û–±–µ—Ä—Ç–∫–∞ –¥–ª—è –æ—Ç–º–µ–Ω—ã –æ–ø–µ—Ä–∞—Ü–∏–∏."""
    await cancel(message, state)