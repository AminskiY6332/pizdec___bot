# handlers/admin/callbacks.py

import asyncio
import logging
import os
import time
from typing import Optional, Dict, Any, List
from datetime import datetime, timedelta
from aiogram import Router, Bot, F
from aiogram.types import CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup, Message
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.exceptions import TelegramBadRequest
from aiogram.enums import ParseMode
from config import ADMIN_IDS, TARIFFS
from generation.images import generate_image

from database import (
    check_database_user, update_user_balance, add_rating, get_user_trainedmodels,
    get_active_trainedmodel, delete_trained_model, get_user_video_tasks,
    get_user_rating_and_registration, get_user_generation_stats, get_user_payments,
    is_user_blocked, user_cache, update_user_credits, check_user_resources, is_old_user,
    get_user_info
)
from handlers.admin.panels import (
    admin_panel, show_admin_stats, admin_show_failed_avatars,
    admin_confirm_delete_all_failed, admin_execute_delete_all_failed
)
from handlers.admin.user_management import (
    show_user_actions, show_user_profile_admin, show_user_avatars_admin,
    change_balance_admin, show_user_logs, delete_user_admin,
    block_user_admin, confirm_block_user, search_users_admin, confirm_reset_avatar, confirm_delete_user
)
from handlers.admin.broadcast import (
    initiate_broadcast, broadcast_message_admin, broadcast_to_paid_users, broadcast_to_non_paid_users
)
from handlers.admin.payments import show_payments_menu, handle_payments_date, handle_manual_date_input, show_replicate_costs
from handlers.admin.visualization import (
    show_visualization, visualize_payments, visualize_registrations, visualize_generations, show_activity_stats
)
# –ò–º–ø–æ—Ä—Ç generate_photo_for_user –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω –≤ handlers/admin/generation.py
from handlers.utils import (
    escape_message_parts, anti_spam
)
from keyboards import create_admin_keyboard
from report import report_generator, send_report_to_admin, delete_report_file

from logger import get_logger
logger = get_logger('main')

# –ò–º–ø–æ—Ä—Ç –Ω–æ–≤—ã—Ö callback'–æ–≤ –¥–ª—è –∞–¥–º–∏–Ω—Å–∫–∏—Ö –∫–æ–º–∞–Ω–¥
from handlers.admin.commands import (
    confirm_addcook_callback, confirm_delcook_callback,
    confirm_addnew_callback, confirm_delnew_callback,
    cancel_admin_operation_callback
)

async def show_dev_test_payment(query: CallbackQuery, state: FSMContext) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–π —Ç–∞—Ä–∏—Ñ –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞."""
    user_id = query.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –≥–ª–∞–≤–Ω—ã–π —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫
    if user_id != 5667999089:
        await query.answer("‚ùå –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –≥–ª–∞–≤–Ω–æ–º—É —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É", show_alert=True)
        return

    from config import TARIFFS
    from handlers.utils import safe_escape_markdown as escape_md

    test_tariff = TARIFFS.get("—Ç–µ—Å—Ç")

    if not test_tariff:
        await query.message.answer("‚ùå –¢–µ—Å—Ç–æ–≤—ã–π —Ç–∞—Ä–∏—Ñ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.")
        return

    text = escape_md(f"""üß™ –¢–ï–°–¢–û–í–´–ô –¢–ê–†–ò–§ –î–õ–Ø –ü–†–û–í–ï–†–ö–ò –ü–õ–ê–¢–ï–ñ–ï–ô

üíé {test_tariff['display']}
üìù –û–ø–∏—Å–∞–Ω–∏–µ: {test_tariff['description']}
üí∞ –°—É–º–º–∞: {test_tariff['amount']:.2f}‚ÇΩ
üç™ –ü–µ—á–µ–Ω—å–∫–∏: {test_tariff['photos']}

üîó –≠—Ç–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Ç–∞—Ä–∏—Ñ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã.
–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –µ–≥–æ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è webhook –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π.""", version=2)

    from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=test_tariff["display"], callback_data=test_tariff["callback"])],
        [InlineKeyboardButton(text="üîô –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel")]
    ])

    await query.message.edit_text(
        text,
        reply_markup=keyboard,
        parse_mode=ParseMode.MARKDOWN_V2
    )

    logger.info(f"–¢–µ—Å—Ç–æ–≤—ã–π —Ç–∞—Ä–∏—Ñ –ø–æ–∫–∞–∑–∞–Ω –≥–ª–∞–≤–Ω–æ–º—É —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É user_id={user_id} —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")
    await query.answer()

# –°–æ–∑–¥–∞–Ω–∏–µ —Ä–æ—É—Ç–µ—Ä–∞ –¥–ª—è callback'–æ–≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
admin_callbacks_router = Router()

# –§—É–Ω–∫—Ü–∏–∏ handle_admin_style_selection –∏ handle_admin_custom_prompt –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω—ã –≤ handlers/admin/generation.py

async def handle_admin_send_generation(query: CallbackQuery, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."""
    from handlers.admin.generation import process_image_generation
    from generation.utils import download_images_parallel

    admin_user_id = query.from_user.id
    await query.answer()

    if admin_user_id not in ADMIN_IDS:
        logger.error(f"–ü–æ–ø—ã—Ç–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –±–µ–∑ –ø—Ä–∞–≤: user_id={admin_user_id}")
        await query.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.", show_alert=True)
        return

    parts = query.data.split(':')
    target_user_id = int(parts[1])
    user_data = await state.get_data()
    generation_data = user_data.get(f'last_admin_generation_{target_user_id}')

    logger.info(f"handle_admin_send_generation: admin_user_id={admin_user_id}, target_user_id={target_user_id}")
    logger.debug(f"–î–∞–Ω–Ω—ã–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {generation_data}")

    if not generation_data or not generation_data.get('image_urls'):
        logger.error(f"–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–ª—è target_user_id={target_user_id}")
        text = escape_message_parts(
            f"‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID `{target_user_id}`.",
            version=2
        )
        await query.message.edit_text(
            text,
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ö –¥–µ–π—Å—Ç–≤–∏—è–º", callback_data=f"user_actions_{target_user_id}")]
            ]),
            parse_mode=ParseMode.MARKDOWN_V2
        )
        await query.answer("‚ùå –î–∞–Ω–Ω—ã–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.", show_alert=True)
        return

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –µ—Å–ª–∏ –ø—É—Ç–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç
    image_paths = user_data.get('last_admin_image_paths', [])
    if not image_paths:
        logger.info(f"–ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è target_user_id={target_user_id}")
        image_paths = await download_images_parallel(generation_data['image_urls'], target_user_id)
        if not image_paths:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è target_user_id={target_user_id}")
            text = escape_message_parts(
                f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID `{target_user_id}`.",
                version=2
            )
            await query.message.edit_text(
                text,
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üîô –ö –¥–µ–π—Å—Ç–≤–∏—è–º", callback_data=f"user_actions_{target_user_id}")]
                ]),
                parse_mode=ParseMode.MARKDOWN_V2
            )
            await query.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.", show_alert=True)
            return
        await state.update_data(last_admin_image_paths=image_paths)

    # –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∞–¥–º–∏–Ω—Å–∫–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    await state.update_data(
        is_admin_generation=True,
        admin_generation_for_user=target_user_id,
        message_recipient=admin_user_id,
        generation_target_user=target_user_id,
        original_admin_user=admin_user_id,
        user_id=admin_user_id
    )

    try:
        logger.info(f"–í—ã–∑–æ–≤ process_image_generation –¥–ª—è target_user_id={target_user_id}")
        # –í—ã–∑—ã–≤–∞–µ–º process_image_generation –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
        await process_image_generation(
            bot=query.bot,
            state=state,
            user_id=target_user_id,
            image_paths=image_paths,
            duration=generation_data.get('duration', 0.0),
            aspect_ratio=generation_data.get('aspect_ratio', '1:1'),
            generation_type=generation_data.get('generation_type', 'with_avatar'),
            model_key=generation_data.get('model_key', 'flux-trained'),
            admin_user_id=admin_user_id
        )
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        text = escape_message_parts(
            f"‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ID `{target_user_id}`.\n",
            f"üé® –°—Ç–∏–ª—å: {generation_data.get('style', '–ö–∞—Å—Ç–æ–º–Ω—ã–π —Å—Ç–∏–ª—å')}",
            version=2
        )
        await query.message.edit_text(
            text,
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ö –¥–µ–π—Å—Ç–≤–∏—è–º", callback_data=f"user_actions_{target_user_id}")]
            ]),
            parse_mode=ParseMode.MARKDOWN_V2
        )
        await query.answer("‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é!", show_alert=True)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ID {target_user_id}: {e}", exc_info=True)
        text = escape_message_parts(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ID `{target_user_id}`: {str(e)}.",
            version=2
        )
        await query.message.edit_text(
            text,
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ö –¥–µ–π—Å—Ç–≤–∏—è–º", callback_data=f"user_actions_{target_user_id}")]
            ]),
            parse_mode=ParseMode.MARKDOWN_V2
        )
        await query.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}.", show_alert=True)

async def handle_admin_regenerate(query: CallbackQuery, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞–¥–º–∏–Ω–æ–º."""
    from handlers.admin.generation import generate_photo_for_user
    
    await query.answer()

    if query.from_user.id not in ADMIN_IDS:
        return

    target_user_id = int(query.data.split(':')[1])
    await state.update_data(user_id=query.from_user.id)
    await generate_photo_for_user(query, state, target_user_id)

# TODO: –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –µ—Å—Ç—å –ª–∏ –µ—â—ë —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ handlers/callbacks_admin.py, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è callback'–æ–≤
from aiogram import F

# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º callback'—ã –≤ —Ä–æ—É—Ç–µ—Ä–µ
admin_callbacks_router.callback_query.register(show_dev_test_payment, F.data == "dev_test_payment")
admin_callbacks_router.callback_query.register(handle_admin_send_generation, F.data.startswith("admin_send_generation:"))
admin_callbacks_router.callback_query.register(handle_admin_regenerate, F.data.startswith("admin_regenerate:"))

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è callback'–æ–≤ –¥–ª—è –∞–¥–º–∏–Ω—Å–∫–∏—Ö –∫–æ–º–∞–Ω–¥
admin_callbacks_router.callback_query.register(confirm_addcook_callback, F.data.startswith("confirm_addcook_"))
admin_callbacks_router.callback_query.register(confirm_delcook_callback, F.data.startswith("confirm_delcook_"))
admin_callbacks_router.callback_query.register(confirm_addnew_callback, F.data.startswith("confirm_addnew_"))
admin_callbacks_router.callback_query.register(confirm_delnew_callback, F.data.startswith("confirm_delnew_"))
admin_callbacks_router.callback_query.register(cancel_admin_operation_callback, F.data == "cancel_admin_operation")