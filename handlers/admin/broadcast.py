# handlers/admin/broadcast.py

import asyncio
import json
import logging
import pytz
import os
import time
from datetime import datetime, timedelta
from typing import Optional, Dict, Any, List
from aiogram import Router, Bot, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.fsm.context import FSMContext
from aiogram.enums import ParseMode
from aiogram.filters import Command, StateFilter
from aiogram.fsm.state import State, StatesGroup
from aiogram.exceptions import TelegramBadRequest
from database import (
    get_all_users_stats, get_broadcasts_with_buttons, get_broadcast_buttons, get_paid_users, get_non_paid_users, save_broadcast_button
)
from config import ADMIN_IDS, DATABASE_PATH, ALLOWED_BROADCAST_CALLBACKS, BROADCAST_CALLBACK_ALIASES
from keyboards import (
    create_admin_keyboard, create_dynamic_broadcast_keyboard, create_admin_user_actions_keyboard, create_broadcast_with_payment_audience_keyboard
)
from handlers.utils import (
    escape_message_parts, send_message_with_fallback, unescape_markdown, anti_spam
)
from states import BotStates

from logger import get_logger
logger = get_logger('main')

# –°–æ–∑–¥–∞–Ω–∏–µ —Ä–æ—É—Ç–µ—Ä–∞ –¥–ª—è —Ä–∞—Å—Å—ã–ª–æ–∫
broadcast_router = Router()

async def clear_user_data(state: FSMContext, user_id: int):
    """–û—á–∏—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –Ω–µ –∞–∫—Ç–∏–≤–Ω–æ –æ–∂–∏–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏."""
    current_state = await state.get_state()
    if current_state == BotStates.AWAITING_BROADCAST_MESSAGE:
        logger.debug(f"–ü—Ä–æ–ø—É—Å–∫ –æ—á–∏—Å—Ç–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è user_id={user_id}, —Ç–∞–∫ –∫–∞–∫ –∞–∫—Ç–∏–≤–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ {current_state}")
        return
    await state.clear()
    logger.info(f"–û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è user_id={user_id} –ø–æ —Ç–∞–π–º–µ—Ä—É")

async def initiate_broadcast(query: CallbackQuery, state: FSMContext) -> None:
    """–ò–Ω–∏—Ü–∏–∏—Ä—É–µ—Ç —Ä–∞—Å—Å—ã–ª–∫—É (–æ–±—â—É—é, –¥–ª—è –æ–ø–ª–∞—Ç–∏–≤—à–∏—Ö, –Ω–µ –æ–ø–ª–∞—Ç–∏–≤—à–∏—Ö –∏–ª–∏ —Å –∫–Ω–æ–ø–∫–æ–π –æ–ø–ª–∞—Ç—ã)."""
    user_id = query.from_user.id
    callback_data = query.data

    if user_id not in ADMIN_IDS:
        await query.message.answer(
            escape_message_parts("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤.", version=2),
            parse_mode=ParseMode.MARKDOWN_V2
        )
        return

    current_state = await state.get_state()
    if current_state in [
        BotStates.AWAITING_BROADCAST_MESSAGE,
        BotStates.AWAITING_BROADCAST_MEDIA_CONFIRM,
        BotStates.AWAITING_BROADCAST_SCHEDULE,
        BotStates.AWAITING_BROADCAST_AUDIENCE,
        BotStates.AWAITING_BROADCAST_BUTTONS,
        BotStates.AWAITING_BROADCAST_BUTTON_INPUT
    ]:
        logger.debug(f"initiate_broadcast: —Å–æ—Å—Ç–æ—è–Ω–∏–µ {current_state} —É–∂–µ –∞–∫—Ç–∏–≤–Ω–æ, –ø—Ä–æ–ø—É—Å–∫ –æ—á–∏—Å—Ç–∫–∏ –¥–ª—è user_id={user_id}")
    else:
        await state.clear()

    if callback_data == "broadcast_with_payment":
        text = escape_message_parts(
            "üì¢ –í—ã–±–µ—Ä–∏—Ç–µ –∞—É–¥–∏—Ç–æ—Ä–∏—é –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ —Å –∫–Ω–æ–ø–∫–æ–π –æ–ø–ª–∞—Ç—ã:",
            version=2
        )
        reply_markup = await create_broadcast_with_payment_audience_keyboard()
        await send_message_with_fallback(
            query.bot, user_id, text,
            reply_markup=reply_markup, parse_mode=ParseMode.MARKDOWN_V2
        )
        await state.update_data(awaiting_broadcast_audience=True, user_id=user_id)
        await state.set_state(BotStates.AWAITING_BROADCAST_AUDIENCE)
    else:
        broadcast_type = callback_data.replace("broadcast_", "") if callback_data.startswith("broadcast_") else callback_data
        await state.update_data(
            awaiting_broadcast_message=True,
            broadcast_type=broadcast_type,
            user_id=user_id,
            buttons=[]  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –∫–Ω–æ–ø–æ–∫
        )

        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –æ—á–∏—Å—Ç–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è —á–µ—Ä–µ–∑ 20 –º–∏–Ω—É—Ç
        async def delayed_clear_user_data():
            await asyncio.sleep(1200)  # 20 –º–∏–Ω—É—Ç
            current_state_after_delay = await state.get_state()
            if current_state_after_delay in [
                BotStates.AWAITING_BROADCAST_MESSAGE,
                BotStates.AWAITING_BROADCAST_AUDIENCE,
                BotStates.AWAITING_BROADCAST_BUTTONS,
                BotStates.AWAITING_BROADCAST_BUTTON_INPUT
            ]:
                await clear_user_data(state, user_id)

        asyncio.create_task(delayed_clear_user_data())

        text = escape_message_parts(
            "üì¢ –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.\n",
            "‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç, –∑–∞—Ç–µ–º –º–µ–¥–∏–∞ (—Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ).\n",
            "–î–ª—è –æ—Ç–º–µ–Ω—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cancel.",
            version=2
        )
        reply_markup = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –û—Ç–º–µ–Ω–∞", callback_data="cancel_broadcast")]
        ])

        await send_message_with_fallback(
            query.bot, user_id, text,
            reply_markup=reply_markup, parse_mode=ParseMode.MARKDOWN_V2
        )
        await state.set_state(BotStates.AWAITING_BROADCAST_MESSAGE)

    await query.answer()
    logger.info(f"initiate_broadcast: user_id={user_id}, callback_data={callback_data}")

async def broadcast_message_admin(bot: Bot, message_text: str, admin_user_id: int, media_type: str = None, media_id: str = None, buttons: List[Dict[str, str]] = None) -> None:
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç —Ä–∞—Å—Å—ã–ª–∫—É –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º."""
    buttons = buttons or []
    all_users_data, _ = await get_all_users_stats(page=1, page_size=1000000)
    target_users = [user[0] for user in all_users_data]
    sent_count = 0
    failed_count = 0
    total_to_send = len(target_users)
    logger.info(f"–ù–∞—á–∞–ª–æ –æ–±—â–µ–π —Ä–∞—Å—Å—ã–ª–∫–∏ –æ—Ç –∞–¥–º–∏–Ω–∞ {admin_user_id} –¥–ª—è {total_to_send} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
    await send_message_with_fallback(
        bot, admin_user_id,
        escape_message_parts(
            f"üöÄ –ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É –¥–ª—è ~`{total_to_send}` –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...",
            version=2
        ),
        parse_mode=ParseMode.MARKDOWN_V2
    )
    for target_user_id in target_users:
        try:
            reply_markup = await create_dynamic_broadcast_keyboard(buttons, target_user_id) if buttons else None
            try:
                # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å MarkdownV2
                if media_type == 'photo' and media_id:
                    await bot.send_photo(
                        chat_id=target_user_id, photo=media_id,
                        caption=message_text, parse_mode=ParseMode.MARKDOWN_V2,
                        reply_markup=reply_markup
                    )
                elif media_type == 'video' and media_id:
                    await bot.send_video(
                        chat_id=target_user_id, video=media_id,
                        caption=message_text, parse_mode=ParseMode.MARKDOWN_V2,
                        reply_markup=reply_markup
                    )
                else:
                    await bot.send_message(
                        chat_id=target_user_id, text=message_text, parse_mode=ParseMode.MARKDOWN_V2,
                        reply_markup=reply_markup
                    )
            except TelegramBadRequest as e:
                # Fallback: –æ—Ç–ø—Ä–∞–≤–∫–∞ –±–µ–∑ Markdown
                logger.warning(f"–û—à–∏–±–∫–∞ Markdown –¥–ª—è user_id={target_user_id}: {e}. –ü—Ä–æ–±—É–µ–º –±–µ–∑ –ø–∞—Ä—Å–∏–Ω–≥–∞.")
                raw_text = unescape_markdown(message_text)
                if media_type == 'photo' and media_id:
                    await bot.send_photo(
                        chat_id=target_user_id, photo=media_id,
                        caption=raw_text, parse_mode=None,
                        reply_markup=reply_markup
                    )
                elif media_type == 'video' and media_id:
                    await bot.send_video(
                        chat_id=target_user_id, video=media_id,
                        caption=raw_text, parse_mode=None,
                        reply_markup=reply_markup
                    )
                else:
                    await bot.send_message(
                        chat_id=target_user_id, text=raw_text, parse_mode=None,
                        reply_markup=reply_markup
                    )
            sent_count += 1
            if sent_count % 20 == 0:
                await asyncio.sleep(1)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_user_id}: {e}", exc_info=True)
            failed_count += 1
    summary_text = escape_message_parts(
        f"üèÅ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n",
        f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: `{sent_count}`\n",
        f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å: `{failed_count}`",
        version=2
    )
    await send_message_with_fallback(
        bot, admin_user_id, summary_text, reply_markup=await create_admin_keyboard(),
        parse_mode=ParseMode.MARKDOWN_V2
    )
    logger.info(f"–û–±—â–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent_count}, –û—à–∏–±–æ–∫: {failed_count}")

async def broadcast_to_paid_users(bot: Bot, message_text: str, admin_user_id: int, media_type: str = None, media_id: str = None, buttons: List[Dict[str, str]] = None) -> None:
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç —Ä–∞—Å—Å—ã–ª–∫—É —Ç–æ–ª—å–∫–æ –æ–ø–ª–∞—Ç–∏–≤—à–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º."""
    buttons = buttons or []
    target_users = await get_paid_users()
    sent_count = 0
    failed_count = 0
    total_to_send = len(target_users)
    logger.info(f"–ù–∞—á–∞–ª–æ —Ä–∞—Å—Å—ã–ª–∫–∏ –¥–ª—è –æ–ø–ª–∞—Ç–∏–≤—à–∏—Ö –æ—Ç –∞–¥–º–∏–Ω–∞ {admin_user_id} –¥–ª—è {total_to_send} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
    await send_message_with_fallback(
        bot, admin_user_id,
        escape_message_parts(
            f"üöÄ –ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É –¥–ª—è ~`{total_to_send}` –æ–ø–ª–∞—Ç–∏–≤—à–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...",
            version=2
        ),
        parse_mode=ParseMode.MARKDOWN_V2
    )
    signature = "üç™ PixelPie"
    caption = message_text + ("\n\n" + signature if message_text.strip() else "\n" + signature)
    escaped_caption = escape_message_parts(caption, version=2)
    for target_user_id in target_users:
        try:
            reply_markup = await create_dynamic_broadcast_keyboard(buttons, target_user_id) if buttons else None
            if media_type == 'photo' and media_id:
                await bot.send_photo(
                    chat_id=target_user_id, photo=media_id,
                    caption=escaped_caption, parse_mode=ParseMode.MARKDOWN_V2,
                    reply_markup=reply_markup
                )
            elif media_type == 'video' and media_id:
                await bot.send_video(
                    chat_id=target_user_id, video=media_id,
                    caption=escaped_caption, parse_mode=ParseMode.MARKDOWN_V2,
                    reply_markup=reply_markup
                )
            else:
                await bot.send_message(
                    chat_id=target_user_id, text=escaped_caption, parse_mode=ParseMode.MARKDOWN_V2,
                    reply_markup=reply_markup
                )
            sent_count += 1
            if sent_count % 20 == 0:
                await asyncio.sleep(1)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_user_id}: {e}", exc_info=True)
            failed_count += 1
    summary_text = escape_message_parts(
        f"üèÅ –†–∞—Å—Å—ã–ª–∫–∞ –¥–ª—è –æ–ø–ª–∞—Ç–∏–≤—à–∏—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n",
        f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: `{sent_count}`\n",
        f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å: `{failed_count}`",
        version=2
    )
    await send_message_with_fallback(
        bot, admin_user_id, summary_text, reply_markup=await create_admin_keyboard(),
        parse_mode=ParseMode.MARKDOWN_V2
    )
    logger.info(f"–†–∞—Å—Å—ã–ª–∫–∞ –¥–ª—è –æ–ø–ª–∞—Ç–∏–≤—à–∏—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent_count}, –û—à–∏–±–æ–∫: {failed_count}")

async def broadcast_to_non_paid_users(bot: Bot, message_text: str, admin_user_id: int, media_type: str = None, media_id: str = None, buttons: List[Dict[str, str]] = None) -> None:
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç —Ä–∞—Å—Å—ã–ª–∫—É —Ç–æ–ª—å–∫–æ –Ω–µ –æ–ø–ª–∞—Ç–∏–≤—à–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º."""
    buttons = buttons or []
    target_users = await get_non_paid_users()
    sent_count = 0
    failed_count = 0
    total_to_send = len(target_users)
    logger.info(f"–ù–∞—á–∞–ª–æ —Ä–∞—Å—Å—ã–ª–∫–∏ –¥–ª—è –Ω–µ –æ–ø–ª–∞—Ç–∏–≤—à–∏—Ö –æ—Ç –∞–¥–º–∏–Ω–∞ {admin_user_id} –¥–ª—è {total_to_send} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
    await send_message_with_fallback(
        bot, admin_user_id,
        escape_message_parts(
            f"üöÄ –ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É –¥–ª—è ~`{total_to_send}` –Ω–µ –æ–ø–ª–∞—Ç–∏–≤—à–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...",
            version=2
        ),
        parse_mode=ParseMode.MARKDOWN_V2
    )
    signature = "üç™ PixelPie"
    caption = message_text + ("\n\n" + signature if message_text.strip() else "\n" + signature)
    escaped_caption = escape_message_parts(caption, version=2)
    for target_user_id in target_users:
        try:
            reply_markup = await create_dynamic_broadcast_keyboard(buttons, target_user_id) if buttons else None
            if media_type == 'photo' and media_id:
                await bot.send_photo(
                    chat_id=target_user_id, photo=media_id,
                    caption=escaped_caption, parse_mode=ParseMode.MARKDOWN_V2,
                    reply_markup=reply_markup
                )
            elif media_type == 'video' and media_id:
                await bot.send_video(
                    chat_id=target_user_id, video=media_id,
                    caption=escaped_caption, parse_mode=ParseMode.MARKDOWN_V2,
                    reply_markup=reply_markup
                )
            else:
                await bot.send_message(
                    chat_id=target_user_id, text=escaped_caption, parse_mode=ParseMode.MARKDOWN_V2,
                    reply_markup=reply_markup
                )
            sent_count += 1
            if sent_count % 20 == 0:
                await asyncio.sleep(1)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_user_id}: {e}", exc_info=True)
            failed_count += 1
    summary_text = escape_message_parts(
        f"üèÅ –†–∞—Å—Å—ã–ª–∫–∞ –¥–ª—è –Ω–µ –æ–ø–ª–∞—Ç–∏–≤—à–∏—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n",
        f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: `{sent_count}`\n",
        f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å: `{failed_count}`",
        version=2
    )
    await send_message_with_fallback(
        bot, admin_user_id, summary_text, reply_markup=await create_admin_keyboard(),
        parse_mode=ParseMode.MARKDOWN_V2
    )
    logger.info(f"–†–∞—Å—Å—ã–ª–∫–∞ –¥–ª—è –Ω–µ –æ–ø–ª–∞—Ç–∏–≤—à–∏—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent_count}, –û—à–∏–±–æ–∫: {failed_count}")

async def broadcast_with_payment(
    bot: Bot,
    message_text: str,
    admin_user_id: int,
    media_type: Optional[str] = None,
    media_id: Optional[str] = None,
    buttons: List[Dict[str, str]] = None
) -> None:
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç —Ä–∞—Å—Å—ã–ª–∫—É –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —Å –∫–Ω–æ–ø–∫–æ–π –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ —Ç–∞—Ä–∏—Ñ–∞–º."""
    buttons = buttons or []
    all_users_data, _ = await get_all_users_stats(page=1, page_size=1000000)
    target_users = [user[0] for user in all_users_data]
    sent_count = 0
    failed_count = 0
    total_to_send = len(target_users)
    logger.info(f"–ù–∞—á–∞–ª–æ —Ä–∞—Å—Å—ã–ª–∫–∏ —Å –æ–ø–ª–∞—Ç–æ–π –æ—Ç –∞–¥–º–∏–Ω–∞ {admin_user_id} –¥–ª—è {total_to_send} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
    await send_message_with_fallback(
        bot, admin_user_id,
        escape_message_parts(
            f"üöÄ –ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É —Å –æ–ø–ª–∞—Ç–æ–π –¥–ª—è ~`{total_to_send}` –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...",
            version=2
        ),
        parse_mode=ParseMode.MARKDOWN_V2
    )
    signature = "üç™ PixelPie"
    caption = message_text + ("\n\n" + signature if message_text.strip() else "\n" + signature)
    escaped_caption = escape_message_parts(caption, version=2)
    for target_user_id in target_users:
        try:
            reply_markup = await create_dynamic_broadcast_keyboard(buttons, target_user_id) if buttons else None
            if media_type == 'photo' and media_id:
                await bot.send_photo(
                    chat_id=target_user_id, photo=media_id,
                    caption=escaped_caption, parse_mode=ParseMode.MARKDOWN_V2,
                    reply_markup=reply_markup
                )
            elif media_type == 'video' and media_id:
                await bot.send_video(
                    chat_id=target_user_id, video=media_id,
                    caption=escaped_caption, parse_mode=ParseMode.MARKDOWN_V2,
                    reply_markup=reply_markup
                )
            else:
                await bot.send_message(
                    chat_id=target_user_id, text=escaped_caption,
                    parse_mode=ParseMode.MARKDOWN_V2, reply_markup=reply_markup
                )
            sent_count += 1
            if sent_count % 20 == 0:
                await asyncio.sleep(1)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_user_id}: {e}", exc_info=True)
            failed_count += 1
    summary_text = escape_message_parts(
        f"üèÅ –†–∞—Å—Å—ã–ª–∫–∞ —Å –æ–ø–ª–∞—Ç–æ–π –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n",
        f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: `{sent_count}`\n",
        f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å: `{failed_count}`",
        version=2
    )
    await send_message_with_fallback(
        bot, admin_user_id, summary_text,
        reply_markup=await create_admin_keyboard(), parse_mode=ParseMode.MARKDOWN_V2
    )
    logger.info(f"–†–∞—Å—Å—ã–ª–∫–∞ —Å –æ–ø–ª–∞—Ç–æ–π –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent_count}, –û—à–∏–±–æ–∫: {failed_count}")

# TODO: –î–æ–±–∞–≤–∏—Ç—å –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ handlers/broadcast.py