#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π —Å —Ç–∞—Ä–∏—Ñ–∞–º–∏
"""

import asyncio
import sys
import os
from datetime import datetime, timedelta
import json

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

import database
from config import TARIFFS
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

async def test_datetime_fix():
    """–¢–µ—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã —Å datetime"""
    logger.info("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è datetime...")

    try:
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_id = 9999
        await database.add_user_without_subscription(
            user_id=user_id,
            username='test_datetime_user',
            first_name='Test DateTime User'
        )

        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é is_old_user —Å —Ä–∞–∑–Ω—ã–º–∏ —Ñ–æ—Ä–º–∞—Ç–∞–º–∏ –¥–∞—Ç—ã
        test_cases = [
            {
                'cutoff_date': '2025-08-01',
                'expected': False,  # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–æ–≤–µ–µ cutoff
                'description': '–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'
            }
        ]

        for test_case in test_cases:
            result = await database.is_old_user(user_id, test_case['cutoff_date'])

            if result == test_case['expected']:
                logger.info(f"‚úÖ Datetime: {test_case['description']} - –ü–†–û–ô–î–ï–ù")
                return True
            else:
                logger.error(f"‚ùå Datetime: {test_case['description']} - –ü–†–û–í–ê–õ–ï–ù")
                return False

    except Exception as e:
        logger.error(f"üí• Datetime comparison - –û–®–ò–ë–ö–ê: {e}")
        return False

async def test_tariff_config():
    """–¢–µ—Å—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Ç–∞—Ä–∏—Ñ–æ–≤"""
    logger.info("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Ç–∞—Ä–∏—Ñ–æ–≤...")

    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ —Ç–∞—Ä–∏—Ñ—ã –¥–æ—Å—Ç—É–ø–Ω—ã
        required_tariffs = ['pay_399', 'pay_599', 'pay_1199', 'pay_3199']

        for tariff_key in required_tariffs:
            # –ò—â–µ–º —Ç–∞—Ä–∏—Ñ –ø–æ callback –∑–Ω–∞—á–µ–Ω–∏—é
            found = False
            for tariff_name, tariff_data in TARIFFS.items():
                if tariff_data.get('callback') == tariff_key:
                    logger.info(f"‚úÖ –¢–∞—Ä–∏—Ñ {tariff_key} ({tariff_data['name']}) –¥–æ—Å—Ç—É–ø–µ–Ω")
                    found = True
                    break

            if not found:
                logger.error(f"‚ùå –¢–∞—Ä–∏—Ñ {tariff_key} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
                return False

        logger.info("‚úÖ –í—Å–µ —Ç–∞—Ä–∏—Ñ—ã –¥–æ—Å—Ç—É–ø–Ω—ã")
        return True

    except Exception as e:
        logger.error(f"üí• Tariff config - –û–®–ò–ë–ö–ê: {e}")
        return False

async def test_user_creation():
    """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    logger.info("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")

    try:
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_id = 8888
        await database.add_user_without_subscription(
            user_id=user_id,
            username='test_user_creation',
            first_name='Test User Creation'
        )

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω
        user_info = await database.get_user_info(user_id)

        if user_info:
            logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
            return True
        else:
            logger.error(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False

    except Exception as e:
        logger.error(f"üí• User creation - –û–®–ò–ë–ö–ê: {e}")
        return False

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Å—Ç–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π —Ç–∞—Ä–∏—Ñ–æ–≤...")

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    await database.init_db()

    results = []

    # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
    tests = [
        ("Datetime fix", test_datetime_fix),
        ("Tariff config", test_tariff_config),
        ("User creation", test_user_creation)
    ]

    for test_name, test_func in tests:
        try:
            result = await test_func()
            results.append({
                'test': test_name,
                'status': 'PASS' if result else 'FAIL',
                'message': '–¢–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω' if result else '–¢–µ—Å—Ç –ø—Ä–æ–≤–∞–ª–µ–Ω'
            })
        except Exception as e:
            results.append({
                'test': test_name,
                'status': 'ERROR',
                'message': f'–û—à–∏–±–∫–∞: {str(e)}'
            })

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞
    total_tests = len(results)
    passed_tests = len([r for r in results if r['status'] == 'PASS'])
    failed_tests = len([r for r in results if r['status'] == 'FAIL'])
    error_tests = len([r for r in results if r['status'] == 'ERROR'])

    logger.info("=" * 60)
    logger.info("üìä –û–¢–ß–ï–¢ –û –ü–†–û–°–¢–û–ú –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ò –ò–°–ü–†–ê–í–õ–ï–ù–ò–ô –¢–ê–†–ò–§–û–í")
    logger.info("=" * 60)
    logger.info(f"–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {total_tests}")
    logger.info(f"–ü—Ä–æ–π–¥–µ–Ω–æ: {passed_tests} ‚úÖ")
    logger.info(f"–ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {failed_tests} ‚ùå")
    logger.info(f"–û—à–∏–±–æ–∫: {error_tests} üí•")
    logger.info(f"–£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {(passed_tests / total_tests * 100) if total_tests > 0 else 0:.1f}%")
    logger.info("=" * 60)

    for result in results:
        status_icon = "‚úÖ" if result['status'] == 'PASS' else "‚ùå" if result['status'] == 'FAIL' else "üí•"
        logger.info(f"{status_icon} {result['test']}: {result['message']}")

    logger.info("=" * 60)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
    report = {
        'timestamp': datetime.now().isoformat(),
        'summary': {
            'total_tests': total_tests,
            'passed': passed_tests,
            'failed': failed_tests,
            'errors': error_tests,
            'success_rate': (passed_tests / total_tests * 100) if total_tests > 0 else 0
        },
        'results': results
    }

    filename = f"simple_tariff_test_report_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
    with open(filename, 'w', encoding='utf-8') as f:
        json.dump(report, f, ensure_ascii=False, indent=2)

    logger.info(f"üìÑ –ü–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: {filename}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å
    if passed_tests == total_tests:
        logger.info("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ! –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.")
        return True
    else:
        logger.error("‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–∏–ª–∏—Å—å. –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ç–ª–∞–¥–∫–∞.")
        return False

if __name__ == "__main__":
    success = asyncio.run(main())
    sys.exit(0 if success else 1)
