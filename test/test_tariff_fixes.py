#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π —Å —Ç–∞—Ä–∏—Ñ–∞–º–∏
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –º–æ–≥—É—Ç –≤—ã–±–∏—Ä–∞—Ç—å —Ç–∞—Ä–∏—Ñ—ã –±–µ–∑ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
"""

import asyncio
import sys
import os
from datetime import datetime, timedelta
import json

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

import database
from config import TARIFFS, ADMIN_IDS
from handlers.callbacks_user import handle_payment_callback
from aiogram import Bot
from aiogram.types import CallbackQuery, User, Chat, Message
from unittest.mock import Mock, AsyncMock, patch
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class TariffFixTest:
    def __init__(self):
        self.bot = Mock(spec=Bot)
        self.test_results = []

    async def setup(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–π —Å—Ä–µ–¥—ã"""
        logger.info("üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–π —Å—Ä–µ–¥—ã...")

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        await database.init_db()

        # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        self.test_users = [
            {
                'user_id': 1001,
                'username': 'test_user_new',
                'days_since_registration': 0,
                'time_since_registration': 900,  # 15 –º–∏–Ω—É—Ç
                'expected_tariff': '–∫–æ–º—Ñ–æ—Ä—Ç'
            },
            {
                'user_id': 1002,
                'username': 'test_user_1day',
                'days_since_registration': 1,
                'time_since_registration': 86400,  # 1 –¥–µ–Ω—å
                'expected_tariff': '–ª–∞–π—Ç'
            },
            {
                'user_id': 1003,
                'username': 'test_user_3days',
                'days_since_registration': 3,
                'time_since_registration': 259200,  # 3 –¥–Ω—è
                'expected_tariff': '–º–∏–Ω–∏'
            },
            {
                'user_id': 1004,
                'username': 'test_user_5days',
                'days_since_registration': 5,
                'time_since_registration': 432000,  # 5 –¥–Ω–µ–π
                'expected_tariff': None  # –í—Å–µ —Ç–∞—Ä–∏—Ñ—ã –¥–æ—Å—Ç—É–ø–Ω—ã
            }
        ]

        # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –ë–î
        for user_data in self.test_users:
            await database.add_user_without_subscription(
                user_id=user_data['user_id'],
                username=user_data['username'],
                first_name=f"Test User {user_data['user_id']}"
            )
            logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω —Ç–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_data['username']} (ID: {user_data['user_id']})")

    async def test_tariff_selection_no_blocking(self):
        """–¢–µ—Å—Ç: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –º–æ–≥—É—Ç –≤—ã–±–∏—Ä–∞—Ç—å —Ç–∞—Ä–∏—Ñ—ã –±–µ–∑ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏"""
        logger.info("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã–±–æ—Ä–∞ —Ç–∞—Ä–∏—Ñ–æ–≤ –±–µ–∑ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏...")

        test_cases = [
            # –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å (15 –º–∏–Ω—É—Ç) - –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å –¥–æ—Å—Ç—É–ø –∫ –∫–æ–º—Ñ–æ—Ä—Ç—É
            {
                'user_id': 1001,
                'tariff_key': 'pay_1199',  # –∫–æ–º—Ñ–æ—Ä—Ç
                'should_work': True,
                'description': '–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±–∏—Ä–∞–µ—Ç –∫–æ–º—Ñ–æ—Ä—Ç'
            },
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å 1 –¥–µ–Ω—å - –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å –¥–æ—Å—Ç—É–ø –∫ –ª–∞–π—Ç—É
            {
                'user_id': 1002,
                'tariff_key': 'pay_599',  # –ª–∞–π—Ç
                'should_work': True,
                'description': '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å 1 –¥–µ–Ω—å –≤—ã–±–∏—Ä–∞–µ—Ç –ª–∞–π—Ç'
            },
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å 1 –¥–µ–Ω—å - –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å –¥–æ—Å—Ç—É–ø –∫ –º–∏–Ω–∏ (–Ω–µ –±–ª–æ–∫–∏—Ä—É–µ—Ç—Å—è)
            {
                'user_id': 1002,
                'tariff_key': 'pay_399',  # –º–∏–Ω–∏
                'should_work': True,
                'description': '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å 1 –¥–µ–Ω—å –≤—ã–±–∏—Ä–∞–µ—Ç –º–∏–Ω–∏ (–Ω–µ –±–ª–æ–∫–∏—Ä—É–µ—Ç—Å—è)'
            },
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å 3 –¥–Ω—è - –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å –¥–æ—Å—Ç—É–ø –∫ –º–∏–Ω–∏
            {
                'user_id': 1003,
                'tariff_key': 'pay_399',  # –º–∏–Ω–∏
                'should_work': True,
                'description': '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å 3 –¥–Ω—è –≤—ã–±–∏—Ä–∞–µ—Ç –º–∏–Ω–∏'
            },
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å 5 –¥–Ω–µ–π - –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º —Ç–∞—Ä–∏—Ñ–∞–º
            {
                'user_id': 1004,
                'tariff_key': 'pay_3199',  # –ø—Ä–µ–º–∏—É–º
                'should_work': True,
                'description': '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å 5 –¥–Ω–µ–π –≤—ã–±–∏—Ä–∞–µ—Ç –ø—Ä–µ–º–∏—É–º'
            }
        ]

        for test_case in test_cases:
            try:
                # –°–æ–∑–¥–∞–µ–º –º–æ–∫ callback query
                callback_query = Mock(spec=CallbackQuery)
                callback_query.data = test_case['tariff_key']
                callback_query.from_user = Mock(spec=User)
                callback_query.from_user.id = test_case['user_id']
                callback_query.message = Mock(spec=Message)
                callback_query.message.chat = Mock(spec=Chat)
                callback_query.message.chat.id = test_case['user_id']

                # –ú–æ–∫–∞–µ–º –º–µ—Ç–æ–¥—ã –±–æ—Ç–∞
                self.bot.send_message = AsyncMock()
                self.bot.edit_message_text = AsyncMock()

                # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞
                with patch('handlers.callbacks_user.bot', self.bot):
                    await handle_payment_callback(callback_query, None)

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ (–∑–Ω–∞—á–∏—Ç, —Ç–∞—Ä–∏—Ñ –¥–æ—Å—Ç—É–ø–µ–Ω)
                if self.bot.send_message.called or self.bot.edit_message_text.called:
                    self.test_results.append({
                        'test': test_case['description'],
                        'status': 'PASS',
                        'message': '–¢–∞—Ä–∏—Ñ –¥–æ—Å—Ç—É–ø–µ–Ω'
                    })
                    logger.info(f"‚úÖ {test_case['description']} - –ü–†–û–ô–î–ï–ù")
                else:
                    self.test_results.append({
                        'test': test_case['description'],
                        'status': 'FAIL',
                        'message': '–¢–∞—Ä–∏—Ñ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω'
                    })
                    logger.error(f"‚ùå {test_case['description']} - –ü–†–û–í–ê–õ–ï–ù")

            except Exception as e:
                self.test_results.append({
                    'test': test_case['description'],
                    'status': 'ERROR',
                    'message': f'–û—à–∏–±–∫–∞: {str(e)}'
                })
                logger.error(f"üí• {test_case['description']} - –û–®–ò–ë–ö–ê: {e}")

    async def test_datetime_comparison_fix(self):
        """–¢–µ—Å—Ç: –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã —Å datetime"""
        logger.info("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è datetime...")

        try:
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é is_old_user —Å —Ä–∞–∑–Ω—ã–º–∏ —Ñ–æ—Ä–º–∞—Ç–∞–º–∏ –¥–∞—Ç—ã
            test_cases = [
                {
                    'created_at': '2025-08-01T10:00:00Z',
                    'cutoff_date': '2025-08-02',
                    'expected': True,  # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—Ç–∞—Ä—à–µ cutoff
                    'description': '–î–∞—Ç–∞ —Å Z timezone'
                },
                {
                    'created_at': '2025-08-01T10:00:00',
                    'cutoff_date': '2025-08-02',
                    'expected': True,  # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—Ç–∞—Ä—à–µ cutoff
                    'description': '–î–∞—Ç–∞ –±–µ–∑ timezone'
                },
                {
                    'created_at': '2025-08-03T10:00:00Z',
                    'cutoff_date': '2025-08-02',
                    'expected': False,  # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–æ–≤–µ–µ cutoff
                    'description': '–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'
                }
            ]

            for test_case in test_cases:
                # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                user_id = 2000 + test_cases.index(test_case)
                await database.add_user_without_subscription(
                    user_id=user_id,
                    username=f'test_datetime_{user_id}',
                    first_name=f'Test DateTime {user_id}'
                )

                # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é is_old_user
                result = await database.is_old_user(user_id, test_case['cutoff_date'])

                if result == test_case['expected']:
                    self.test_results.append({
                        'test': f"Datetime: {test_case['description']}",
                        'status': 'PASS',
                        'message': f'–†–µ–∑—É–ª—å—Ç–∞—Ç: {result}'
                    })
                    logger.info(f"‚úÖ Datetime: {test_case['description']} - –ü–†–û–ô–î–ï–ù")
                else:
                    self.test_results.append({
                        'test': f"Datetime: {test_case['description']}",
                        'status': 'FAIL',
                        'message': f'–û–∂–∏–¥–∞–ª–æ—Å—å: {test_case["expected"]}, –ø–æ–ª—É—á–µ–Ω–æ: {result}'
                    })
                    logger.error(f"‚ùå Datetime: {test_case['description']} - –ü–†–û–í–ê–õ–ï–ù")

        except Exception as e:
            self.test_results.append({
                'test': 'Datetime comparison',
                'status': 'ERROR',
                'message': f'–û—à–∏–±–∫–∞: {str(e)}'
            })
            logger.error(f"üí• Datetime comparison - –û–®–ò–ë–ö–ê: {e}")

    async def test_tariff_availability_logging(self):
        """–¢–µ—Å—Ç: –ø—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Ç–∞—Ä–∏—Ñ–æ–≤"""
        logger.info("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–∞—Ä–∏—Ñ–æ–≤...")

        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_id = 1002  # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å 1 –¥–µ–Ω—å

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –±–µ–∑ –æ—à–∏–±–æ–∫
            with patch('handlers.callbacks_user.logger') as mock_logger:
                callback_query = Mock(spec=CallbackQuery)
                callback_query.data = 'pay_399'  # –º–∏–Ω–∏
                callback_query.from_user = Mock(spec=User)
                callback_query.from_user.id = user_id
                callback_query.message = Mock(spec=Message)
                callback_query.message.chat = Mock(spec=Chat)
                callback_query.message.chat.id = user_id

                self.bot.send_message = AsyncMock()
                self.bot.edit_message_text = AsyncMock()

                with patch('handlers.callbacks_user.bot', self.bot):
                    await handle_payment_callback(callback_query, None)

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ –≤—ã–∑—ã–≤–∞–µ—Ç –æ—à–∏–±–æ–∫
                self.test_results.append({
                    'test': 'Tariff availability logging',
                    'status': 'PASS',
                    'message': '–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ'
                })
                logger.info("‚úÖ Tariff availability logging - –ü–†–û–ô–î–ï–ù")

        except Exception as e:
            self.test_results.append({
                'test': 'Tariff availability logging',
                'status': 'ERROR',
                'message': f'–û—à–∏–±–∫–∞: {str(e)}'
            })
            logger.error(f"üí• Tariff availability logging - –û–®–ò–ë–ö–ê: {e}")

    def generate_report(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏"""
        logger.info("üìä –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞...")

        total_tests = len(self.test_results)
        passed_tests = len([r for r in self.test_results if r['status'] == 'PASS'])
        failed_tests = len([r for r in self.test_results if r['status'] == 'FAIL'])
        error_tests = len([r for r in self.test_results if r['status'] == 'ERROR'])

        report = {
            'timestamp': datetime.now().isoformat(),
            'summary': {
                'total_tests': total_tests,
                'passed': passed_tests,
                'failed': failed_tests,
                'errors': error_tests,
                'success_rate': (passed_tests / total_tests * 100) if total_tests > 0 else 0
            },
            'results': self.test_results
        }

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
        filename = f"tariff_fix_test_report_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
        with open(filename, 'w', encoding='utf-8') as f:
            json.dump(report, f, ensure_ascii=False, indent=2)

        # –í—ã–≤–æ–¥–∏–º –∫—Ä–∞—Ç–∫–∏–π –æ—Ç—á–µ—Ç
        logger.info("=" * 60)
        logger.info("üìä –û–¢–ß–ï–¢ –û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ò –ò–°–ü–†–ê–í–õ–ï–ù–ò–ô –¢–ê–†–ò–§–û–í")
        logger.info("=" * 60)
        logger.info(f"–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {total_tests}")
        logger.info(f"–ü—Ä–æ–π–¥–µ–Ω–æ: {passed_tests} ‚úÖ")
        logger.info(f"–ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {failed_tests} ‚ùå")
        logger.info(f"–û—à–∏–±–æ–∫: {error_tests} üí•")
        logger.info(f"–£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {report['summary']['success_rate']:.1f}%")
        logger.info("=" * 60)

        for result in self.test_results:
            status_icon = "‚úÖ" if result['status'] == 'PASS' else "‚ùå" if result['status'] == 'FAIL' else "üí•"
            logger.info(f"{status_icon} {result['test']}: {result['message']}")

        logger.info("=" * 60)
        logger.info(f"üìÑ –ü–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: {filename}")

        return report

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π —Ç–∞—Ä–∏—Ñ–æ–≤...")

    tester = TariffFixTest()

    try:
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞
        await tester.setup()

        # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
        await tester.test_tariff_selection_no_blocking()
        await tester.test_datetime_comparison_fix()
        await tester.test_tariff_availability_logging()

        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞
        report = tester.generate_report()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å
        if report['summary']['success_rate'] >= 90:
            logger.info("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ! –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.")
            return True
        else:
            logger.error("‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–∏–ª–∏—Å—å. –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ç–ª–∞–¥–∫–∞.")
            return False

    except Exception as e:
        logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
        return False
    finally:
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î
        pass

if __name__ == "__main__":
    success = asyncio.run(main())
    sys.exit(0 if success else 1)
