#!/usr/bin/env python3
"""
–ú–æ–¥—É–ª—å –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–º–µ–Ω–∏ –±–æ—Ç–∞
"""

import asyncio
import logging
from typing import Optional
from aiogram import Bot, Router
from aiogram.types import BotCommand, BotCommandScopeDefault, Message
from database import get_total_users_count

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è bot_counter
bot_counter_router = Router()

# –õ–æ–≥–≥–µ—Ä
from logger import get_logger
logger = get_logger('bot_counter')


class BotCounter:
    """–ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –∏–º–µ–Ω–∏ –±–æ—Ç–∞"""

    def __init__(self):
        self.bot: Optional[Bot] = None
        self.current_count = 0
        self.update_interval = 300  # 5 –º–∏–Ω—É—Ç
        self.running = False

    async def start(self, bot: Bot):
        """–ó–∞–ø—É—Å–∫ —Å—á–µ—Ç—á–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (—Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞)"""
        self.bot = bot
        self.running = True
        logger.info("üî¢ –°—á–µ—Ç—á–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞–ø—É—â–µ–Ω (–±–µ–∑ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–º–µ–Ω–∏)")

        # –£–î–ê–õ–ï–ù–û: –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –±–æ—Ç–∞

    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—á–µ—Ç—á–∏–∫–∞"""
        self.running = False
        logger.info("üî¢ –°—á–µ—Ç—á–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

    async def get_total_count(self) -> int:
        """–ü–æ–ª—É—á–∏—Ç—å –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        try:
            count = await get_total_users_count()
            self.current_count = count
            return count
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
            return self.current_count

    def format_number(self, number: int) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —á–∏—Å–ª–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        if number >= 1000000:
            return f"{number / 1000000:.1f}–ú"
        elif number >= 1000:
            return f"{number / 1000:.1f}–ö"
        else:
            return str(number)

    # –£–î–ê–õ–ï–ù–û: —Ñ—É–Ω–∫—Ü–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–º–µ–Ω–∏ –±–æ—Ç–∞
    # –§—É–Ω–∫—Ü–∏–∏ update_bot_name() –∏ _update_loop() —É–¥–∞–ª–µ–Ω—ã –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è


# –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
bot_counter = BotCounter()


# –£–î–ê–õ–ï–ù–û: –∫–æ–º–∞–Ω–¥–∞ /botname
# –§—É–Ω–∫—Ü–∏—è cmd_bot_name() —É–¥–∞–ª–µ–Ω–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è


async def update_bot_commands(bot: Bot):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞"""
    try:
        commands = [
            BotCommand(command="start", description="üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"),
            BotCommand(command="menu", description="üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"),
            BotCommand(command="help", description="‚ùì –ü–æ–º–æ—â—å"),
        ]

        await bot.set_my_commands(commands, scope=BotCommandScopeDefault())
        logger.info("‚úÖ –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω—ã")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞: {e}")
