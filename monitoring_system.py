#!/usr/bin/env python3
"""
–ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –±–æ—Ç–∞
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç: –æ–±—É—á–µ–Ω–Ω—ã–µ –∞–≤–∞—Ç–∞—Ä—ã, –ø–ª–∞—Ç–µ–∂–∏, –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏
"""

import asyncio
import aiosqlite
import logging
import os
import sys
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Tuple
import json
import pytz
from aiogram import Bot
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.enums import ParseMode

# –ò–º–ø–æ—Ä—Ç—ã –∏–∑ –ø—Ä–æ–µ–∫—Ç–∞
from config import ADMIN_IDS, ERROR_LOG_ADMIN, DATABASE_PATH
from database import check_database_user, get_user_trainedmodels, get_payments_by_date
from handlers.utils import send_message_with_fallback, safe_escape_markdown as escape_md
from logger import get_logger

logger = get_logger('monitoring')

class BotMonitoringSystem:
    """–°–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –±–æ—Ç–∞"""

    def __init__(self, bot: Bot):
        self.bot = bot
        self.moscow_tz = pytz.timezone('Europe/Moscow')
        self.critical_errors = []
        self.warnings = []

    async def check_trained_avatars(self) -> Dict:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—É—á–µ–Ω–Ω—ã—Ö –∞–≤–∞—Ç–∞—Ä–æ–≤ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        try:
            logger.info("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—É—á–µ–Ω–Ω—ã—Ö –∞–≤–∞—Ç–∞—Ä–æ–≤...")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤–∞—Ç–∞—Ä—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 6 —á–∞—Å–æ–≤ (–ø–æ—Å–∫–æ–ª—å–∫—É –æ—Ç—á–µ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –∫–∞–∂–¥—ã–µ 6 —á–∞—Å–æ–≤)
            six_hours_ago = datetime.now() - timedelta(hours=6)

            async with aiosqlite.connect(DATABASE_PATH) as conn:
                cursor = await conn.cursor()

                # –ü–æ–ª—É—á–∞–µ–º –∞–≤–∞—Ç–∞—Ä—ã —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º 'success' –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 6 —á–∞—Å–æ–≤
                await cursor.execute("""
                    SELECT user_id, avatar_name, model_version, created_at, updated_at
                    FROM user_trainedmodels
                    WHERE status = 'success' AND updated_at > ?
                    ORDER BY updated_at DESC
                """, (six_hours_ago.strftime('%Y-%m-%d %H:%M:%S'),))

                successful_avatars = await cursor.fetchall()

                # –ü–æ–ª—É—á–∞–µ–º –∞–≤–∞—Ç–∞—Ä—ã –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –æ–±—É—á–µ–Ω–∏—è (–≤—Å–µ —Ç–µ–∫—É—â–∏–µ)
                await cursor.execute("""
                    SELECT user_id, avatar_name, status, created_at
                    FROM user_trainedmodels
                    WHERE status IN ('pending', 'starting', 'processing')
                    ORDER BY created_at DESC
                """)

                training_avatars = await cursor.fetchall()

                # –ü–æ–ª—É—á–∞–µ–º –Ω–µ—É–¥–∞—á–Ω—ã–µ –∞–≤–∞—Ç–∞—Ä—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 6 —á–∞—Å–æ–≤
                await cursor.execute("""
                    SELECT user_id, avatar_name, status, created_at
                    FROM user_trainedmodels
                    WHERE status IN ('failed', 'canceled')
                    AND created_at > ?
                    ORDER BY created_at DESC
                """, (six_hours_ago.strftime('%Y-%m-%d %H:%M:%S'),))

                failed_avatars = await cursor.fetchall()

            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
            report = {
                'successful_count': len(successful_avatars),
                'training_count': len(training_avatars),
                'failed_count': len(failed_avatars),
                'successful_avatars': successful_avatars[:10],  # –¢–æ–ø 10
                'training_avatars': training_avatars,
                'failed_avatars': failed_avatars
            }

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞–º
            await self._send_avatar_report(report)

            logger.info(f"‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤–∞—Ç–∞—Ä–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {report['successful_count']} —É—Å–ø–µ—à–Ω—ã—Ö, {report['training_count']} –≤ –æ–±—É—á–µ–Ω–∏–∏, {report['failed_count']} –Ω–µ—É–¥–∞—á–Ω—ã—Ö")
            return report

        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤–∞—Ç–∞—Ä–æ–≤: {str(e)}"
            logger.error(error_msg, exc_info=True)
            await self._send_critical_error("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤–∞—Ç–∞—Ä–æ–≤", error_msg)
            return {'error': error_msg}

    async def check_payments(self) -> Dict:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–ª–∞—Ç–µ–∂–µ–π –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        try:
            logger.info("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–ª–∞—Ç–µ–∂–µ–π...")

            # –ü–æ–ª—É—á–∞–µ–º –ø–ª–∞—Ç–µ–∂–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
            yesterday = datetime.now() - timedelta(days=1)
            payments = await get_payments_by_date(
                start_date=yesterday.strftime('%Y-%m-%d'),
                end_date=datetime.now().strftime('%Y-%m-%d')
            )

            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–ª–∞—Ç–µ–∂–∏
            successful_payments = [p for p in payments if p[3] == 'succeeded']
            failed_payments = [p for p in payments if p[3] != 'succeeded']

            total_amount = sum(p[2] for p in successful_payments)

            report = {
                'total_payments': len(payments),
                'successful_payments': len(successful_payments),
                'failed_payments': len(failed_payments),
                'total_amount': total_amount,
                'recent_payments': payments[:10]  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 –ø–ª–∞—Ç–µ–∂–µ–π
            }

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞–º
            await self._send_payment_report(report)

            logger.info(f"‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–ª–∞—Ç–µ–∂–µ–π –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {report['successful_payments']} —É—Å–ø–µ—à–Ω—ã—Ö, {report['total_amount']:.2f}‚ÇΩ")
            return report

        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π: {str(e)}"
            logger.error(error_msg, exc_info=True)
            await self._send_critical_error("–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–ª–∞—Ç–µ–∂–µ–π", error_msg)
            return {'error': error_msg}

    async def check_critical_errors(self) -> Dict:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫ –≤ –ª–æ–≥–∞—Ö"""
        try:
            logger.info("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫...")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏ –Ω–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏
            critical_keywords = [
                'CRITICAL', 'FATAL', '–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞', 'Critical error',
                'Database locked', 'Connection failed', 'Timeout',
                'MemoryError', 'OutOfMemory', 'Disk full'
            ]

            errors_found = []

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –ª–æ–≥-—Ñ–∞–π–ª—ã
            log_files = ['bot.log', 'logs/errors.log', 'logs/database.log']

            for log_file in log_files:
                if os.path.exists(log_file):
                    try:
                        with open(log_file, 'r', encoding='utf-8') as f:
                            lines = f.readlines()
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 1000 —Å—Ç—Ä–æ–∫
                            recent_lines = lines[-1000:] if len(lines) > 1000 else lines

                            for line in recent_lines:
                                for keyword in critical_keywords:
                                    if keyword.lower() in line.lower():
                                        errors_found.append({
                                            'file': log_file,
                                            'line': line.strip(),
                                            'keyword': keyword
                                        })
                                        break
                    except Exception as e:
                        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –ª–æ–≥-—Ñ–∞–π–ª {log_file}: {e}")

            report = {
                'errors_found': len(errors_found),
                'critical_errors': errors_found[:20]  # –¢–æ–ø 20 –æ—à–∏–±–æ–∫
            }

            # –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω—ã –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            if errors_found:
                await self._send_critical_errors_report(report)

            logger.info(f"‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: –Ω–∞–π–¥–µ–Ω–æ {len(errors_found)} –æ—à–∏–±–æ–∫")
            return report

        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫: {str(e)}"
            logger.error(error_msg, exc_info=True)
            await self._send_critical_error("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫", error_msg)
            return {'error': error_msg}

    async def check_system_health(self) -> Dict:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã"""
        try:
            logger.info("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã...")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            db_size = os.path.getsize(DATABASE_PATH) if os.path.exists(DATABASE_PATH) else 0
            db_size_mb = db_size / (1024 * 1024)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä –ª–æ–≥-—Ñ–∞–π–ª–æ–≤
            log_files = ['bot.log', 'logs/errors.log', 'logs/database.log']
            total_log_size = 0
            for log_file in log_files:
                if os.path.exists(log_file):
                    total_log_size += os.path.getsize(log_file)

            total_log_size_mb = total_log_size / (1024 * 1024)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–≤–æ–±–æ–¥–Ω–æ–µ –º–µ—Å—Ç–æ –Ω–∞ –¥–∏—Å–∫–µ
            disk_usage = os.statvfs('.')
            free_space_gb = (disk_usage.f_frsize * disk_usage.f_bavail) / (1024**3)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            async with aiosqlite.connect(DATABASE_PATH) as conn:
                cursor = await conn.cursor()
                await cursor.execute("SELECT COUNT(*) FROM users")
                total_users = (await cursor.fetchone())[0]

                await cursor.execute("SELECT COUNT(*) FROM users WHERE created_at > datetime('now', '-1 day')")
                new_users_today = (await cursor.fetchone())[0]

            report = {
                'db_size_mb': round(db_size_mb, 2),
                'log_size_mb': round(total_log_size_mb, 2),
                'free_space_gb': round(free_space_gb, 2),
                'total_users': total_users,
                'new_users_today': new_users_today,
                'warnings': []
            }

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
            if db_size_mb > 100:
                report['warnings'].append("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –±–æ–ª—å—à–µ 100MB")

            if total_log_size_mb > 500:
                report['warnings'].append("–õ–æ–≥-—Ñ–∞–π–ª—ã –±–æ–ª—å—à–µ 500MB")

            if free_space_gb < 1:
                report['warnings'].append("–ú–∞–ª–æ –º–µ—Å—Ç–∞ –Ω–∞ –¥–∏—Å–∫–µ (<1GB)")

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —Å–∏—Å—Ç–µ–º—ã
            await self._send_system_health_report(report)

            logger.info(f"‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
            return report

        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã: {str(e)}"
            logger.error(error_msg, exc_info=True)
            await self._send_critical_error("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã", error_msg)
            return {'error': error_msg}

    async def _send_avatar_report(self, report: Dict):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—á–µ—Ç–∞ –æ–± –∞–≤–∞—Ç–∞—Ä–∞—Ö"""
        try:
            timestamp = datetime.now(self.moscow_tz).strftime('%Y-%m-%d %H:%M:%S MSK')

            message_parts = [
                f"üé≠ –û–¢–ß–ï–¢ –ü–û –ê–í–ê–¢–ê–†–ê–ú ({timestamp})",
                f"‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö (6—á): {report['successful_count']}",
                f"‚è≥ –í –æ–±—É—á–µ–Ω–∏–∏: {report['training_count']}",
                f"‚ùå –ù–µ—É–¥–∞—á–Ω—ã—Ö (6—á): {report['failed_count']}"
            ]

            if report['training_avatars']:
                message_parts.append("\nüîÑ –í –û–ë–£–ß–ï–ù–ò–ò:")
                for avatar in report['training_avatars'][:5]:
                    user_id, avatar_name, status, created_at = avatar
                    created_time = datetime.fromisoformat(created_at.replace('Z', '+00:00')).astimezone(self.moscow_tz).strftime('%H:%M')
                    message_parts.append(f"‚Ä¢ User {user_id}: {avatar_name} ({status}) - {created_time}")

            if report['failed_avatars']:
                message_parts.append("\n‚ùå –ù–ï–£–î–ê–ß–ù–´–ï (6—á):")
                for avatar in report['failed_avatars'][:5]:
                    user_id, avatar_name, status, created_at = avatar
                    created_time = datetime.fromisoformat(created_at.replace('Z', '+00:00')).astimezone(self.moscow_tz).strftime('%H:%M')
                    message_parts.append(f"‚Ä¢ User {user_id}: {avatar_name} ({status}) - {created_time}")

            message = escape_md("\n".join(message_parts), version=2)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º –∞–¥–º–∏–Ω–∞–º (–≤–∫–ª—é—á–∞—è –≥–ª–∞–≤–Ω–æ–≥–æ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞)
            for admin_id in ADMIN_IDS:
                try:
                    await send_message_with_fallback(
                        self.bot, admin_id, message,
                        parse_mode=ParseMode.MARKDOWN_V2
                    )
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–∞ –æ–± –∞–≤–∞—Ç–∞—Ä–∞—Ö –∞–¥–º–∏–Ω—É {admin_id}: {e}")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞ –æ–± –∞–≤–∞—Ç–∞—Ä–∞—Ö: {e}")

    async def _send_payment_report(self, report: Dict):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—á–µ—Ç–∞ –æ –ø–ª–∞—Ç–µ–∂–∞—Ö"""
        try:
            timestamp = datetime.now(self.moscow_tz).strftime('%Y-%m-%d %H:%M:%S MSK')

            message_parts = [
                f"üí≥ –û–¢–ß–ï–¢ –ü–û –ü–õ–ê–¢–ï–ñ–ê–ú ({timestamp})",
                f"üìä –í—Å–µ–≥–æ –ø–ª–∞—Ç–µ–∂–µ–π: {report['total_payments']}",
                f"‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö: {report['successful_payments']}",
                f"‚ùå –ù–µ—É–¥–∞—á–Ω—ã—Ö: {report['failed_payments']}",
                f"üí∞ –û–±—â–∞—è —Å—É–º–º–∞: {report['total_amount']:.2f}‚ÇΩ"
            ]

            if report['recent_payments']:
                message_parts.append("\nüí∏ –ü–û–°–õ–ï–î–ù–ò–ï –ü–õ–ê–¢–ï–ñ–ò:")
                for payment in report['recent_payments'][:5]:
                    user_id, plan, amount, status, created_at, payment_id, username, first_name = payment
                    if isinstance(created_at, datetime):
                        created_time = created_at.strftime('%H:%M')
                    else:
                        created_time = "Unknown"
                    message_parts.append(f"‚Ä¢ User {user_id}: {plan} - {amount}‚ÇΩ ({status}) - {created_time}")

            message = escape_md("\n".join(message_parts), version=2)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º –∞–¥–º–∏–Ω–∞–º (–≤–∫–ª—é—á–∞—è –≥–ª–∞–≤–Ω–æ–≥–æ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞)
            for admin_id in ADMIN_IDS:
                try:
                    await send_message_with_fallback(
                        self.bot, admin_id, message,
                        parse_mode=ParseMode.MARKDOWN_V2
                    )
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–∞ –æ –ø–ª–∞—Ç–µ–∂–∞—Ö –∞–¥–º–∏–Ω—É {admin_id}: {e}")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞ –æ –ø–ª–∞—Ç–µ–∂–∞—Ö: {e}")

    async def _send_critical_errors_report(self, report: Dict):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—á–µ—Ç–∞ –æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–∫–∞—Ö"""
        try:
            timestamp = datetime.now(self.moscow_tz).strftime('%Y-%m-%d %H:%M:%S MSK')

            message_parts = [
                f"üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –û–®–ò–ë–ö–ò ({timestamp})",
                f"‚ùå –ù–∞–π–¥–µ–Ω–æ –æ—à–∏–±–æ–∫: {report['errors_found']}"
            ]

            if report['critical_errors']:
                message_parts.append("\nüîç –ü–û–°–õ–ï–î–ù–ò–ï –û–®–ò–ë–ö–ò:")
                for error in report['critical_errors'][:5]:
                    file_name = os.path.basename(error['file'])
                    line_preview = error['line'][:100] + "..." if len(error['line']) > 100 else error['line']
                    message_parts.append(f"‚Ä¢ {file_name}: {line_preview}")

            message = escape_md("\n".join(message_parts), version=2)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–ª–∞–≤–Ω–æ–º—É —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É (ERROR_LOG_ADMIN)
            for admin_id in ERROR_LOG_ADMIN:
                try:
                    await send_message_with_fallback(
                        self.bot, admin_id, message,
                        parse_mode=ParseMode.MARKDOWN_V2
                    )
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–∞ –æ–± –æ—à–∏–±–∫–∞—Ö –≥–ª–∞–≤–Ω–æ–º—É —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É {admin_id}: {e}")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞ –æ–± –æ—à–∏–±–∫–∞—Ö: {e}")

    async def _send_system_health_report(self, report: Dict):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—á–µ—Ç–∞ –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —Å–∏—Å—Ç–µ–º—ã"""
        try:
            timestamp = datetime.now(self.moscow_tz).strftime('%Y-%m-%d %H:%M:%S MSK')

            message_parts = [
                f"üíª –°–û–°–¢–û–Ø–ù–ò–ï –°–ò–°–¢–ï–ú–´ ({timestamp})",
                f"üìä –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {report['db_size_mb']}MB",
                f"üìù –õ–æ–≥–∏: {report['log_size_mb']}MB",
                f"üíæ –°–≤–æ–±–æ–¥–Ω–æ–µ –º–µ—Å—Ç–æ: {report['free_space_gb']}GB",
                f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {report['total_users']}",
                f"üÜï –ù–æ–≤—ã—Ö —Å–µ–≥–æ–¥–Ω—è: {report['new_users_today']}"
            ]

            if report['warnings']:
                message_parts.append("\n‚ö†Ô∏è –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–Ø:")
                for warning in report['warnings']:
                    message_parts.append(f"‚Ä¢ {warning}")

            message = escape_md("\n".join(message_parts), version=2)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–ª–∞–≤–Ω–æ–º—É —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É (ERROR_LOG_ADMIN)
            for admin_id in ERROR_LOG_ADMIN:
                try:
                    await send_message_with_fallback(
                        self.bot, admin_id, message,
                        parse_mode=ParseMode.MARKDOWN_V2
                    )
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–∞ –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —Å–∏—Å—Ç–µ–º—ã –≥–ª–∞–≤–Ω–æ–º—É —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É {admin_id}: {e}")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞ –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —Å–∏—Å—Ç–µ–º—ã: {e}")

    async def _send_critical_error(self, component: str, error: str):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–µ"""
        try:
            timestamp = datetime.now(self.moscow_tz).strftime('%Y-%m-%d %H:%M:%S MSK')

            message = escape_md(
                f"üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê ({timestamp})\n"
                f"üîß –ö–æ–º–ø–æ–Ω–µ–Ω—Ç: {component}\n"
                f"‚ùå –û—à–∏–±–∫–∞: {error}",
                version=2
            )

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–ª–∞–≤–Ω–æ–º—É —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É (ERROR_LOG_ADMIN)
            for admin_id in ERROR_LOG_ADMIN:
                try:
                    await send_message_with_fallback(
                        self.bot, admin_id, message,
                        parse_mode=ParseMode.MARKDOWN_V2
                    )
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–µ –≥–ª–∞–≤–Ω–æ–º—É —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É {admin_id}: {e}")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–µ: {e}")

    async def send_new_user_notification(self, user_id: int, username: str = None, first_name: str = None):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
        try:
            timestamp = datetime.now(self.moscow_tz).strftime('%Y-%m-%d %H:%M:%S MSK')

            message_parts = [
                f"üÜï –ù–û–í–´–ô –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨ ({timestamp})",
                f"üë§ User ID: {user_id}",
            ]

            if username:
                message_parts.append(f"üîó Username: @{username}")

            if first_name:
                message_parts.append(f"üìù –ò–º—è: {first_name}")

            message = escape_md("\n".join(message_parts), version=2)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º –∞–¥–º–∏–Ω–∞–º (–≤–∫–ª—é—á–∞—è –≥–ª–∞–≤–Ω–æ–≥–æ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞)
            for admin_id in ADMIN_IDS:
                try:
                    await send_message_with_fallback(
                        self.bot, admin_id, message,
                        parse_mode=ParseMode.MARKDOWN_V2
                    )
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∞–¥–º–∏–Ω—É {admin_id}: {e}")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ: {e}")

    async def send_immediate_critical_notification(self, notification_type: str, data: Dict):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω—ã—Ö –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        try:
            timestamp = datetime.now(self.moscow_tz).strftime('%Y-%m-%d %H:%M:%S MSK')

            if notification_type == "critical_error":
                message_parts = [
                    f"üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê ({timestamp})",
                    f"üîß –ö–æ–º–ø–æ–Ω–µ–Ω—Ç: {data.get('component', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}",
                    f"‚ùå –û—à–∏–±–∫–∞: {data.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}"
                ]

                if data.get('user_id'):
                    message_parts.append(f"üë§ User ID: {data['user_id']}")

                if data.get('details'):
                    message_parts.append(f"üìã –î–µ—Ç–∞–ª–∏: {data['details']}")

            elif notification_type == "payment_success":
                message_parts = [
                    f"üí≥ –ù–û–í–´–ô –ü–õ–ê–¢–ï–ñ ({timestamp})",
                    f"üë§ User ID: {data.get('user_id', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}",
                    f"üì¶ –ü–∞–∫–µ—Ç: {data.get('plan', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}",
                    f"üí∞ –°—É–º–º–∞: {data.get('amount', 0):.2f}‚ÇΩ",
                    f"‚úÖ –°—Ç–∞—Ç—É—Å: –£—Å–ø–µ—à–Ω–æ"
                ]

            elif notification_type == "avatar_trained":
                message_parts = [
                    f"üé≠ –ê–í–ê–¢–ê–† –û–ë–£–ß–ï–ù ({timestamp})",
                    f"üë§ User ID: {data.get('user_id', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}",
                    f"üè∑ –ò–º—è –∞–≤–∞—Ç–∞—Ä–∞: {data.get('avatar_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}",
                    f"üîë –¢—Ä–∏–≥–≥–µ—Ä: {data.get('trigger_word', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}"
                ]

            elif notification_type == "system_issue":
                message_parts = [
                    f"‚ö†Ô∏è –ü–†–û–ë–õ–ï–ú–ê –°–ò–°–¢–ï–ú–´ ({timestamp})",
                    f"üîß –ö–æ–º–ø–æ–Ω–µ–Ω—Ç: {data.get('component', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}",
                    f"‚ùå –ü—Ä–æ–±–ª–µ–º–∞: {data.get('issue', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –ø—Ä–æ–±–ª–µ–º–∞')}"
                ]

            message = escape_md("\n".join(message_parts), version=2)

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            if notification_type == "payment_success":
                # –£—Å–ø–µ—à–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
                recipients = ADMIN_IDS
                logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–ª–∞—Ç–µ–∂–µ –≤—Å–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º: {recipients}")
            else:
                # –û—Å—Ç–∞–ª—å–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –≥–ª–∞–≤–Ω–æ–º—É —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É
                recipients = ERROR_LOG_ADMIN
                logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≥–ª–∞–≤–Ω–æ–º—É —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É: {recipients}")

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            for admin_id in recipients:
                try:
                    await send_message_with_fallback(
                        self.bot, admin_id, message,
                        parse_mode=ParseMode.MARKDOWN_V2
                    )
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin_id}: {e}")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")

    async def send_hourly_summary(self):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –µ–∂–µ—á–∞—Å–Ω–æ–π —Å–≤–æ–¥–∫–∏"""
        try:
            timestamp = datetime.now(self.moscow_tz).strftime('%Y-%m-%d %H:%M:%S MSK')

            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å
            one_hour_ago = datetime.now(self.moscow_tz) - timedelta(hours=1)

            async with aiosqlite.connect(DATABASE_PATH) as conn:
                cursor = await conn.cursor()

                # –ù–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∑–∞ —á–∞—Å
                await cursor.execute("""
                    SELECT COUNT(*) FROM users
                    WHERE created_at > ?
                """, (one_hour_ago.strftime('%Y-%m-%d %H:%M:%S'),))
                new_users_count = (await cursor.fetchone())[0]

                # –ü–ª–∞—Ç–µ–∂–∏ –∑–∞ —á–∞—Å
                await cursor.execute("""
                    SELECT COUNT(*), SUM(amount) FROM payments
                    WHERE created_at > ? AND status = 'succeeded'
                """, (one_hour_ago.strftime('%Y-%m-%d %H:%M:%S'),))
                payments_result = await cursor.fetchone()
                payments_count = payments_result[0] if payments_result[0] else 0
                payments_amount = payments_result[1] if payments_result[1] else 0

                # –ü–µ—Ä–≤—ã–µ –ø–æ–∫—É–ø–∫–∏ –∑–∞ —á–∞—Å
                await cursor.execute("""
                    SELECT COUNT(*) FROM users
                    WHERE first_purchase = 1 AND created_at > ?
                """, (one_hour_ago.strftime('%Y-%m-%d %H:%M:%S'),))
                first_purchases_count = (await cursor.fetchone())[0]

                # –û–±—É—á–µ–Ω–Ω—ã–µ –∞–≤–∞—Ç–∞—Ä—ã –∑–∞ —á–∞—Å
                await cursor.execute("""
                    SELECT COUNT(*) FROM user_trainedmodels
                    WHERE status = 'success' AND updated_at > ?
                """, (one_hour_ago.strftime('%Y-%m-%d %H:%M:%S'),))
                trained_avatars_count = (await cursor.fetchone())[0]

                # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø–∞–∫–µ—Ç–∞–º
                await cursor.execute("""
                    SELECT plan, COUNT(*) FROM payments
                    WHERE created_at > ? AND status = 'succeeded'
                    GROUP BY plan
                """, (one_hour_ago.strftime('%Y-%m-%d %H:%M:%S'),))
                packages_stats = await cursor.fetchall()

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–≤–æ–¥–∫—É
            message_parts = [
                f"üìä –ï–ñ–ï–ß–ê–°–ù–ê–Ø –°–í–û–î–ö–ê ({timestamp})",
                f"üë• –ù–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {new_users_count}",
                f"üí≥ –ü–ª–∞—Ç–µ–∂–µ–π: {payments_count}",
                f"üí∞ –°—É–º–º–∞ –ø–ª–∞—Ç–µ–∂–µ–π: {payments_amount:.2f}‚ÇΩ",
                f"üéÅ –ü–µ—Ä–≤—ã—Ö –ø–æ–∫—É–ø–æ–∫: {first_purchases_count}",
                f"üé≠ –û–±—É—á–µ–Ω–Ω—ã—Ö –∞–≤–∞—Ç–∞—Ä–æ–≤: {trained_avatars_count}"
            ]

            if packages_stats:
                message_parts.append("\nüì¶ –ü–û –ü–ê–ö–ï–¢–ê–ú:")
                for plan, count in packages_stats:
                    message_parts.append(f"‚Ä¢ {plan}: {count}")

            message = escape_md("\n".join(message_parts), version=2)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º –∞–¥–º–∏–Ω–∞–º
            for admin_id in ADMIN_IDS:
                try:
                    await send_message_with_fallback(
                        self.bot, admin_id, message,
                        parse_mode=ParseMode.MARKDOWN_V2
                    )
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –µ–∂–µ—á–∞—Å–Ω–æ–π —Å–≤–æ–¥–∫–∏ –∞–¥–º–∏–Ω—É {admin_id}: {e}")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –µ–∂–µ—á–∞—Å–Ω–æ–π —Å–≤–æ–¥–∫–∏: {e}")

    async def send_daily_detailed_report(self):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        try:
            timestamp = datetime.now(self.moscow_tz).strftime('%Y-%m-%d %H:%M:%S MSK')
            yesterday = datetime.now(self.moscow_tz) - timedelta(days=1)

            async with aiosqlite.connect(DATABASE_PATH) as conn:
                cursor = await conn.cursor()

                # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –¥–µ–Ω—å
                await cursor.execute("""
                    SELECT COUNT(*) FROM users
                    WHERE DATE(created_at) = DATE(?)
                """, (yesterday.strftime('%Y-%m-%d'),))
                new_users_day = (await cursor.fetchone())[0]

                await cursor.execute("""
                    SELECT COUNT(*), SUM(amount) FROM payments
                    WHERE DATE(created_at) = DATE(?) AND status = 'succeeded'
                """, (yesterday.strftime('%Y-%m-%d'),))
                payments_result = await cursor.fetchone()
                payments_day = payments_result[0] if payments_result[0] else 0
                amount_day = payments_result[1] if payments_result[1] else 0

                await cursor.execute("""
                    SELECT COUNT(*) FROM user_trainedmodels
                    WHERE DATE(updated_at) = DATE(?) AND status = 'success'
                """, (yesterday.strftime('%Y-%m-%d'),))
                avatars_day = (await cursor.fetchone())[0]

                # –¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
                await cursor.execute("""
                    SELECT user_id, COUNT(*) as activity_count
                    FROM user_actions
                    WHERE DATE(timestamp) = DATE(?)
                    GROUP BY user_id
                    ORDER BY activity_count DESC
                    LIMIT 5
                """, (yesterday.strftime('%Y-%m-%d'),))
                top_users = await cursor.fetchall()

            message_parts = [
                f"üìà –î–ï–¢–ê–õ–¨–ù–´–ô –û–¢–ß–ï–¢ –ó–ê –î–ï–ù–¨ ({timestamp})",
                f"üë• –ù–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {new_users_day}",
                f"üí≥ –ü–ª–∞—Ç–µ–∂–µ–π: {payments_day}",
                f"üí∞ –°—É–º–º–∞: {amount_day:.2f}‚ÇΩ",
                f"üé≠ –û–±—É—á–µ–Ω–Ω—ã—Ö –∞–≤–∞—Ç–∞—Ä–æ–≤: {avatars_day}"
            ]

            if top_users:
                message_parts.append("\nüî• –¢–û–ü –ê–ö–¢–ò–í–ù–´–• –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô:")
                for user_id, activity_count in top_users:
                    message_parts.append(f"‚Ä¢ User {user_id}: {activity_count} –¥–µ–π—Å—Ç–≤–∏–π")

            message = escape_md("\n".join(message_parts), version=2)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–ª–∞–≤–Ω–æ–º—É —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É
            for admin_id in ERROR_LOG_ADMIN:
                try:
                    await send_message_with_fallback(
                        self.bot, admin_id, message,
                        parse_mode=ParseMode.MARKDOWN_V2
                    )
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –≥–ª–∞–≤–Ω–æ–º—É —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É {admin_id}: {e}")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞: {e}")

    async def run_full_monitoring(self) -> Dict:
        """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–∏—Å—Ç–µ–º—ã...")

        results = {}

        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
        checks = [
            ("avatars", self.check_trained_avatars),
            ("payments", self.check_payments),
            ("critical_errors", self.check_critical_errors),
            ("system_health", self.check_system_health)
        ]

        for name, check_func in checks:
            try:
                results[name] = await check_func()
            except Exception as e:
                error_msg = f"–û—à–∏–±–∫–∞ –≤ –ø—Ä–æ–≤–µ—Ä–∫–µ {name}: {str(e)}"
                logger.error(error_msg, exc_info=True)
                results[name] = {'error': error_msg}

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        def datetime_handler(obj):
            if isinstance(obj, datetime):
                return obj.isoformat()
            raise TypeError(f"Object of type {type(obj)} is not JSON serializable")

        with open('monitoring_report.json', 'w', encoding='utf-8') as f:
            json.dump(results, f, ensure_ascii=False, indent=2, default=datetime_handler)

        logger.info("‚úÖ –ü–æ–ª–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω")
        return results

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    # –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
    # –í —Ä–µ–∞–ª—å–Ω–æ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è –∏–∑ main.py
    bot_token = os.getenv('TELEGRAM_BOT_TOKEN')
    if not bot_token:
        print("‚ùå TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        return

    bot = Bot(token=bot_token)
    monitoring = BotMonitoringSystem(bot)

    try:
        results = await monitoring.run_full_monitoring()
        print("‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ")
        print(f"üìÑ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ monitoring_report.json")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
    finally:
        await bot.session.close()

if __name__ == "__main__":
    asyncio.run(main())
