#!/usr/bin/env python3
"""
–°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ª–æ–≥–∞–º–∏
- –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ª–æ–≥–æ–≤ –≤ –∏—Å—Ç–æ—Ä–∏—é –ø–æ –¥–Ω—è–º
- –ê–≤—Ç–æ–æ—á–∏—Å—Ç–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –ª–æ–≥–æ–≤
- –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –ø–æ —Ç–∏–ø–∞–º –ª–æ–≥–æ–≤
"""

import os
import shutil
import asyncio
from datetime import datetime, timedelta
from pathlib import Path
import logging
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger
from logger import get_logger

class LogManager:
    def __init__(self):
        self.log_dir = Path("logs")
        self.history_dir = Path("logs/history")
        self.main_log = Path("bot.log")

        # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
        self._create_directories()

        # –õ–æ–≥–≥–µ—Ä –¥–ª—è —Å–∞–º–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ª–æ–≥–æ–≤
        self.logger = get_logger('main')

        # –§–∞–π–ª—ã –ª–æ–≥–æ–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        self.log_files = {
            'main': self.main_log,
            'database': self.log_dir / 'database.log',
            'generation': self.log_dir / 'generation.log',
            'keyboards': self.log_dir / 'keyboards.log',
            'api': self.log_dir / 'api.log',
            'payments': self.log_dir / 'payments.log',
            'errors': self.log_dir / 'errors.log'
        }

        # –ü–æ–¥–¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏
        self.history_subdirs = {
            'main': self.history_dir / 'main',
            'database': self.history_dir / 'database',
            'generation': self.history_dir / 'generation',
            'keyboards': self.history_dir / 'keyboards',
            'api': self.history_dir / 'api',
            'payments': self.history_dir / 'payments',
            'errors': self.history_dir / 'errors'
        }

    def _create_directories(self):
        """–°–æ–∑–¥–∞–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏"""
        directories = [
            self.log_dir,
            self.history_dir,
            self.history_dir / 'main',
            self.history_dir / 'database',
            self.history_dir / 'generation',
            self.history_dir / 'keyboards',
            self.history_dir / 'api',
            self.history_dir / 'payments',
            self.history_dir / 'errors'
        ]

        for directory in directories:
            directory.mkdir(parents=True, exist_ok=True)

    def _get_history_filename(self, log_type: str) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏–º—è —Ñ–∞–π–ª–∞ –¥–ª—è –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–æ–≥–æ –ª–æ–≥–∞"""
        today = datetime.now().strftime('%Y-%m-%d')
        return f"{log_type}_{today}.log"

    def _archive_log_file(self, log_type: str, source_path: Path) -> bool:
        """–ê—Ä—Ö–∏–≤–∏—Ä—É–µ—Ç —Ñ–∞–π–ª –ª–æ–≥–∞ –≤ –∏—Å—Ç–æ—Ä–∏—é"""
        try:
            if not source_path.exists():
                return False

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
            file_size = source_path.stat().st_size
            if file_size == 0:
                return False

            # –°–æ–∑–¥–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏
            history_filename = self._get_history_filename(log_type)
            history_path = self.history_subdirs[log_type] / history_filename

            # –ï—Å–ª–∏ —Ñ–∞–π–ª –∏—Å—Ç–æ—Ä–∏–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –∫ –Ω–µ–º—É
            if history_path.exists():
                # –ß–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
                with open(source_path, 'r', encoding='utf-8') as f:
                    content = f.read()

                # –î–æ–±–∞–≤–ª—è–µ–º –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É —Ñ–∞–π–ª—É –∏—Å—Ç–æ—Ä–∏–∏
                with open(history_path, 'a', encoding='utf-8') as f:
                    f.write(f"\n{'='*80}\n")
                    f.write(f"–ê–†–•–ò–í–ê–¶–ò–Ø: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n")
                    f.write(f"{'='*80}\n")
                    f.write(content)
            else:
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ñ–∞–π–ª –∏—Å—Ç–æ—Ä–∏–∏
                shutil.copy2(source_path, history_path)

            self.logger.info(f"–ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω –ª–æ–≥ {log_type}: {source_path} -> {history_path}")
            return True

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏—è –ª–æ–≥–∞ {log_type}: {e}")
            return False

    def _clear_log_file(self, log_type: str, source_path: Path) -> bool:
        """–û—á–∏—â–∞–µ—Ç —Ñ–∞–π–ª –ª–æ–≥–∞"""
        try:
            if not source_path.exists():
                return False

                        # –û—á–∏—â–∞–µ–º —Ñ–∞–π–ª, —Å–æ—Ö—Ä–∞–Ω—è—è —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å—Ç—Ä–æ–∫
            try:
                with open(source_path, 'r', encoding='utf-8') as f:
                    lines = f.readlines()
            except UnicodeDecodeError:
                try:
                    with open(source_path, 'r', encoding='latin-1') as f:
                        lines = f.readlines()
                except Exception as e:
                    self.logger.error(f"–ù–µ —É–¥–∞–µ—Ç—Å—è –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª {source_path}: {e}")
                    return False

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å—Ç—Ä–æ–∫
            if len(lines) > 10:
                with open(source_path, 'w', encoding='utf-8') as f:
                    f.write(f"# –§–∞–π–ª –æ—á–∏—â–µ–Ω {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n")
                    f.write(f"# –°–æ—Ö—Ä–∞–Ω–µ–Ω—ã –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å—Ç—Ä–æ–∫ –∏–∑ {len(lines)} —Å—Ç—Ä–æ–∫\n")
                    f.write("="*80 + "\n")
                    for line in lines[-10:]:
                        f.write(line)
            else:
                # –ï—Å–ª–∏ —Å—Ç—Ä–æ–∫ –º–µ–Ω—å—à–µ 10, –ø—Ä–æ—Å—Ç–æ –æ—á–∏—â–∞–µ–º
                with open(source_path, 'w', encoding='utf-8') as f:
                    f.write(f"# –§–∞–π–ª –æ—á–∏—â–µ–Ω {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n")

            self.logger.info(f"–û—á–∏—â–µ–Ω –ª–æ–≥ {log_type}: {source_path}")
            return True

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ª–æ–≥–∞ {log_type}: {e}")
            return False

    def process_log_file(self, log_type: str):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–¥–∏–Ω —Ñ–∞–π–ª –ª–æ–≥–∞: –∞—Ä—Ö–∏–≤–∏—Ä—É–µ—Ç –∏ –æ—á–∏—â–∞–µ—Ç"""
        source_path = self.log_files[log_type]

        if not source_path.exists():
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
        file_size = source_path.stat().st_size
        if file_size == 0:
            return

        # –ê—Ä—Ö–∏–≤–∏—Ä—É–µ–º —Ñ–∞–π–ª
        archived = self._archive_log_file(log_type, source_path)

        if archived:
            # –û—á–∏—â–∞–µ–º —Ñ–∞–π–ª
            self._clear_log_file(log_type, source_path)

    def process_all_logs(self):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ —Ñ–∞–π–ª—ã –ª–æ–≥–æ–≤"""
        self.logger.info("–ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É –≤—Å–µ—Ö –ª–æ–≥–æ–≤...")

        processed_count = 0
        for log_type, source_path in self.log_files.items():
            try:
                self.process_log_file(log_type)
                processed_count += 1
            except Exception as e:
                self.logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ª–æ–≥–∞ {log_type}: {e}")

        self.logger.info(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –ª–æ–≥–æ–≤: {processed_count}")

    def cleanup_old_history(self, days_to_keep: int = 30):
        """–£–¥–∞–ª—è–µ—Ç —Å—Ç–∞—Ä—ã–µ —Ñ–∞–π–ª—ã –∏—Å—Ç–æ—Ä–∏–∏"""
        self.logger.info(f"–ù–∞—á–∏–Ω–∞—é –æ—á–∏—Å—Ç–∫—É –∏—Å—Ç–æ—Ä–∏–∏ —Å—Ç–∞—Ä—à–µ {days_to_keep} –¥–Ω–µ–π...")

        cutoff_date = datetime.now() - timedelta(days=days_to_keep)
        deleted_count = 0

        for log_type, history_dir in self.history_subdirs.items():
            if not history_dir.exists():
                continue

            for history_file in history_dir.glob("*.log"):
                try:
                    # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É –∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
                    filename = history_file.stem
                    if '_' in filename:
                        date_str = filename.split('_')[-1]
                        try:
                            file_date = datetime.strptime(date_str, '%Y-%m-%d')
                            if file_date < cutoff_date:
                                history_file.unlink()
                                deleted_count += 1
                                self.logger.info(f"–£–¥–∞–ª–µ–Ω —Å—Ç–∞—Ä—ã–π —Ñ–∞–π–ª –∏—Å—Ç–æ—Ä–∏–∏: {history_file}")
                        except ValueError:
                            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–µ—Ç—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –¥–∞—Ç—É, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
                            continue
                except Exception as e:
                    self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ {history_file}: {e}")

        self.logger.info(f"–£–¥–∞–ª–µ–Ω–æ —Å—Ç–∞—Ä—ã—Ö —Ñ–∞–π–ª–æ–≤ –∏—Å—Ç–æ—Ä–∏–∏: {deleted_count}")

    def get_history_stats(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å—Ç–æ—Ä–∏–∏ –ª–æ–≥–æ–≤"""
        print("üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ò–°–¢–û–†–ò–ò –õ–û–ì–û–í")
        print("=" * 60)

        total_files = 0
        total_size = 0

        for log_type, history_dir in self.history_subdirs.items():
            if not history_dir.exists():
                continue

            files = list(history_dir.glob("*.log"))
            if not files:
                continue

            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä
            dir_size = sum(f.stat().st_size for f in files)
            total_files += len(files)
            total_size += dir_size

            print(f"\n{log_type.upper()}:")
            print(f"  –§–∞–π–ª–æ–≤: {len(files)}")
            print(f"  –†–∞–∑–º–µ—Ä: {dir_size / (1024*1024):.2f} MB")

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ñ–∞–π–ª—ã
            recent_files = sorted(files, key=lambda x: x.stat().st_mtime, reverse=True)[:5]
            print(f"  –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ñ–∞–π–ª—ã:")
            for f in recent_files:
                modified = datetime.fromtimestamp(f.stat().st_mtime)
                size = f.stat().st_size / 1024  # KB
                print(f"    {f.name} ({size:.1f} KB, {modified.strftime('%Y-%m-%d')})")

        print(f"\n–û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        print(f"  –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤: {total_files}")
        print(f"  –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä: {total_size / (1024*1024):.2f} MB")

    async def start_scheduler(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á"""
        scheduler = AsyncIOScheduler()

        # –û—á–∏—Å—Ç–∫–∞ –ª–æ–≥–æ–≤ –∫–∞–∂–¥—ã–π —á–∞—Å
        scheduler.add_job(
            self.process_all_logs,
            CronTrigger(minute=0),  # –ö–∞–∂–¥—ã–π —á–∞—Å –≤ 00 –º–∏–Ω—É—Ç
            id='process_logs',
            name='–û—á–∏—Å—Ç–∫–∞ –ª–æ–≥–æ–≤ –∫–∞–∂–¥—ã–π —á–∞—Å'
        )

        # –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä–æ–π –∏—Å—Ç–æ—Ä–∏–∏ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 2:00
        scheduler.add_job(
            self.cleanup_old_history,
            CronTrigger(hour=2, minute=0),  # –ö–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 02:00
            id='cleanup_history',
            name='–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä–æ–π –∏—Å—Ç–æ—Ä–∏–∏'
        )

        scheduler.start()

        self.logger.info("–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –ª–æ–≥–æ–≤ –∑–∞–ø—É—â–µ–Ω")
        self.logger.info("–û—á–∏—Å—Ç–∫–∞ –ª–æ–≥–æ–≤: –∫–∞–∂–¥—ã–π —á–∞—Å –≤ 00 –º–∏–Ω—É—Ç")
        self.logger.info("–û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏: –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 02:00")

        try:
            # –î–µ—Ä–∂–∏–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω–Ω—ã–º
            while True:
                await asyncio.sleep(60)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
        except KeyboardInterrupt:
            scheduler.shutdown()
            self.logger.info("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –ª–æ–≥–æ–≤ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    import argparse

    parser = argparse.ArgumentParser(description='–ú–µ–Ω–µ–¥–∂–µ—Ä –ª–æ–≥–æ–≤')
    parser.add_argument('--process', action='store_true', help='–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤—Å–µ –ª–æ–≥–∏ —Å–µ–π—á–∞—Å')
    parser.add_argument('--cleanup-history', type=int, metavar='DAYS', help='–û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Å—Ç–∞—Ä—à–µ N –¥–Ω–µ–π')
    parser.add_argument('--stats', action='store_true', help='–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å—Ç–æ—Ä–∏–∏')
    parser.add_argument('--start-scheduler', action='store_true', help='–ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫')

    args = parser.parse_args()

    manager = LogManager()

    if args.process:
        print("üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö –ª–æ–≥–æ–≤...")
        manager.process_all_logs()
        print("‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

    elif args.cleanup_history:
        print(f"üóëÔ∏è –û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ —Å—Ç–∞—Ä—à–µ {args.cleanup_history} –¥–Ω–µ–π...")
        manager.cleanup_old_history(args.cleanup_history)
        print("‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

    elif args.stats:
        manager.get_history_stats()

    elif args.start_scheduler:
        print("üöÄ –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –ª–æ–≥–æ–≤...")
        asyncio.run(manager.start_scheduler())

    else:
        print("üìã –ú–µ–Ω–µ–¥–∂–µ—Ä –ª–æ–≥–æ–≤")
        print("=" * 40)
        print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:")
        print("  --process              - –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤—Å–µ –ª–æ–≥–∏ —Å–µ–π—á–∞—Å")
        print("  --cleanup-history N    - –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Å—Ç–∞—Ä—à–µ N –¥–Ω–µ–π")
        print("  --stats                - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å—Ç–æ—Ä–∏–∏")
        print("  --start-scheduler      - –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫")
        print()
        print("–ü—Ä–∏–º–µ—Ä—ã:")
        print("  python3 log_manager.py --process")
        print("  python3 log_manager.py --cleanup-history 30")
        print("  python3 log_manager.py --stats")
        print("  python3 log_manager.py --start-scheduler")

if __name__ == "__main__":
    main()
