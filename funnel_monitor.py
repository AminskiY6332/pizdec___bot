#!/usr/bin/env python3
"""
–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤–æ—Ä–æ–Ω–∫–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –∞–Ω–∞–ª–∏—Ç–∏–∫—É
"""

import asyncio
import sys
import os
import aiosqlite
from datetime import datetime, timedelta
from typing import Dict, Any, List, Optional
import json
import time

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–æ–≤
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
from onboarding_config import get_day_config, get_message_text, has_user_purchases, ONBOARDING_FUNNEL, MESSAGE_TEXTS

class RealTimeFunnelMonitor:
    """–ú–æ–Ω–∏—Ç–æ—Ä –≤–æ—Ä–æ–Ω–∫–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏"""
    
    def __init__(self, database_path: str):
        self.database_path = database_path
        self.monitoring_stats = {
            'start_time': datetime.now(),
            'welcome_messages_sent': 0,
            'reminders_sent': 0,
            'users_processed': 0,
            'users_filtered': 0,
            'errors': [],
            'message_log': [],
            'hourly_stats': {}
        }
    
    async def get_current_stats(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        try:
            async with aiosqlite.connect(self.database_path) as conn:
                conn.row_factory = aiosqlite.Row
                c = await conn.cursor()
                
                # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                await c.execute("SELECT COUNT(*) as total FROM users")
                total_users = (await c.fetchone())['total']
                
                # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –±–µ–∑ –ø–æ–∫—É–ø–æ–∫
                await c.execute("""
                    SELECT COUNT(*) as count
                    FROM users u
                    WHERE u.user_id NOT IN (
                        SELECT user_id FROM payments WHERE status = 'succeeded'
                    )
                """)
                users_without_purchases = (await c.fetchone())['count']
                
                # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
                await c.execute("SELECT COUNT(*) as count FROM users WHERE welcome_message_sent = 1")
                users_with_welcome = (await c.fetchone())['count']
                
                # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏
                await c.execute("SELECT COUNT(*) as count FROM users WHERE last_reminder_type IS NOT NULL")
                users_with_reminders = (await c.fetchone())['count']
                
                # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
                await c.execute("""
                    SELECT last_reminder_type, COUNT(*) as count
                    FROM users
                    WHERE last_reminder_type IS NOT NULL
                    GROUP BY last_reminder_type
                """)
                reminder_stats = {row['last_reminder_type']: row['count'] for row in await c.fetchall()}
                
                # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
                yesterday = datetime.now() - timedelta(days=1)
                await c.execute("""
                    SELECT COUNT(*) as count
                    FROM users
                    WHERE created_at >= ?
                """, (yesterday.strftime('%Y-%m-%d %H:%M:%S'),))
                new_users_24h = (await c.fetchone())['count']
                
                return {
                    'total_users': total_users,
                    'users_without_purchases': users_without_purchases,
                    'users_with_welcome': users_with_welcome,
                    'users_with_reminders': users_with_reminders,
                    'reminder_stats': reminder_stats,
                    'new_users_24h': new_users_24h
                }
                
        except Exception as e:
            self.monitoring_stats['errors'].append(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            return {}
    
    async def simulate_funnel_execution(self):
        """–°–∏–º—É–ª—è—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤–æ—Ä–æ–Ω–∫–∏"""
        print("\nüîÑ –°–ò–ú–£–õ–Ø–¶–ò–Ø –í–´–ü–û–õ–ù–ï–ù–ò–Ø –í–û–†–û–ù–ö–ò")
        print("="*50)
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            async with aiosqlite.connect(self.database_path) as conn:
                conn.row_factory = aiosqlite.Row
                c = await conn.cursor()
                
                await c.execute("""
                    SELECT user_id, first_name, username, created_at
                    FROM users
                    WHERE welcome_message_sent = 0
                    AND first_purchase = 1
                    AND created_at <= datetime('now', '-1 hour')
                    AND is_blocked = 0
                    AND user_id NOT IN (
                        SELECT user_id FROM payments WHERE status = 'succeeded'
                    )
                """)
                
                welcome_users = await c.fetchall()
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
            async with aiosqlite.connect(self.database_path) as conn:
                conn.row_factory = aiosqlite.Row
                c = await conn.cursor()
                
                await c.execute("""
                    SELECT user_id, first_name, username, created_at, last_reminder_type
                    FROM users
                    WHERE is_blocked = 0
                    AND user_id NOT IN (
                        SELECT user_id FROM payments WHERE status = 'succeeded'
                    )
                    AND created_at IS NOT NULL
                """)
                
                reminder_users = await c.fetchall()
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            welcome_sent = 0
            for user in welcome_users:
                user_id = user['user_id']
                first_name = user['first_name']
                
                has_purchases = await has_user_purchases(user_id, self.database_path)
                if not has_purchases:
                    message_data = get_message_text("welcome", first_name)
                    
                    self.monitoring_stats['message_log'].append({
                        'timestamp': datetime.now().isoformat(),
                        'user_id': user_id,
                        'user_name': first_name,
                        'message_type': 'welcome',
                        'text': message_data['text'][:100] + "...",
                        'button': message_data['button_text'],
                        'action': message_data['callback_data']
                    })
                    
                    print(f"üì§ Welcome –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} ({first_name})")
                    welcome_sent += 1
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
            reminders_sent = 0
            current_time = datetime.now()
            
            for user in reminder_users:
                user_id = user['user_id']
                first_name = user['first_name']
                created_at = user['created_at']
                last_reminder_type = user['last_reminder_type']
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
                is_blocked = await self._is_user_blocked(user_id)
                if is_blocked:
                    continue
                
                has_purchases = await has_user_purchases(user_id, self.database_path)
                if has_purchases:
                    continue
                
                # –í—ã—á–∏—Å–ª—è–µ–º –¥–Ω–∏ —Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
                try:
                    registration_date = datetime.strptime(created_at, '%Y-%m-%d %H:%M:%S')
                    days_since_registration = (current_time.date() - registration_date.date()).days
                except ValueError:
                    continue
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
                message_type = None
                if days_since_registration == 1 and last_reminder_type != "reminder_day2":
                    message_type = "reminder_day2"
                elif days_since_registration == 2 and last_reminder_type != "reminder_day3":
                    message_type = "reminder_day3"
                elif days_since_registration == 3 and last_reminder_type != "reminder_day4":
                    message_type = "reminder_day4"
                elif days_since_registration >= 4 and last_reminder_type != "reminder_day5":
                    message_type = "reminder_day5"
                
                if message_type:
                    message_data = get_message_text(message_type, first_name)
                    
                    self.monitoring_stats['message_log'].append({
                        'timestamp': datetime.now().isoformat(),
                        'user_id': user_id,
                        'user_name': first_name,
                        'message_type': message_type,
                        'text': message_data['text'][:100] + "...",
                        'button': message_data['button_text'],
                        'action': message_data['callback_data'],
                        'days_since_registration': days_since_registration
                    })
                    
                    print(f"üì§ {message_type} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} ({first_name})")
                    reminders_sent += 1
            
            self.monitoring_stats['welcome_messages_sent'] += welcome_sent
            self.monitoring_stats['reminders_sent'] += reminders_sent
            self.monitoring_stats['users_processed'] = len(welcome_users) + len(reminder_users)
            
            print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–∏–º—É–ª—è—Ü–∏–∏:")
            print(f"  ‚úÖ Welcome —Å–æ–æ–±—â–µ–Ω–∏–π: {welcome_sent}")
            print(f"  ‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: {reminders_sent}")
            print(f"  üìã –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(welcome_users) + len(reminder_users)}")
            
            return welcome_sent + reminders_sent
            
        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞ —Å–∏–º—É–ª—è—Ü–∏–∏ –≤–æ—Ä–æ–Ω–∫–∏: {e}"
            self.monitoring_stats['errors'].append(error_msg)
            print(f"‚ùå {error_msg}")
            return 0
    
    async def _is_user_blocked(self, user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            async with aiosqlite.connect(self.database_path) as conn:
                c = await conn.cursor()
                await c.execute("SELECT is_blocked FROM users WHERE user_id = ?", (user_id,))
                result = await c.fetchone()
                return bool(result[0]) if result else False
        except Exception as e:
            self.monitoring_stats['errors'].append(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏: {e}")
            return False
    
    def generate_live_report(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∂–∏–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        print("\n" + "="*80)
        print("üìä –ñ–ò–í–û–ô –û–¢–ß–ï–¢ –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê –í–û–†–û–ù–ö–ò")
        print("="*80)
        
        # –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã
        uptime = datetime.now() - self.monitoring_stats['start_time']
        print(f"‚è±Ô∏è –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {uptime}")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
        total_messages = self.monitoring_stats['welcome_messages_sent'] + self.monitoring_stats['reminders_sent']
        print(f"üì§ –í—Å–µ–≥–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {total_messages}")
        print(f"  üëã Welcome: {self.monitoring_stats['welcome_messages_sent']}")
        print(f"  üì¨ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {self.monitoring_stats['reminders_sent']}")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        print(f"üë• –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {self.monitoring_stats['users_processed']}")
        print(f"‚è≠Ô∏è –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {self.monitoring_stats['users_filtered']}")
        
        # –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        if self.monitoring_stats['message_log']:
            print(f"\nüìã –ü–û–°–õ–ï–î–ù–ò–ï –°–û–û–ë–©–ï–ù–ò–Ø ({len(self.monitoring_stats['message_log'][-5:])}):")
            for msg in self.monitoring_stats['message_log'][-5:]:
                timestamp = datetime.fromisoformat(msg['timestamp']).strftime('%H:%M:%S')
                print(f"  [{timestamp}] {msg['message_type']} ‚Üí {msg['user_name']} (ID: {msg['user_id']})")
        
        # –û—à–∏–±–∫–∏
        if self.monitoring_stats['errors']:
            print(f"\n‚ùå –û–®–ò–ë–ö–ò ({len(self.monitoring_stats['errors'])}):")
            for error in self.monitoring_stats['errors'][-3:]:  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 3 –æ—à–∏–±–∫–∏
                print(f"  ‚Ä¢ {error}")
        
        # –ê–Ω–∞–ª–∏–∑ —Ü–µ–Ω
        if self.monitoring_stats['message_log']:
            prices = []
            for msg in self.monitoring_stats['message_log']:
                if '‚ÇΩ' in msg['text']:
                    try:
                        price = int(msg['text'].split('‚ÇΩ')[0].split()[-1])
                        prices.append(price)
                    except:
                        pass
            
            if prices:
                print(f"\nüí∞ –ê–ù–ê–õ–ò–ó –¶–ï–ù:")
                print(f"  üìä –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞: {sum(prices) / len(prices):.0f}‚ÇΩ")
                print(f"  üìà –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞: {max(prices)}‚ÇΩ")
                print(f"  üìâ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞: {min(prices)}‚ÇΩ")
                print(f"  üìã –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π —Å —Ü–µ–Ω–∞–º–∏: {len(prices)}")
    
    async def run_continuous_monitoring(self, interval_seconds: int = 60):
        """–ó–∞–ø—É—Å–∫ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        print(f"üîç –ó–ê–ü–£–°–ö –ù–ï–ü–†–ï–†–´–í–ù–û–ì–û –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê (–∏–Ω—Ç–µ—Ä–≤–∞–ª: {interval_seconds}—Å)")
        print("="*60)
        
        try:
            while True:
                print(f"\nüïê {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
                print("-" * 40)
                
                # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                current_stats = await self.get_current_stats()
                if current_stats:
                    print(f"üìä –¢–µ–∫—É—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
                    print(f"  üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {current_stats['total_users']}")
                    print(f"  üí≥ –ë–µ–∑ –ø–æ–∫—É–ø–æ–∫: {current_stats['users_without_purchases']}")
                    print(f"  üëã –° –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ–º: {current_stats['users_with_welcome']}")
                    print(f"  üì¨ –° –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏: {current_stats['users_with_reminders']}")
                    print(f"  üÜï –ù–æ–≤—ã—Ö –∑–∞ 24—á: {current_stats['new_users_24h']}")
                
                # –°–∏–º—É–ª–∏—Ä—É–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≤–æ—Ä–æ–Ω–∫–∏
                messages_sent = await self.simulate_funnel_execution()
                
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
                self.generate_live_report()
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—á–∞—Å–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                current_hour = datetime.now().strftime('%Y-%m-%d %H:00')
                if current_hour not in self.monitoring_stats['hourly_stats']:
                    self.monitoring_stats['hourly_stats'][current_hour] = {
                        'messages_sent': 0,
                        'users_processed': 0,
                        'errors': 0
                    }
                
                self.monitoring_stats['hourly_stats'][current_hour]['messages_sent'] += messages_sent
                self.monitoring_stats['hourly_stats'][current_hour]['users_processed'] += self.monitoring_stats['users_processed']
                
                print(f"\n‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ {interval_seconds} —Å–µ–∫—É–Ω–¥ –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏...")
                await asyncio.sleep(interval_seconds)
                
        except KeyboardInterrupt:
            print("\nüõë –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        except Exception as e:
            print(f"\n‚ùå –û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
            self.monitoring_stats['errors'].append(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üî¨ –ú–û–ù–ò–¢–û–†–ò–ù–ì –í–û–†–û–ù–ö–ò –í –†–ï–ê–õ–¨–ù–û–ú –í–†–ï–ú–ï–ù–ò")
    print("="*50)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    database_path = "bot_database.db"  # –ü—É—Ç—å –∫ —Ä–µ–∞–ª—å–Ω–æ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    if not os.path.exists(database_path):
        print(f"‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {database_path}")
        print("–°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...")
        database_path = "test_monitor.db"
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –±–∞–∑—É
        async with aiosqlite.connect(database_path) as conn:
            await conn.execute("""
                CREATE TABLE users (
                    user_id INTEGER PRIMARY KEY,
                    first_name TEXT,
                    username TEXT,
                    created_at TEXT,
                    welcome_message_sent INTEGER DEFAULT 0,
                    first_purchase INTEGER DEFAULT 1,
                    is_blocked INTEGER DEFAULT 0,
                    last_reminder_type TEXT,
                    last_reminder_sent TEXT,
                    updated_at TEXT DEFAULT CURRENT_TIMESTAMP
                )
            """)
            
            await conn.execute("""
                CREATE TABLE payments (
                    id INTEGER PRIMARY KEY,
                    user_id INTEGER,
                    amount REAL,
                    status TEXT,
                    created_at TEXT DEFAULT CURRENT_TIMESTAMP,
                    FOREIGN KEY (user_id) REFERENCES users(user_id)
                )
            """)
            
            await conn.commit()
        
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Ç–µ—Å—Ç–æ–≤–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {database_path}")
    
    monitor = RealTimeFunnelMonitor(database_path)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
    await monitor.run_continuous_monitoring(interval_seconds=30)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
    
    return 0

if __name__ == "__main__":
    sys.exit(asyncio.run(main())) 