#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è Git —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥–∞
–°–æ–∑–¥–∞–µ—Ç –≤–µ—Ç–∫–∏, –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç workflow, —Å–æ–∑–¥–∞–µ—Ç —à–∞–±–ª–æ–Ω—ã PR
"""

import os
import subprocess
import json
from pathlib import Path
from typing import List, Dict

class GitStrategyManager:
    def __init__(self, project_root: str = "."):
        self.project_root = Path(project_root)
        self.branches = [
            "refactoring/master-plan",
            "refactoring/stage-0-preparation",
            "refactoring/stage-1-critical-fixes",
            "refactoring/stage-2-architecture",
            "refactoring/stage-3-optimization",
            "refactoring/stage-4-testing",
            "refactoring/stage-5-documentation"
        ]

    def run_git_command(self, command: List[str]) -> tuple:
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å Git –∫–æ–º–∞–Ω–¥—É"""
        try:
            result = subprocess.run(
                command,
                cwd=self.project_root,
                capture_output=True,
                text=True,
                check=True
            )
            return True, result.stdout.strip()
        except subprocess.CalledProcessError as e:
            return False, e.stderr.strip()

    def get_current_branch(self) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é –≤–µ—Ç–∫—É"""
        success, output = self.run_git_command(["git", "branch", "--show-current"])
        return output if success else "unknown"

    def branch_exists(self, branch_name: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –≤–µ—Ç–∫–∏"""
        success, output = self.run_git_command(["git", "branch", "-a"])
        if success:
            return branch_name in output
        return False

    def create_branch(self, branch_name: str, from_branch: str = "main") -> bool:
        """–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –≤–µ—Ç–∫—É"""
        if self.branch_exists(branch_name):
            print(f"‚úÖ –í–µ—Ç–∫–∞ {branch_name} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            return True

        # –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ –±–∞–∑–æ–≤—É—é –≤–µ—Ç–∫—É
        success, _ = self.run_git_command(["git", "checkout", from_branch])
        if not success:
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ –≤–µ—Ç–∫—É {from_branch}")
            return False

        # –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –≤–µ—Ç–∫—É
        success, _ = self.run_git_command(["git", "checkout", "-b", branch_name])
        if success:
            print(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –≤–µ—Ç–∫–∞ {branch_name}")
            return True
        else:
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –≤–µ—Ç–∫—É {branch_name}")
            return False

    def create_all_branches(self):
        """–°–æ–∑–¥–∞—Ç—å –≤—Å–µ –≤–µ—Ç–∫–∏ –¥–ª—è —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥–∞"""
        print("üöÄ –°–æ–∑–¥–∞–Ω–∏–µ –≤–µ—Ç–æ–∫ –¥–ª—è —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥–∞...")

        current_branch = self.get_current_branch()
        print(f"–¢–µ–∫—É—â–∞—è –≤–µ—Ç–∫–∞: {current_branch}")

        # –£–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ –º—ã –Ω–∞ main –∏–ª–∏ develop
        if current_branch not in ["main", "develop"]:
            print("‚ö†Ô∏è –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —Å–æ–∑–¥–∞–≤–∞—Ç—å –≤–µ—Ç–∫–∏ –æ—Ç main –∏–ª–∏ develop")
            response = input("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (y/N): ")
            if response.lower() != 'y':
                return

        base_branch = current_branch
        created_count = 0

        for branch in self.branches:
            if self.create_branch(branch, base_branch):
                created_count += 1

        print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {created_count} –≤–µ—Ç–æ–∫ –∏–∑ {len(self.branches)}")

        # –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –∏—Å—Ö–æ–¥–Ω—É—é –≤–µ—Ç–∫—É
        self.run_git_command(["git", "checkout", current_branch])
        print(f"üîÑ –í–æ–∑–≤—Ä–∞—â–µ–Ω—ã –Ω–∞ –≤–µ—Ç–∫—É {current_branch}")

    def create_github_workflow(self):
        """–°–æ–∑–¥–∞—Ç—å GitHub Actions workflow"""
        workflow_dir = self.project_root / ".github" / "workflows"
        workflow_dir.mkdir(parents=True, exist_ok=True)

        workflow_content = """name: Refactoring Progress Tracker

on:
  push:
    branches: [ main, develop, 'refactoring/**' ]
  pull_request:
    branches: [ main, develop ]

jobs:
  track-progress:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Update progress tracker
      run: |
        python scripts/update_progress.py

    - name: Run code quality checks
      run: |
        python -m flake8 --max-line-length=100 --ignore=E203,W503
        python -m black --check .

    - name: Run tests
      run: |
        python -m pytest --cov=. --cov-report=json

    - name: Commit progress updates
      if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/heads/refactoring/')
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add PROGRESS_TRACKER.md reports/
        git diff --staged --quiet || git commit -m "ü§ñ –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥–∞"
        git push

  code-metrics:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Install analysis tools
      run: |
        pip install radon complexity-report

    - name: Calculate code metrics
      run: |
        echo "## Code Metrics" >> $GITHUB_STEP_SUMMARY
        echo "### Cyclomatic Complexity" >> $GITHUB_STEP_SUMMARY
        radon cc . --average --show-complexity >> $GITHUB_STEP_SUMMARY
        echo "### Maintainability Index" >> $GITHUB_STEP_SUMMARY
        radon mi . >> $GITHUB_STEP_SUMMARY
"""

        workflow_file = workflow_dir / "refactoring.yml"
        try:
            with open(workflow_file, 'w', encoding='utf-8') as f:
                f.write(workflow_content)
            print(f"‚úÖ –°–æ–∑–¥–∞–Ω GitHub workflow: {workflow_file}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è workflow: {e}")

    def create_pr_templates(self):
        """–°–æ–∑–¥–∞—Ç—å —à–∞–±–ª–æ–Ω—ã –¥–ª—è Pull Request"""
        pr_template_dir = self.project_root / ".github" / "pull_request_template"
        pr_template_dir.mkdir(parents=True, exist_ok=True)

        # –û—Å–Ω–æ–≤–Ω–æ–π —à–∞–±–ª–æ–Ω
        main_template = """# üîÑ –†–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥: [–ù–∞–∑–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è]

## üìã –û–ø–∏—Å–∞–Ω–∏–µ
–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ —Ä–∞–º–∫–∞—Ö —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥–∞.

## üéØ –≠—Ç–∞–ø —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥–∞
- [ ] –≠—Ç–∞–ø 0: –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞
- [ ] –≠—Ç–∞–ø 1: –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
- [ ] –≠—Ç–∞–ø 2: –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã–µ —É–ª—É—á—à–µ–Ω–∏—è
- [ ] –≠—Ç–∞–ø 3: –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è
- [ ] –≠—Ç–∞–ø 4: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
- [ ] –≠—Ç–∞–ø 5: –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è

## ‚úÖ –ß–µ–∫–ª–∏—Å—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π
- [ ] –ö–æ–¥ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –Ω–æ–≤–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–µ
- [ ] –î–æ–±–∞–≤–ª–µ–Ω—ã/–æ–±–Ω–æ–≤–ª–µ–Ω—ã —Ç–µ—Å—Ç—ã
- [ ] –û–±–Ω–æ–≤–ª–µ–Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è
- [ ] –ü—Ä–æ–≤–µ—Ä–µ–Ω–∞ –æ–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å
- [ ] –ù–µ—Ç –Ω–∞—Ä—É—à–µ–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏

## üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
- [ ] Unit —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã
- [ ] Integration —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã
- [ ] –†—É—á–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ
- [ ] –ü—Ä–æ–≤–µ—Ä–µ–Ω–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å

## üìä –ú–µ—Ç—Ä–∏–∫–∏
- –£–º–µ–Ω—å—à–µ–Ω–∏–µ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–¥–∞: X –º–µ—Å—Ç
- –£–ª—É—á—à–µ–Ω–∏–µ –ø–æ–∫—Ä—ã—Ç–∏—è —Ç–µ—Å—Ç–∞–º–∏: +X%
- –£–º–µ–Ω—å—à–µ–Ω–∏–µ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏: -X –µ–¥–∏–Ω–∏—Ü

## üîó –°–≤—è–∑–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
Closes #[–Ω–æ–º–µ—Ä issue]
Related to #[–Ω–æ–º–µ—Ä issue]

## üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç—ã (–µ—Å–ª–∏ –ø—Ä–∏–º–µ–Ω–∏–º–æ)
[–î–æ–±–∞–≤–∏—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç—ã –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ UI]

## üö® –†–∏—Å–∫–∏
- [ ] –ù–µ—Ç —Ä–∏—Å–∫–æ–≤
- [ ] –ù–∏–∑–∫–∏–π —Ä–∏—Å–∫: [–æ–ø–∏—Å–∞–Ω–∏–µ]
- [ ] –°—Ä–µ–¥–Ω–∏–π —Ä–∏—Å–∫: [–æ–ø–∏—Å–∞–Ω–∏–µ]
- [ ] –í—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫: [–æ–ø–∏—Å–∞–Ω–∏–µ]

## üìù –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∑–∞–º–µ—Ç–∫–∏
[–õ—é–±–∞—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è —Ä–µ–≤—å—é–µ—Ä–æ–≤]
"""

        # –®–∞–±–ª–æ–Ω –¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π
        critical_template = """# üî¥ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è: [–ù–∞–∑–≤–∞–Ω–∏–µ]

## üö® –ö—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç—å
–≠—Ç–æ PR —Å–æ–¥–µ—Ä–∂–∏—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã –æ—Å–æ–±–µ–Ω–Ω–æ —Ç—â–∞—Ç–µ–ª—å–Ω–æ.

## üéØ –¶–µ–ª—å
- [ ] –£—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–¥–∞
- [ ] –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º
- [ ] –£–ª—É—á—à–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
- [ ] –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–≥–æ–≤

## üìã –ò–∑–º–µ–Ω–µ–Ω–∏—è
### –£–¥–∞–ª–µ–Ω–Ω—ã–π –∫–æ–¥
- [–°–ø–∏—Å–æ–∫ —É–¥–∞–ª–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤/—Ñ—É–Ω–∫—Ü–∏–π]

### –ù–æ–≤—ã–π –∫–æ–¥
- [–°–ø–∏—Å–æ–∫ –Ω–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤/—Ñ—É–Ω–∫—Ü–∏–π]

### –ò–∑–º–µ–Ω–µ–Ω–Ω—ã–π –∫–æ–¥
- [–°–ø–∏—Å–æ–∫ –∏–∑–º–µ–Ω–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤/—Ñ—É–Ω–∫—Ü–∏–π]

## ‚ö†Ô∏è –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã
- [–°–ø–∏—Å–æ–∫ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º]

## üîÑ –ü–ª–∞–Ω –æ—Ç–∫–∞—Ç–∞
–í —Å–ª—É—á–∞–µ –ø—Ä–æ–±–ª–µ–º:
1. [–®–∞–≥ 1 –æ—Ç–∫–∞—Ç–∞]
2. [–®–∞–≥ 2 –æ—Ç–∫–∞—Ç–∞]

## ‚úÖ –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
- [ ] –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—Ö–æ–¥—è—Ç
- [ ] –ù–µ—Ç —Ä–µ–≥—Ä–µ—Å—Å–∏–∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
- [ ] –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –Ω–µ —É—Ö—É–¥—à–∏–ª–∞—Å—å
- [ ] –ö–æ–¥ —Ä–µ–≤—å—é –æ—Ç 2+ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
"""

        try:
            with open(pr_template_dir / "refactoring.md", 'w', encoding='utf-8') as f:
                f.write(main_template)

            with open(pr_template_dir / "critical.md", 'w', encoding='utf-8') as f:
                f.write(critical_template)

            print(f"‚úÖ –°–æ–∑–¥–∞–Ω—ã —à–∞–±–ª–æ–Ω—ã PR: {pr_template_dir}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —à–∞–±–ª–æ–Ω–æ–≤ PR: {e}")

    def create_pre_commit_config(self):
        """–°–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é pre-commit hooks"""
        pre_commit_config = """repos:
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v4.4.0
    hooks:
      - id: trailing-whitespace
      - id: end-of-file-fixer
      - id: check-yaml
      - id: check-added-large-files
      - id: check-merge-conflict
      - id: debug-statements

  - repo: https://github.com/psf/black
    rev: 23.1.0
    hooks:
      - id: black
        language_version: python3
        args: [--line-length=100]

  - repo: https://github.com/pycqa/flake8
    rev: 6.0.0
    hooks:
      - id: flake8
        args: [--max-line-length=100, --ignore=E203,W503]

  - repo: https://github.com/pycqa/isort
    rev: 5.12.0
    hooks:
      - id: isort
        args: [--profile=black, --line-length=100]

  - repo: https://github.com/pre-commit/mirrors-mypy
    rev: v1.0.1
    hooks:
      - id: mypy
        additional_dependencies: [types-all]
        args: [--ignore-missing-imports]

  - repo: local
    hooks:
      - id: update-progress
        name: Update refactoring progress
        entry: python scripts/update_progress.py
        language: system
        always_run: true
        pass_filenames: false
"""

        config_file = self.project_root / ".pre-commit-config.yaml"
        try:
            with open(config_file, 'w', encoding='utf-8') as f:
                f.write(pre_commit_config)
            print(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è pre-commit: {config_file}")

            # –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å pre-commit hooks
            success, _ = self.run_git_command(["pre-commit", "install"])
            if success:
                print("‚úÖ Pre-commit hooks —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
            else:
                print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å pre-commit hooks (–≤–æ–∑–º–æ–∂–Ω–æ, –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω pre-commit)")

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è pre-commit –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")

    def create_gitignore_updates(self):
        """–û–±–Ω–æ–≤–∏—Ç—å .gitignore –¥–ª—è —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥–∞"""
        gitignore_additions = """
# Refactoring specific
reports/
*.coverage
coverage.json
.coverage
htmlcov/
.pytest_cache/
.mypy_cache/
.ruff_cache/

# Temporary refactoring files
*.tmp
*.backup
refactoring_*.log
"""

        gitignore_file = self.project_root / ".gitignore"
        try:
            # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –µ—Å—Ç—å –ª–∏ —É–∂–µ —ç—Ç–∏ –∑–∞–ø–∏—Å–∏
            existing_content = ""
            if gitignore_file.exists():
                with open(gitignore_file, 'r', encoding='utf-8') as f:
                    existing_content = f.read()

            if "# Refactoring specific" not in existing_content:
                with open(gitignore_file, 'a', encoding='utf-8') as f:
                    f.write(gitignore_additions)
                print("‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω .gitignore –¥–ª—è —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥–∞")
            else:
                print("‚úÖ .gitignore —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥–∞")

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è .gitignore: {e}")

    def setup_git_strategy(self):
        """–ü–æ–ª–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ Git —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
        print("üöÄ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Git —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –¥–ª—è —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥–∞...")

        # 1. –°–æ–∑–¥–∞—Ç—å –≤—Å–µ –≤–µ—Ç–∫–∏
        self.create_all_branches()

        # 2. –°–æ–∑–¥–∞—Ç—å GitHub workflow
        self.create_github_workflow()

        # 3. –°–æ–∑–¥–∞—Ç—å —à–∞–±–ª–æ–Ω—ã PR
        self.create_pr_templates()

        # 4. –ù–∞—Å—Ç—Ä–æ–∏—Ç—å pre-commit hooks
        self.create_pre_commit_config()

        # 5. –û–±–Ω–æ–≤–∏—Ç—å .gitignore
        self.create_gitignore_updates()

        print("‚úÖ Git —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞!")
        print("\nüìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
        print("1. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ pre-commit: pip install pre-commit")
        print("2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: pre-commit install")
        print("3. –°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—ã–π –∫–æ–º–º–∏—Ç –≤ –≤–µ—Ç–∫–µ refactoring/master-plan")
        print("4. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ GitHub —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π")

    def show_branch_status(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –≤—Å–µ—Ö –≤–µ—Ç–æ–∫ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥–∞"""
        print("üìä –°—Ç–∞—Ç—É—Å –≤–µ—Ç–æ–∫ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥–∞:")
        print("-" * 60)

        for branch in self.branches:
            exists = "‚úÖ" if self.branch_exists(branch) else "‚ùå"
            print(f"{exists} {branch}")

        current = self.get_current_branch()
        print(f"\nüîÑ –¢–µ–∫—É—â–∞—è –≤–µ—Ç–∫–∞: {current}")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    import argparse

    parser = argparse.ArgumentParser(description="–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Git —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –¥–ª—è —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥–∞")
    parser.add_argument("--setup", action="store_true", help="–ü–æ–ª–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ Git —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏")
    parser.add_argument("--branches", action="store_true", help="–°–æ–∑–¥–∞—Ç—å —Ç–æ–ª—å–∫–æ –≤–µ—Ç–∫–∏")
    parser.add_argument("--status", action="store_true", help="–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –≤–µ—Ç–æ–∫")
    parser.add_argument("--workflow", action="store_true", help="–°–æ–∑–¥–∞—Ç—å —Ç–æ–ª—å–∫–æ GitHub workflow")
    parser.add_argument("--project-root", default=".", help="–ö–æ—Ä–Ω–µ–≤–∞—è –ø–∞–ø–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞")

    args = parser.parse_args()

    manager = GitStrategyManager(args.project_root)

    if args.setup:
        manager.setup_git_strategy()
    elif args.branches:
        manager.create_all_branches()
    elif args.status:
        manager.show_branch_status()
    elif args.workflow:
        manager.create_github_workflow()
    else:
        print("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ --help –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥")
        manager.show_branch_status()

if __name__ == "__main__":
    main()
