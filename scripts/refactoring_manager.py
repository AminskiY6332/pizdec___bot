#!/usr/bin/env python3
"""
–ì–ª–∞–≤–Ω—ã–π —Å–∫—Ä–∏–ø—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ–º —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥–∞
–û–±—ä–µ–¥–∏–Ω—è–µ—Ç –≤—Å–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –µ–¥–∏–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
"""

import os
import sys
import subprocess
import json
from datetime import datetime
from pathlib import Path
from typing import Dict, List, Optional

# –î–æ–±–∞–≤–∏—Ç—å –ø—É—Ç—å –∫ —Å–∫—Ä–∏–ø—Ç–∞–º
sys.path.append(str(Path(__file__).parent))

from update_progress import ProgressTracker
from git_strategy import GitStrategyManager
from generate_report import ReportGenerator

class RefactoringManager:
    def __init__(self, project_root: str = "."):
        self.project_root = Path(project_root)
        self.progress_tracker = ProgressTracker(project_root)
        self.git_manager = GitStrategyManager(project_root)
        self.report_generator = ReportGenerator(project_root)

        # –°–æ–∑–¥–∞—Ç—å –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–∞–ø–∫–∏
        (self.project_root / "scripts").mkdir(exist_ok=True)
        (self.project_root / "reports").mkdir(exist_ok=True)
        (self.project_root / "logs").mkdir(exist_ok=True)

    def show_status(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –ø—Ä–æ–µ–∫—Ç–∞ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥–∞"""
        print("üöÄ –°–¢–ê–¢–£–° –ü–†–û–ï–ö–¢–ê –†–ï–§–ê–ö–¢–û–†–ò–ù–ì–ê")
        print("=" * 50)

        # Git —Å—Ç–∞—Ç—É—Å
        print("\nüìä Git —Å—Ç–∞—Ç—É—Å:")
        self.git_manager.show_branch_status()

        # –ü—Ä–æ–≥—Ä–µ—Å—Å
        print("\nüìà –ü—Ä–æ–≥—Ä–µ—Å—Å:")
        git_info = self.progress_tracker.get_git_info()
        codebase_stats = self.progress_tracker.analyze_codebase()
        stage_progress = self.progress_tracker.calculate_stage_progress()

        total_completed = sum(stage["completed"] for stage in stage_progress.values())
        total_tasks = sum(stage["total"] for stage in stage_progress.values())
        overall_progress = (total_completed / total_tasks * 100) if total_tasks > 0 else 0

        print(f"–û–±—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å: {overall_progress:.1f}% ({total_completed}/{total_tasks} –∑–∞–¥–∞—á)")

        # –ú–µ—Ç—Ä–∏–∫–∏
        print(f"\nüìä –ö–ª—é—á–µ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏:")
        print(f"- main.py: {codebase_stats['main_py_lines']} —Å—Ç—Ä–æ–∫ (—Ü–µ–ª—å: <300)")
        print(f"- database.py: {codebase_stats['database_py_lines']} —Å—Ç—Ä–æ–∫ (—Ü–µ–ª—å: <500)")
        print(f"- –î—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è: {codebase_stats['duplications_found']} (—Ü–µ–ª—å: 0)")
        print(f"- –ü–æ–∫—Ä—ã—Ç–∏–µ —Ç–µ—Å—Ç–∞–º–∏: {codebase_stats['test_coverage']:.1f}% (—Ü–µ–ª—å: 80%)")

        # –¢–µ–∫—É—â–∞—è –≤–µ—Ç–∫–∞
        current_branch = git_info.get('current_branch', 'unknown')
        print(f"\nüîÑ –¢–µ–∫—É—â–∞—è –≤–µ—Ç–∫–∞: {current_branch}")

        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        print(f"\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
        if overall_progress < 5:
            print("- –ù–∞—á–Ω–∏—Ç–µ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Git —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏: --setup-git")
            print("- –°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—ã–µ –æ—Ç—á–µ—Ç—ã: --generate-reports")
        elif overall_progress < 25:
            print("- –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ —Ä–∞–±–æ—Ç—É –Ω–∞–¥ –≠—Ç–∞–ø–æ–º 1")
            print("- –û–±–Ω–æ–≤–ª—è–π—Ç–µ –ø—Ä–æ–≥—Ä–µ—Å—Å —Ä–µ–≥—É–ª—è—Ä–Ω–æ: --update-progress")
        else:
            print("- –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ —Å–ª–µ–¥–æ–≤–∞—Ç—å –ø–ª–∞–Ω—É")
            print("- –†–µ–≥—É–ª—è—Ä–Ω–æ —Å–æ–∑–¥–∞–≤–∞–π—Ç–µ –æ—Ç—á–µ—Ç—ã")

    def setup_project(self):
        """–ü–æ–ª–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞ –¥–ª—è —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥–∞"""
        print("üöÄ –ù–ê–°–¢–†–û–ô–ö–ê –ü–†–û–ï–ö–¢–ê –†–ï–§–ê–ö–¢–û–†–ò–ù–ì–ê")
        print("=" * 50)

        steps = [
            ("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Git —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏", self.git_manager.setup_git_strategy),
            ("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞", self.progress_tracker.update_progress_file),
            ("–°–æ–∑–¥–∞–Ω–∏–µ –ø–µ—Ä–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞", lambda: self.report_generator.save_report(
                self.report_generator.generate_weekly_report(1),
                f"weekly_report_week_1_{datetime.now().strftime('%Y%m%d')}.md"
            )),
            ("–°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –ø–æ –º–µ—Ç—Ä–∏–∫–∞–º", lambda: self.report_generator.save_report(
                self.report_generator.generate_metrics_report(),
                f"metrics_report_{datetime.now().strftime('%Y%m%d_%H%M')}.md"
            ))
        ]

        for step_name, step_func in steps:
            print(f"\nüîÑ {step_name}...")
            try:
                step_func()
                print(f"‚úÖ {step_name} –∑–∞–≤–µ—Ä—à–µ–Ω")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –≤ {step_name}: {e}")

        print("\nüéâ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        print("\nüìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
        print("1. –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç–µ—Å—å –Ω–∞ –≤–µ—Ç–∫—É refactoring/stage-0-preparation")
        print("2. –ù–∞—á–Ω–∏—Ç–µ —Ä–∞–±–æ—Ç—É –Ω–∞–¥ –∑–∞–¥–∞—á–∞–º–∏ –≠—Ç–∞–ø–∞ 0")
        print("3. –†–µ–≥—É–ª—è—Ä–Ω–æ –æ–±–Ω–æ–≤–ª—è–π—Ç–µ –ø—Ä–æ–≥—Ä–µ—Å—Å: python scripts/refactoring_manager.py --update-progress")

    def start_stage(self, stage_number: int):
        """–ù–∞—á–∞—Ç—å –Ω–æ–≤—ã–π —ç—Ç–∞–ø —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥–∞"""
        stage_names = {
            0: "–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞",
            1: "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è",
            2: "–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã–µ —É–ª—É—á—à–µ–Ω–∏—è",
            3: "–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è",
            4: "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ",
            5: "–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è"
        }

        stage_name = stage_names.get(stage_number, f"–≠—Ç–∞–ø {stage_number}")
        branch_name = f"refactoring/stage-{stage_number}-{stage_name.lower().replace(' ', '-')}"

        print(f"üöÄ –ù–ê–ß–ê–õ–û –≠–¢–ê–ü–ê {stage_number}: {stage_name}")
        print("=" * 50)

        # –°–æ–∑–¥–∞—Ç—å –≤–µ—Ç–∫—É –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if not self.git_manager.branch_exists(branch_name):
            success = self.git_manager.create_branch(branch_name)
            if not success:
                print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –≤–µ—Ç–∫—É {branch_name}")
                return

        # –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ –≤–µ—Ç–∫—É
        success, _ = self.git_manager.run_git_command(["git", "checkout", branch_name])
        if not success:
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ –≤–µ—Ç–∫—É {branch_name}")
            return

        print(f"‚úÖ –ü–µ—Ä–µ–∫–ª—é—á–∏–ª–∏—Å—å –Ω–∞ –≤–µ—Ç–∫—É {branch_name}")

        # –û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å
        self.progress_tracker.update_progress_file()

        # –°–æ–∑–¥–∞—Ç—å –æ—Ç—á–µ—Ç –æ –Ω–∞—á–∞–ª–µ —ç—Ç–∞–ø–∞
        report_content = f"""# üöÄ –ù–ê–ß–ê–õ–û –≠–¢–ê–ü–ê {stage_number}: {stage_name}

**–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞**: {datetime.now().strftime('%d.%m.%Y %H:%M')}
**–í–µ—Ç–∫–∞**: `{branch_name}`

## üéØ –¶–µ–ª–∏ —ç—Ç–∞–ø–∞:
"""

        stage_goals = {
            0: [
                "–°–æ–∑–¥–∞—Ç—å –ø–æ–ª–Ω—É—é –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é –ø—Ä–æ–µ–∫—Ç–∞",
                "–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏",
                "–ü—Ä–æ–≤–µ—Å—Ç–∏ –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∫–æ–¥–∞",
                "–ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –ø–ª–∞–Ω –º–∏–≥—Ä–∞—Ü–∏–∏"
            ],
            1: [
                "–£—Å—Ç—Ä–∞–Ω–∏—Ç—å –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–¥–∞",
                "–°–æ–∑–¥–∞—Ç—å —Å–∏—Å—Ç–µ–º—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫",
                "–†–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ main.py",
                "–°–æ–∑–¥–∞—Ç—å –±–∞–∑–æ–≤—ã–µ core –º–æ–¥—É–ª–∏"
            ],
            2: [
                "–°–æ–∑–¥–∞—Ç—å —Å–ª–æ–π —Å–µ—Ä–≤–∏—Å–æ–≤",
                "–†–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ database.py",
                "–î–æ–±–∞–≤–∏—Ç—å –≤–∞–ª–∏–¥–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö",
                "–û–±–Ω–æ–≤–∏—Ç—å handlers"
            ],
            3: [
                "–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å",
                "–î–æ–±–∞–≤–∏—Ç—å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ",
                "–£–ª—É—á—à–∏—Ç—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ",
                "–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥"
            ],
            4: [
                "–ù–∞–ø–∏—Å–∞—Ç—å unit —Ç–µ—Å—Ç—ã",
                "–°–æ–∑–¥–∞—Ç—å integration —Ç–µ—Å—Ç—ã",
                "–î–æ—Å—Ç–∏—á—å 80% –ø–æ–∫—Ä—ã—Ç–∏—è",
                "–ü—Ä–æ–≤–µ—Å—Ç–∏ –Ω–∞–≥—Ä—É–∑–æ—á–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ"
            ],
            5: [
                "–°–æ–∑–¥–∞—Ç—å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫—É—é –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é",
                "–û–±–Ω–æ–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫—É—é –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é",
                "–°–æ–∑–¥–∞—Ç—å —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–∞",
                "–ü—Ä–æ–≤–µ—Å—Ç–∏ —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Ä–µ—Ç—Ä–æ—Å–ø–µ–∫—Ç–∏–≤—É"
            ]
        }

        goals = stage_goals.get(stage_number, ["–í—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–¥–∞—á–∏ —Å–æ–≥–ª–∞—Å–Ω–æ –ø–ª–∞–Ω—É"])
        for goal in goals:
            report_content += f"- {goal}\n"

        report_content += f"""

## üìã –ü–ª–∞–Ω —Ä–∞–±–æ—Ç—ã:
1. –ò–∑—É—á–∏—Ç—å –¥–µ—Ç–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω –≤ REFACTORING_MASTER_PLAN.md
2. –í—ã–ø–æ–ª–Ω—è—Ç—å –∑–∞–¥–∞—á–∏ –ø–æ—ç—Ç–∞–ø–Ω–æ
3. –†–µ–≥—É–ª—è—Ä–Ω–æ –∫–æ–º–º–∏—Ç–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è
4. –û–±–Ω–æ–≤–ª—è—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –µ–∂–µ–¥–Ω–µ–≤–Ω–æ
5. –°–æ–∑–¥–∞–≤–∞—Ç—å –æ—Ç—á–µ—Ç—ã –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ

## üö® –í–∞–∂–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:
- –¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–∞–∂–¥–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ
- –î–µ–ª–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏
- –°–ª–µ–¥–∏—Ç—å –∑–∞ –º–µ—Ç—Ä–∏–∫–∞–º–∏ –∫–∞—á–µ—Å—Ç–≤–∞
- –î–æ–∫—É–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è

---

*–û—Ç—á–µ—Ç —Å–æ–∑–¥–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ —ç—Ç–∞–ø–∞*
"""

        report_filename = f"stage_{stage_number}_start_{datetime.now().strftime('%Y%m%d_%H%M')}.md"
        self.report_generator.save_report(report_content, report_filename)

        print(f"üìä –°–æ–∑–¥–∞–Ω –æ—Ç—á–µ—Ç –æ –Ω–∞—á–∞–ª–µ —ç—Ç–∞–ø–∞: reports/{report_filename}")
        print(f"\nüìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
        print(f"1. –ò–∑—É—á–∏—Ç–µ –ø–ª–∞–Ω —ç—Ç–∞–ø–∞ –≤ REFACTORING_MASTER_PLAN.md")
        print(f"2. –ù–∞—á–Ω–∏—Ç–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á")
        print(f"3. –†–µ–≥—É–ª—è—Ä–Ω–æ –∫–æ–º–º–∏—Ç—å—Ç–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è")
        print(f"4. –û–±–Ω–æ–≤–ª—è–π—Ç–µ –ø—Ä–æ–≥—Ä–µ—Å—Å: python scripts/refactoring_manager.py --update-progress")

    def complete_stage(self, stage_number: int):
        """–ó–∞–≤–µ—Ä—à–∏—Ç—å —ç—Ç–∞–ø —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥–∞"""
        stage_names = {
            0: "–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞",
            1: "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è",
            2: "–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã–µ —É–ª—É—á—à–µ–Ω–∏—è",
            3: "–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è",
            4: "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ",
            5: "–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è"
        }

        stage_name = stage_names.get(stage_number, f"–≠—Ç–∞–ø {stage_number}")

        print(f"üéâ –ó–ê–í–ï–†–®–ï–ù–ò–ï –≠–¢–ê–ü–ê {stage_number}: {stage_name}")
        print("=" * 50)

        # –û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å
        self.progress_tracker.update_progress_file()

        # –ü–æ–ª—É—á–∏—Ç—å –º–µ—Ç—Ä–∏–∫–∏
        codebase_stats = self.progress_tracker.analyze_codebase()
        stage_progress = self.progress_tracker.calculate_stage_progress()

        # –°–æ–∑–¥–∞—Ç—å –æ—Ç—á–µ—Ç –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
        report_content = f"""# üéâ –ó–ê–í–ï–†–®–ï–ù–ò–ï –≠–¢–ê–ü–ê {stage_number}: {stage_name}

**–î–∞—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è**: {datetime.now().strftime('%d.%m.%Y %H:%M')}

## ‚úÖ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è —ç—Ç–∞–ø–∞:
"""

        # –ê–Ω–∞–ª–∏–∑ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –∫–æ–¥–µ
        achievements = []

        if stage_number == 0:
            if (self.project_root / "REFACTORING_MASTER_PLAN.md").exists():
                achievements.append("–°–æ–∑–¥–∞–Ω –º–∞—Å—Ç–µ—Ä-–ø–ª–∞–Ω —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥–∞")
            if (self.project_root / "CODEBASE_ANALYSIS.md").exists():
                achievements.append("–ü—Ä–æ–≤–µ–¥–µ–Ω –∞–Ω–∞–ª–∏–∑ –∫–æ–¥–æ–≤–æ–π –±–∞–∑—ã")
            if (self.project_root / "DEPENDENCY_MAP.md").exists():
                achievements.append("–°–æ–∑–¥–∞–Ω–∞ –∫–∞—Ä—Ç–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π")

        elif stage_number == 1:
            if codebase_stats['duplications_found'] < 50:
                achievements.append("–°–æ–∫—Ä–∞—â–µ–Ω–æ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–¥–∞")
            if (self.project_root / "core").exists():
                achievements.append("–°–æ–∑–¥–∞–Ω—ã –±–∞–∑–æ–≤—ã–µ core –º–æ–¥—É–ª–∏")
            if codebase_stats['main_py_lines'] < 1362:
                achievements.append("–ù–∞—á–∞—Ç —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ main.py")

        if not achievements:
            achievements = ["–í—ã–ø–æ–ª–Ω–µ–Ω—ã –∑–∞–¥–∞—á–∏ —Å–æ–≥–ª–∞—Å–Ω–æ –ø–ª–∞–Ω—É"]

        for achievement in achievements:
            report_content += f"- {achievement}\n"

        report_content += f"""

## üìä –ú–µ—Ç—Ä–∏–∫–∏ –Ω–∞ –º–æ–º–µ–Ω—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è:
- main.py: {codebase_stats['main_py_lines']} —Å—Ç—Ä–æ–∫
- database.py: {codebase_stats['database_py_lines']} —Å—Ç—Ä–æ–∫
- –î—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è: {codebase_stats['duplications_found']} –º–µ—Å—Ç
- –ü–æ–∫—Ä—ã—Ç–∏–µ —Ç–µ—Å—Ç–∞–º–∏: {codebase_stats['test_coverage']:.1f}%

## üéØ –ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —ç—Ç–∞–ø—É:
"""

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —ç—Ç–∞–ø—É
        next_stage_ready = True
        readiness_checks = []

        if stage_number == 0:
            if not (self.project_root / "REFACTORING_MASTER_PLAN.md").exists():
                readiness_checks.append("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –º–∞—Å—Ç–µ—Ä-–ø–ª–∞–Ω")
                next_stage_ready = False
            else:
                readiness_checks.append("‚úÖ –ú–∞—Å—Ç–µ—Ä-–ø–ª–∞–Ω —Å–æ–∑–¥–∞–Ω")

        elif stage_number == 1:
            if codebase_stats['duplications_found'] > 10:
                readiness_checks.append("‚ö†Ô∏è –ú–Ω–æ–≥–æ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–π –∫–æ–¥–∞")
            else:
                readiness_checks.append("‚úÖ –î—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è —É—Å—Ç—Ä–∞–Ω–µ–Ω—ã")

        if not readiness_checks:
            readiness_checks = ["‚úÖ –ì–æ—Ç–æ–≤ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —ç—Ç–∞–ø—É"]

        for check in readiness_checks:
            report_content += f"- {check}\n"

        if next_stage_ready:
            report_content += f"\nüöÄ **–ú–æ–∂–Ω–æ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç—å –∫ –≠—Ç–∞–ø—É {stage_number + 1}**\n"
        else:
            report_content += f"\n‚ö†Ô∏è **–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ç–µ–∫—É—â–∏–µ –∑–∞–¥–∞—á–∏ –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ—Ö–æ–¥–æ–º**\n"

        report_content += f"""

## üìã –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:
1. –ü—Ä–æ–≤–µ—Å—Ç–∏ —Ä–µ—Ç—Ä–æ—Å–ø–µ–∫—Ç–∏–≤—É —ç—Ç–∞–ø–∞
2. –û–±–Ω–æ–≤–∏—Ç—å –ø–ª–∞–Ω—ã –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
3. –ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å—Å—è –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —ç—Ç–∞–ø—É
4. –°–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è

---

*–û—Ç—á–µ—Ç —Å–æ–∑–¥–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —ç—Ç–∞–ø–∞*
"""

        report_filename = f"stage_{stage_number}_complete_{datetime.now().strftime('%Y%m%d_%H%M')}.md"
        self.report_generator.save_report(report_content, report_filename)

        print(f"üìä –°–æ–∑–¥–∞–Ω –æ—Ç—á–µ—Ç –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏: reports/{report_filename}")

        if next_stage_ready and stage_number < 5:
            print(f"\nüöÄ –ì–æ—Ç–æ–≤ –∫ –ø–µ—Ä–µ—Ö–æ–¥—É –Ω–∞ –≠—Ç–∞–ø {stage_number + 1}")
            response = input(f"–ù–∞—á–∞—Ç—å –≠—Ç–∞–ø {stage_number + 1}? (y/N): ")
            if response.lower() == 'y':
                self.start_stage(stage_number + 1)
        else:
            print(f"\nüìã –ó–∞–≤–µ—Ä—à–∏—Ç–µ —Ç–µ–∫—É—â–∏–µ –∑–∞–¥–∞—á–∏ –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ—Ö–æ–¥–æ–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —ç—Ç–∞–ø—É")

    def daily_routine(self):
        """–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Ä—É—Ç–∏–Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞"""
        print("üìÖ –ï–ñ–ï–î–ù–ï–í–ù–û–ï –û–ë–ù–û–í–õ–ï–ù–ò–ï")
        print("=" * 30)

        # –û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å
        print("üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞...")
        self.progress_tracker.update_progress_file()

        # –°–æ–∑–¥–∞—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç
        print("üìä –°–æ–∑–¥–∞–Ω–∏–µ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞...")
        self.progress_tracker.create_daily_report()

        # –ü–æ–∫–∞–∑–∞—Ç—å –∫—Ä–∞—Ç–∫–∏–π —Å—Ç–∞—Ç—É—Å
        print("\nüìà –ö—Ä–∞—Ç–∫–∏–π —Å—Ç–∞—Ç—É—Å:")
        codebase_stats = self.progress_tracker.analyze_codebase()
        print(f"- –î—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è: {codebase_stats['duplications_found']}")
        print(f"- –ü–æ–∫—Ä—ã—Ç–∏–µ —Ç–µ—Å—Ç–∞–º–∏: {codebase_stats['test_coverage']:.1f}%")

        git_info = self.progress_tracker.get_git_info()
        print(f"- –¢–µ–∫—É—â–∞—è –≤–µ—Ç–∫–∞: {git_info.get('current_branch', 'unknown')}")

        print("\n‚úÖ –ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")

    def weekly_routine(self):
        """–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–∞—è —Ä—É—Ç–∏–Ω–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç—á–µ—Ç–æ–≤"""
        print("üìÖ –ï–ñ–ï–ù–ï–î–ï–õ–¨–ù–û–ï –û–ë–ù–û–í–õ–ï–ù–ò–ï")
        print("=" * 30)

        # –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –Ω–æ–º–µ—Ä –Ω–µ–¥–µ–ª–∏
        start_date = datetime(2025, 1, 27)
        current_date = datetime.now()
        week_number = ((current_date - start_date).days // 7) + 1

        print(f"üìä –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –∑–∞ –Ω–µ–¥–µ–ª—é {week_number}...")

        # –°–æ–∑–¥–∞—Ç—å –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
        weekly_report = self.report_generator.generate_weekly_report(week_number)
        weekly_filename = f"weekly_report_week_{week_number}_{datetime.now().strftime('%Y%m%d')}.md"
        self.report_generator.save_report(weekly_report, weekly_filename)

        # –°–æ–∑–¥–∞—Ç—å –æ—Ç—á–µ—Ç –ø–æ –º–µ—Ç—Ä–∏–∫–∞–º
        print("üìä –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –ø–æ –º–µ—Ç—Ä–∏–∫–∞–º...")
        metrics_report = self.report_generator.generate_metrics_report()
        metrics_filename = f"metrics_report_{datetime.now().strftime('%Y%m%d_%H%M')}.md"
        self.report_generator.save_report(metrics_report, metrics_filename)

        # –û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å
        print("üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞...")
        self.progress_tracker.update_progress_file()

        print(f"\n‚úÖ –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
        print(f"üìä –û—Ç—á–µ—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ø–∞–ø–∫–µ reports/")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    import argparse

    parser = argparse.ArgumentParser(description="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–æ–º —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥–∞")
    parser.add_argument("--status", action="store_true", help="–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –ø—Ä–æ–µ–∫—Ç–∞")
    parser.add_argument("--setup", action="store_true", help="–ü–æ–ª–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞")
    parser.add_argument("--start-stage", type=int, help="–ù–∞—á–∞—Ç—å —ç—Ç–∞–ø (0-5)")
    parser.add_argument("--complete-stage", type=int, help="–ó–∞–≤–µ—Ä—à–∏—Ç—å —ç—Ç–∞–ø (0-5)")
    parser.add_argument("--daily", action="store_true", help="–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Ä—É—Ç–∏–Ω–∞")
    parser.add_argument("--weekly", action="store_true", help="–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–∞—è —Ä—É—Ç–∏–Ω–∞")
    parser.add_argument("--update-progress", action="store_true", help="–û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å")
    parser.add_argument("--generate-reports", action="store_true", help="–°–æ–∑–¥–∞—Ç—å –≤—Å–µ –æ—Ç—á–µ—Ç—ã")
    parser.add_argument("--setup-git", action="store_true", help="–ù–∞—Å—Ç—Ä–æ–∏—Ç—å Git —Å—Ç—Ä–∞—Ç–µ–≥–∏—é")
    parser.add_argument("--project-root", default=".", help="–ö–æ—Ä–Ω–µ–≤–∞—è –ø–∞–ø–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞")

    args = parser.parse_args()

    manager = RefactoringManager(args.project_root)

    if args.status:
        manager.show_status()
    elif args.setup:
        manager.setup_project()
    elif args.start_stage is not None:
        manager.start_stage(args.start_stage)
    elif args.complete_stage is not None:
        manager.complete_stage(args.complete_stage)
    elif args.daily:
        manager.daily_routine()
    elif args.weekly:
        manager.weekly_routine()
    elif args.update_progress:
        manager.progress_tracker.update_progress_file()
    elif args.generate_reports:
        manager.weekly_routine()
    elif args.setup_git:
        manager.git_manager.setup_git_strategy()
    else:
        print("üöÄ –ú–ï–ù–ï–î–ñ–ï–† –†–ï–§–ê–ö–¢–û–†–ò–ù–ì–ê")
        print("=" * 30)
        print("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ --help –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–æ–º–∞–Ω–¥")
        print("\n–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:")
        print("  --status          –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å")
        print("  --setup           –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ø—Ä–æ–µ–∫—Ç")
        print("  --start-stage N   –ù–∞—á–∞—Ç—å —ç—Ç–∞–ø N")
        print("  --daily           –ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ")
        print("  --weekly          –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ –æ—Ç—á–µ—Ç—ã")
        print("\n–ü—Ä–∏–º–µ—Ä: python scripts/refactoring_manager.py --status")

        # –ü–æ–∫–∞–∑–∞—Ç—å –∫—Ä–∞—Ç–∫–∏–π —Å—Ç–∞—Ç—É—Å
        print("\n" + "=" * 30)
        manager.show_status()

if __name__ == "__main__":
    main()
