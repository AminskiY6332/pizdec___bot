#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤ –ø–æ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥—É
–°–æ–∑–¥–∞–µ—Ç –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ –æ—Ç—á–µ—Ç—ã, –º–µ—Ç—Ä–∏–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–¥–∞, –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
"""

import os
import json
import subprocess
from datetime import datetime, timedelta
from pathlib import Path
from typing import Dict, List, Tuple, Optional
import re

class ReportGenerator:
    def __init__(self, project_root: str = "."):
        self.project_root = Path(project_root)
        self.reports_dir = self.project_root / "reports"
        self.reports_dir.mkdir(exist_ok=True)

    def run_command(self, command: List[str]) -> Tuple[bool, str]:
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É –∏ –≤–µ—Ä–Ω—É—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç"""
        try:
            result = subprocess.run(
                command,
                cwd=self.project_root,
                capture_output=True,
                text=True,
                check=True
            )
            return True, result.stdout.strip()
        except subprocess.CalledProcessError as e:
            return False, e.stderr.strip()

    def get_git_commits_since(self, since_date: str) -> List[Dict]:
        """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–º–º–∏—Ç—ã —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π –¥–∞—Ç—ã"""
        success, output = self.run_command([
            "git", "log",
            f"--since={since_date}",
            "--format=%H|%s|%an|%ad",
            "--date=iso"
        ])

        commits = []
        if success and output:
            for line in output.split('\n'):
                if line.strip():
                    parts = line.split('|', 3)
                    if len(parts) == 4:
                        commits.append({
                            'hash': parts[0][:7],
                            'message': parts[1],
                            'author': parts[2],
                            'date': parts[3]
                        })

        return commits

    def analyze_code_changes(self, since_date: str) -> Dict:
        """–ê–Ω–∞–ª–∏–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –∫–æ–¥–µ —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π –¥–∞—Ç—ã"""
        success, output = self.run_command([
            "git", "diff", "--stat",
            f"--since={since_date}",
            "HEAD~1", "HEAD"
        ])

        changes = {
            'files_changed': 0,
            'lines_added': 0,
            'lines_deleted': 0,
            'files_list': []
        }

        if success and output:
            lines = output.split('\n')
            for line in lines:
                if '|' in line and ('+' in line or '-' in line):
                    changes['files_changed'] += 1
                    filename = line.split('|')[0].strip()
                    changes['files_list'].append(filename)
                elif 'insertion' in line or 'deletion' in line:
                    # –ü–∞—Ä—Å–∏–Ω–≥ —Å—Ç—Ä–æ–∫–∏ —Ç–∏–ø–∞ "5 files changed, 123 insertions(+), 45 deletions(-)"
                    if 'insertion' in line:
                        match = re.search(r'(\d+) insertion', line)
                        if match:
                            changes['lines_added'] = int(match.group(1))
                    if 'deletion' in line:
                        match = re.search(r'(\d+) deletion', line)
                        if match:
                            changes['lines_deleted'] = int(match.group(1))

        return changes

    def calculate_code_metrics(self) -> Dict:
        """–í—ã—á–∏—Å–ª–∏—Ç—å –º–µ—Ç—Ä–∏–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–¥–∞"""
        metrics = {
            'total_files': 0,
            'total_lines': 0,
            'python_files': 0,
            'complexity_high': 0,
            'duplications': 0,
            'test_coverage': 0.0,
            'main_py_lines': 0,
            'database_py_lines': 0
        }

        # –ü–æ–¥—Å—á–µ—Ç —Ñ–∞–π–ª–æ–≤ –∏ —Å—Ç—Ä–æ–∫
        for file_path in self.project_root.rglob("*.py"):
            if any(exclude in str(file_path) for exclude in ['venv', '__pycache__', '.git']):
                continue

            metrics['python_files'] += 1

            try:
                with open(file_path, 'r', encoding='utf-8') as f:
                    lines = f.readlines()
                    line_count = len(lines)
                    metrics['total_lines'] += line_count

                    # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã
                    if file_path.name == 'main.py':
                        metrics['main_py_lines'] = line_count
                    elif file_path.name == 'database.py':
                        metrics['database_py_lines'] = line_count

                    # –ü–æ–∏—Å–∫ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–π (—É–ø—Ä–æ—â–µ–Ω–Ω—ã–π)
                    content = ''.join(lines)
                    error_patterns = [
                        r'‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞',
                        r'‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏',
                        r'–ü–µ—á–µ–Ω—å–∫–∏ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã'
                    ]

                    for pattern in error_patterns:
                        matches = len(re.findall(pattern, content))
                        if matches > 0:
                            metrics['duplications'] += matches - 1  # –ü–µ—Ä–≤–æ–µ –Ω–µ —Å—á–∏—Ç–∞–µ—Ç—Å—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ–º

            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ñ–∞–π–ª–∞ {file_path}: {e}")

        # –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å –ø–æ–∫—Ä—ã—Ç–∏–µ —Ç–µ—Å—Ç–∞–º–∏
        try:
            success, _ = self.run_command(["python", "-m", "pytest", "--cov=.", "--cov-report=json", "--quiet"])
            if success:
                coverage_file = self.project_root / "coverage.json"
                if coverage_file.exists():
                    with open(coverage_file, 'r') as f:
                        coverage_data = json.load(f)
                        metrics['test_coverage'] = coverage_data.get('totals', {}).get('percent_covered', 0)
        except Exception:
            pass

        return metrics

    def generate_weekly_report(self, week_number: int = None) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        if week_number is None:
            # –í—ã—á–∏—Å–ª–∏—Ç—å –Ω–æ–º–µ—Ä –Ω–µ–¥–µ–ª–∏ –æ—Ç –Ω–∞—á–∞–ª–∞ –ø—Ä–æ–µ–∫—Ç–∞ (27.01.2025)
            start_date = datetime(2025, 1, 27)
            current_date = datetime.now()
            week_number = ((current_date - start_date).days // 7) + 1

        # –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –Ω–µ–¥–µ–ª–∏
        start_date = datetime(2025, 1, 27) + timedelta(weeks=week_number-1)
        end_date = start_date + timedelta(days=6)

        # –ü–æ–ª—É—á–∏—Ç—å –∫–æ–º–º–∏—Ç—ã –∑–∞ –Ω–µ–¥–µ–ª—é
        commits = self.get_git_commits_since(start_date.strftime('%Y-%m-%d'))

        # –ê–Ω–∞–ª–∏–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
        changes = self.analyze_code_changes(start_date.strftime('%Y-%m-%d'))

        # –ú–µ—Ç—Ä–∏–∫–∏ –∫–æ–¥–∞
        metrics = self.calculate_code_metrics()

        # –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–µ–∫—É—â–∏–π —ç—Ç–∞–ø
        current_stage = self.determine_current_stage(week_number)

        report = f"""# üìä –ï–ñ–ï–ù–ï–î–ï–õ–¨–ù–´–ô –û–¢–ß–ï–¢ #{week_number}

**–ü–µ—Ä–∏–æ–¥**: {start_date.strftime('%d.%m.%Y')} - {end_date.strftime('%d.%m.%Y')}
**–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è**: {datetime.now().strftime('%d.%m.%Y %H:%M')}
**–¢–µ–∫—É—â–∏–π —ç—Ç–∞–ø**: {current_stage}

---

## üéØ –ü–†–û–ì–†–ï–°–° –ó–ê –ù–ï–î–ï–õ–Æ

### –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏:
"""

        # –ê–Ω–∞–ª–∏–∑ –∫–æ–º–º–∏—Ç–æ–≤ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
        task_categories = {
            '–¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è': 0,
            '—Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥': 0,
            '—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ': 0,
            '–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è': 0,
            '–∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞': 0
        }

        for commit in commits:
            message = commit['message'].lower()
            if any(word in message for word in ['–¥–æ–∫—É–º–µ–Ω—Ç', '–ø–ª–∞–Ω', '–∞–Ω–∞–ª–∏–∑', '–æ—Ç—á–µ—Ç']):
                task_categories['–¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è'] += 1
            elif any(word in message for word in ['—Ä–µ—Ñ–∞–∫—Ç–æ—Ä', '–ø–µ—Ä–µ—Ä–∞–±–æ—Ç', '—Ä–µ—Å—Ç—Ä—É–∫—Ç—É—Ä']):
                task_categories['—Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥'] += 1
            elif any(word in message for word in ['—Ç–µ—Å—Ç', '–ø–æ–∫—Ä—ã—Ç–∏–µ', '–ø—Ä–æ–≤–µ—Ä–∫']):
                task_categories['—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ'] += 1
            elif any(word in message for word in ['–∏—Å–ø—Ä–∞–≤', '—Ñ–∏–∫—Å', '–±–∞–≥']):
                task_categories['–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è'] += 1
            elif any(word in message for word in ['–∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä', '—Å—Ç—Ä—É–∫—Ç—É—Ä', '–º–æ–¥—É–ª']):
                task_categories['–∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞'] += 1

        for category, count in task_categories.items():
            if count > 0:
                report += f"- **{category.title()}**: {count} –∑–∞–¥–∞—á\n"

        report += f"""

### –ò–∑–º–µ–Ω–µ–Ω–∏—è –≤ –∫–æ–¥–µ:
- **–§–∞–π–ª–æ–≤ –∏–∑–º–µ–Ω–µ–Ω–æ**: {changes['files_changed']}
- **–°—Ç—Ä–æ–∫ –¥–æ–±–∞–≤–ª–µ–Ω–æ**: {changes['lines_added']}
- **–°—Ç—Ä–æ–∫ —É–¥–∞–ª–µ–Ω–æ**: {changes['lines_deleted']}
- **–ö–æ–º–º–∏—Ç–æ–≤**: {len(commits)}

### –ö–ª—é—á–µ–≤—ã–µ –∫–æ–º–º–∏—Ç—ã:
"""

        for commit in commits[:5]:  # –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –∫–æ–º–º–∏—Ç–æ–≤
            report += f"- `{commit['hash']}` {commit['message']} ({commit['author']})\n"

        report += f"""

---

## üìä –¢–ï–ö–£–©–ò–ï –ú–ï–¢–†–ò–ö–ò

| –ú–µ—Ç—Ä–∏–∫–∞ | –ó–Ω–∞—á–µ–Ω–∏–µ | –ò–∑–º–µ–Ω–µ–Ω–∏–µ | –¶–µ–ª—å |
|---------|----------|-----------|------|
| –†–∞–∑–º–µ—Ä main.py | {metrics['main_py_lines']} —Å—Ç—Ä–æ–∫ | - | <300 —Å—Ç—Ä–æ–∫ |
| –†–∞–∑–º–µ—Ä database.py | {metrics['database_py_lines']} —Å—Ç—Ä–æ–∫ | - | <500 —Å—Ç—Ä–æ–∫ |
| –î—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–¥–∞ | {metrics['duplications']} –º–µ—Å—Ç | - | 0 –º–µ—Å—Ç |
| –ü–æ–∫—Ä—ã—Ç–∏–µ —Ç–µ—Å—Ç–∞–º–∏ | {metrics['test_coverage']:.1f}% | - | 80% |
| –í—Å–µ–≥–æ Python —Ñ–∞–π–ª–æ–≤ | {metrics['python_files']} | - | - |
| –í—Å–µ–≥–æ —Å—Ç—Ä–æ–∫ –∫–æ–¥–∞ | {metrics['total_lines']:,} | - | - |

---

## üéØ –î–û–°–¢–ò–ñ–ï–ù–ò–Ø –ù–ï–î–ï–õ–ò

### ‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ:
"""

        # –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –º–µ—Ç—Ä–∏–∫
        achievements = []

        if metrics['main_py_lines'] < 1362:
            achievements.append("–£–º–µ–Ω—å—à–µ–Ω —Ä–∞–∑–º–µ—Ä main.py")
        if metrics['database_py_lines'] < 3213:
            achievements.append("–£–º–µ–Ω—å—à–µ–Ω —Ä–∞–∑–º–µ—Ä database.py")
        if metrics['duplications'] < 50:
            achievements.append("–°–æ–∫—Ä–∞—â–µ–Ω–æ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–¥–∞")
        if metrics['test_coverage'] > 0:
            achievements.append("–î–æ–±–∞–≤–ª–µ–Ω–æ –ø–æ–∫—Ä—ã—Ç–∏–µ —Ç–µ—Å—Ç–∞–º–∏")

        if not achievements:
            achievements = ["–°–æ–∑–¥–∞–Ω–∞ –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥–∞", "–ü—Ä–æ–≤–µ–¥–µ–Ω –∞–Ω–∞–ª–∏–∑ –∫–æ–¥–æ–≤–æ–π –±–∞–∑—ã"]

        for achievement in achievements:
            report += f"- {achievement}\n"

        report += f"""

### üöß –í –ø—Ä–æ—Ü–µ—Å—Å–µ:
- –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —ç—Ç–∞–ø—É
- –ê–Ω–∞–ª–∏–∑ –∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π

---

## üìã –ü–õ–ê–ù–´ –ù–ê –°–õ–ï–î–£–Æ–©–£–Æ –ù–ï–î–ï–õ–Æ

### –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ –∑–∞–¥–∞—á–∏:
"""

        # –ü–ª–∞–Ω—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—É—â–µ–≥–æ —ç—Ç–∞–ø–∞
        next_week_plans = self.get_next_week_plans(current_stage, week_number + 1)
        for plan in next_week_plans:
            report += f"- {plan}\n"

        report += f"""

### –û–∂–∏–¥–∞–µ–º—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:
- –ü—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ –ø–æ —Ç–µ–∫—É—â–µ–º—É —ç—Ç–∞–ø—É
- –£–ª—É—á—à–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–¥–∞
- –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —ç—Ç–∞–ø—É

---

## üö® –†–ò–°–ö–ò –ò –ü–†–û–ë–õ–ï–ú–´

### –¢–µ–∫—É—â–∏–µ —Ä–∏—Å–∫–∏:
- **–í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä–∞–º–∫–∏**: –°—Ä–µ–¥–Ω–∏–π —Ä–∏—Å–∫ –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è —Å—Ä–æ–∫–æ–≤
- **–°–ª–æ–∂–Ω–æ—Å—Ç—å**: –í—ã—Å–æ–∫–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –∑–∞–¥–∞—á
- **–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ**: –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –±–æ–ª—å—à–µ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ

### –†–µ—à–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã:
- –°–æ–∑–¥–∞–Ω–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥–∞
- –ù–∞—Å—Ç—Ä–æ–µ–Ω–∞ —Å–∏—Å—Ç–µ–º–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞

---

## üìà –¢–†–ï–ù–î–´

### –ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ —Ç—Ä–µ–Ω–¥—ã:
- –£–ª—É—á—à–µ–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞
- –£–≤–µ–ª–∏—á–µ–Ω–∏–µ –ø–æ–∫—Ä—ã—Ç–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–µ–π
- –°–∏—Å—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–¥—Ö–æ–¥ –∫ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥—É

### –û–±–ª–∞—Å—Ç–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è:
- –°–∫–æ—Ä–æ—Å—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á
- –ü–æ–∫—Ä—ã—Ç–∏–µ —Ç–µ—Å—Ç–∞–º–∏
- –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ–≤

---

## üë• –ö–û–ú–ê–ù–î–ê

### –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∫–æ–º–∞–Ω–¥—ã:
"""

        # –ê–Ω–∞–ª–∏–∑ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ –∞–≤—Ç–æ—Ä–∞–º –∫–æ–º–º–∏—Ç–æ–≤
        authors = {}
        for commit in commits:
            author = commit['author']
            authors[author] = authors.get(author, 0) + 1

        for author, count in authors.items():
            report += f"- **{author}**: {count} –∫–æ–º–º–∏—Ç–æ–≤\n"

        if not authors:
            report += "- –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –±—É–¥–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å—Å—è –≤ —Å–ª–µ–¥—É—é—â–∏—Ö –æ—Ç—á–µ—Ç–∞—Ö\n"

        report += f"""

---

## üîÑ –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò

1. **–ó–∞–≤–µ—Ä—à–∏—Ç—å —Ç–µ–∫—É—â–∏–µ –∑–∞–¥–∞—á–∏** —ç—Ç–∞–ø–∞ {current_stage}
2. **–ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å—Å—è –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —ç—Ç–∞–ø—É**
3. **–ü—Ä–æ–≤–µ—Å—Ç–∏ —Ä–µ—Ç—Ä–æ—Å–ø–µ–∫—Ç–∏–≤—É** –Ω–µ–¥–µ–ª–∏
4. **–û–±–Ω–æ–≤–∏—Ç—å –ø–ª–∞–Ω—ã** –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏

---

*–û—Ç—á–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ {datetime.now().strftime('%d.%m.%Y –≤ %H:%M')}*
*–°–∫—Ä–∏–ø—Ç: `scripts/generate_report.py`*
"""

        return report

    def determine_current_stage(self, week_number: int) -> str:
        """–û–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–µ–∫—É—â–∏–π —ç—Ç–∞–ø –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–æ–º–µ—Ä–∞ –Ω–µ–¥–µ–ª–∏"""
        stages = {
            1: "–≠—Ç–∞–ø 0: –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞",
            2: "–≠—Ç–∞–ø 1: –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è",
            3: "–≠—Ç–∞–ø 1: –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è",
            4: "–≠—Ç–∞–ø 2: –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã–µ —É–ª—É—á—à–µ–Ω–∏—è",
            5: "–≠—Ç–∞–ø 2: –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã–µ —É–ª—É—á—à–µ–Ω–∏—è",
            6: "–≠—Ç–∞–ø 2: –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã–µ —É–ª—É—á—à–µ–Ω–∏—è",
            7: "–≠—Ç–∞–ø 3: –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è",
            8: "–≠—Ç–∞–ø 3: –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è",
            9: "–≠—Ç–∞–ø 4: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ",
            10: "–≠—Ç–∞–ø 5: –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è"
        }

        return stages.get(week_number, f"–ù–µ–¥–µ–ª—è {week_number}")

    def get_next_week_plans(self, current_stage: str, week_number: int) -> List[str]:
        """–ü–æ–ª—É—á–∏—Ç—å –ø–ª–∞–Ω—ã –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é –Ω–µ–¥–µ–ª—é"""
        plans_by_stage = {
            "–≠—Ç–∞–ø 0: –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞": [
                "–ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏",
                "–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏",
                "–ü—Ä–æ–≤–µ—Å—Ç–∏ –ø–æ–ª–Ω—ã–π –∞—É–¥–∏—Ç –∫–æ–¥–∞",
                "–ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å—Å—è –∫ –Ω–∞—á–∞–ª—É –≠—Ç–∞–ø–∞ 1"
            ],
            "–≠—Ç–∞–ø 1: –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è": [
                "–£—Å—Ç—Ä–∞–Ω–∏—Ç—å –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –æ–± –æ—à–∏–±–∫–∞—Ö",
                "–°–æ–∑–¥–∞—Ç—å —Å–∏—Å—Ç–µ–º—É —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫",
                "–ù–∞—á–∞—Ç—å —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ main.py",
                "–°–æ–∑–¥–∞—Ç—å –±–∞–∑–æ–≤—ã–µ core –º–æ–¥—É–ª–∏"
            ],
            "–≠—Ç–∞–ø 2: –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã–µ —É–ª—É—á—à–µ–Ω–∏—è": [
                "–°–æ–∑–¥–∞—Ç—å —Å–ª–æ–π —Å–µ—Ä–≤–∏—Å–æ–≤",
                "–†–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ database.py",
                "–î–æ–±–∞–≤–∏—Ç—å —Å–∏—Å—Ç–µ–º—É –≤–∞–ª–∏–¥–∞—Ü–∏–∏",
                "–û–±–Ω–æ–≤–∏—Ç—å handlers"
            ],
            "–≠—Ç–∞–ø 3: –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è": [
                "–î–æ–±–∞–≤–∏—Ç—å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ",
                "–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å",
                "–£–ª—É—á—à–∏—Ç—å —Å–∏—Å—Ç–µ–º—É –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è",
                "–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥"
            ],
            "–≠—Ç–∞–ø 4: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ": [
                "–ù–∞–ø–∏—Å–∞—Ç—å unit —Ç–µ—Å—Ç—ã",
                "–°–æ–∑–¥–∞—Ç—å integration —Ç–µ—Å—Ç—ã",
                "–ü—Ä–æ–≤–µ—Å—Ç–∏ –Ω–∞–≥—Ä—É–∑–æ—á–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ",
                "–î–æ—Å—Ç–∏—á—å 80% –ø–æ–∫—Ä—ã—Ç–∏—è —Ç–µ—Å—Ç–∞–º–∏"
            ],
            "–≠—Ç–∞–ø 5: –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è": [
                "–°–æ–∑–¥–∞—Ç—å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫—É—é –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é",
                "–û–±–Ω–æ–≤–∏—Ç—å README",
                "–°–æ–∑–¥–∞—Ç—å —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—é",
                "–ü—Ä–æ–≤–µ—Å—Ç–∏ —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Ä–µ—Ç—Ä–æ—Å–ø–µ–∫—Ç–∏–≤—É"
            ]
        }

        return plans_by_stage.get(current_stage, ["–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–∞–±–æ—Ç—É –ø–æ –ø–ª–∞–Ω—É"])

    def generate_metrics_report(self) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –ø–æ –º–µ—Ç—Ä–∏–∫–∞–º –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–¥–∞"""
        metrics = self.calculate_code_metrics()

        report = f"""# üìä –û–¢–ß–ï–¢ –ü–û –ú–ï–¢–†–ò–ö–ê–ú –ö–ê–ß–ï–°–¢–í–ê –ö–û–î–ê

**–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è**: {datetime.now().strftime('%d.%m.%Y %H:%M')}

---

## üìà –û–°–ù–û–í–ù–´–ï –ú–ï–¢–†–ò–ö–ò

### –†–∞–∑–º–µ—Ä –∫–æ–¥–æ–≤–æ–π –±–∞–∑—ã:
- **–í—Å–µ–≥–æ Python —Ñ–∞–π–ª–æ–≤**: {metrics['python_files']}
- **–í—Å–µ–≥–æ —Å—Ç—Ä–æ–∫ –∫–æ–¥–∞**: {metrics['total_lines']:,}
- **–°—Ä–µ–¥–Ω–∏–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞**: {metrics['total_lines'] // metrics['python_files'] if metrics['python_files'] > 0 else 0} —Å—Ç—Ä–æ–∫

### –ü—Ä–æ–±–ª–µ–º–Ω—ã–µ —Ñ–∞–π–ª—ã:
- **main.py**: {metrics['main_py_lines']} —Å—Ç—Ä–æ–∫ (—Ü–µ–ª—å: <300)
- **database.py**: {metrics['database_py_lines']} —Å—Ç—Ä–æ–∫ (—Ü–µ–ª—å: <500)

### –ö–∞—á–µ—Å—Ç–≤–æ –∫–æ–¥–∞:
- **–î—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–¥–∞**: {metrics['duplications']} –º–µ—Å—Ç (—Ü–µ–ª—å: 0)
- **–ü–æ–∫—Ä—ã—Ç–∏–µ —Ç–µ—Å—Ç–∞–º–∏**: {metrics['test_coverage']:.1f}% (—Ü–µ–ª—å: 80%)

---

## üéØ –ü–†–û–ì–†–ï–°–° –ö –¶–ï–õ–Ø–ú

| –ú–µ—Ç—Ä–∏–∫–∞ | –¢–µ–∫—É—â–µ–µ | –¶–µ–ª—å | –ü—Ä–æ–≥—Ä–µ—Å—Å | –°—Ç–∞—Ç—É—Å |
|---------|---------|------|----------|--------|
| main.py | {metrics['main_py_lines']} | <300 | {max(0, (1362 - metrics['main_py_lines']) / 1062 * 100):.1f}% | {'‚úÖ' if metrics['main_py_lines'] < 300 else 'üîÑ'} |
| database.py | {metrics['database_py_lines']} | <500 | {max(0, (3213 - metrics['database_py_lines']) / 2713 * 100):.1f}% | {'‚úÖ' if metrics['database_py_lines'] < 500 else 'üîÑ'} |
| –î—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ | {metrics['duplications']} | 0 | {max(0, (50 - metrics['duplications']) / 50 * 100):.1f}% | {'‚úÖ' if metrics['duplications'] == 0 else 'üîÑ'} |
| –¢–µ—Å—Ç—ã | {metrics['test_coverage']:.1f}% | 80% | {metrics['test_coverage'] / 80 * 100:.1f}% | {'‚úÖ' if metrics['test_coverage'] >= 80 else 'üîÑ'} |

---

## üìä –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó

### –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–æ–≤ —Ñ–∞–π–ª–æ–≤:
"""

        # –ê–Ω–∞–ª–∏–∑ —Ä–∞–∑–º–µ—Ä–æ–≤ —Ñ–∞–π–ª–æ–≤
        file_sizes = []
        for file_path in self.project_root.rglob("*.py"):
            if any(exclude in str(file_path) for exclude in ['venv', '__pycache__', '.git']):
                continue
            try:
                with open(file_path, 'r', encoding='utf-8') as f:
                    lines = len(f.readlines())
                    file_sizes.append((str(file_path.relative_to(self.project_root)), lines))
            except Exception:
                continue

        # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —Ä–∞–∑–º–µ—Ä—É
        file_sizes.sort(key=lambda x: x[1], reverse=True)

        report += "\n**–¢–æ–ø-10 —Å–∞–º—ã—Ö –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤:**\n"
        for i, (filename, lines) in enumerate(file_sizes[:10], 1):
            status = "üî¥" if lines > 500 else "üü°" if lines > 200 else "üü¢"
            report += f"{i}. {status} `{filename}` - {lines} —Å—Ç—Ä–æ–∫\n"

        report += f"""

### –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é:
"""

        recommendations = []
        if metrics['main_py_lines'] > 300:
            recommendations.append("üî¥ **–ö—Ä–∏—Ç–∏—á–Ω–æ**: –†–∞–∑–¥–µ–ª–∏—Ç—å main.py –Ω–∞ –º–æ–¥—É–ª–∏")
        if metrics['database_py_lines'] > 500:
            recommendations.append("üî¥ **–ö—Ä–∏—Ç–∏—á–Ω–æ**: –†–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ database.py –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏")
        if metrics['duplications'] > 10:
            recommendations.append("üü° **–í–∞–∂–Ω–æ**: –£—Å—Ç—Ä–∞–Ω–∏—Ç—å –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–¥–∞")
        if metrics['test_coverage'] < 50:
            recommendations.append("üü° **–í–∞–∂–Ω–æ**: –£–≤–µ–ª–∏—á–∏—Ç—å –ø–æ–∫—Ä—ã—Ç–∏–µ —Ç–µ—Å—Ç–∞–º–∏")

        if not recommendations:
            recommendations.append("‚úÖ **–û—Ç–ª–∏—á–Ω–æ**: –í—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –≤ –Ω–æ—Ä–º–µ")

        for rec in recommendations:
            report += f"- {rec}\n"

        report += f"""

---

## üîÑ –¢–†–ï–ù–î–´

*–¢—Ä–µ–Ω–¥—ã –±—É–¥—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã –ø–æ—Å–ª–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∑–∞–ø—É—Å–∫–æ–≤ –∞–Ω–∞–ª–∏–∑–∞*

---

*–û—Ç—á–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ {datetime.now().strftime('%d.%m.%Y –≤ %H:%M')}*
"""

        return report

    def save_report(self, report_content: str, filename: str):
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç—á–µ—Ç –≤ —Ñ–∞–π–ª"""
        report_file = self.reports_dir / filename
        try:
            with open(report_file, 'w', encoding='utf-8') as f:
                f.write(report_content)
            print(f"‚úÖ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {report_file}")
            return True
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞: {e}")
            return False

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    import argparse

    parser = argparse.ArgumentParser(description="–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–æ–≤ –ø–æ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥—É")
    parser.add_argument("--weekly", type=int, help="–°–æ–∑–¥–∞—Ç—å –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç (–Ω–æ–º–µ—Ä –Ω–µ–¥–µ–ª–∏)")
    parser.add_argument("--metrics", action="store_true", help="–°–æ–∑–¥–∞—Ç—å –æ—Ç—á–µ—Ç –ø–æ –º–µ—Ç—Ä–∏–∫–∞–º")
    parser.add_argument("--all", action="store_true", help="–°–æ–∑–¥–∞—Ç—å –≤—Å–µ –æ—Ç—á–µ—Ç—ã")
    parser.add_argument("--project-root", default=".", help="–ö–æ—Ä–Ω–µ–≤–∞—è –ø–∞–ø–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞")

    args = parser.parse_args()

    generator = ReportGenerator(args.project_root)

    if args.weekly is not None:
        report = generator.generate_weekly_report(args.weekly)
        filename = f"weekly_report_week_{args.weekly}_{datetime.now().strftime('%Y%m%d')}.md"
        generator.save_report(report, filename)

    if args.metrics:
        report = generator.generate_metrics_report()
        filename = f"metrics_report_{datetime.now().strftime('%Y%m%d_%H%M')}.md"
        generator.save_report(report, filename)

    if args.all:
        # –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
        week_num = ((datetime.now() - datetime(2025, 1, 27)).days // 7) + 1
        weekly_report = generator.generate_weekly_report(week_num)
        weekly_filename = f"weekly_report_week_{week_num}_{datetime.now().strftime('%Y%m%d')}.md"
        generator.save_report(weekly_report, weekly_filename)

        # –û—Ç—á–µ—Ç –ø–æ –º–µ—Ç—Ä–∏–∫–∞–º
        metrics_report = generator.generate_metrics_report()
        metrics_filename = f"metrics_report_{datetime.now().strftime('%Y%m%d_%H%M')}.md"
        generator.save_report(metrics_report, metrics_filename)

        print("üéâ –í—Å–µ –æ—Ç—á–µ—Ç—ã —Å–æ–∑–¥–∞–Ω—ã!")

    if not any([args.weekly is not None, args.metrics, args.all]):
        print("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ --help –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥")
        print("–ü—Ä–∏–º–µ—Ä: python scripts/generate_report.py --weekly 1")

if __name__ == "__main__":
    main()
