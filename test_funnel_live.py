#!/usr/bin/env python3
"""
–ñ–∏–≤–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–æ—Ä–æ–Ω–∫–∏ —Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
–ü–æ–∑–≤–æ–ª—è–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ä–∞–±–æ—Ç—É –≤–æ—Ä–æ–Ω–∫–∏
"""

import asyncio
import sys
import os
import aiosqlite
import tempfile
from datetime import datetime, timedelta
from typing import Dict, Any, List, Optional
import json

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–æ–≤
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
from onboarding_config import get_day_config, get_message_text, has_user_purchases, ONBOARDING_FUNNEL, MESSAGE_TEXTS

class LiveFunnelMonitor:
    """–ú–æ–Ω–∏—Ç–æ—Ä –≤–æ—Ä–æ–Ω–∫–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏"""
    
    def __init__(self):
        self.test_db = None
        self.monitoring_data = {
            'users_processed': 0,
            'messages_sent': 0,
            'users_filtered_out': 0,
            'errors': [],
            'message_log': []
        }
    
    async def setup_monitoring_database(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        temp_file = tempfile.NamedTemporaryFile(delete=False, suffix='.db')
        temp_file.close()
        self.test_db = temp_file.name
        
        async with aiosqlite.connect(self.test_db) as conn:
            # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã –∫–∞–∫ –≤ —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ
            await conn.execute("""
                CREATE TABLE users (
                    user_id INTEGER PRIMARY KEY,
                    first_name TEXT,
                    username TEXT,
                    created_at TEXT,
                    welcome_message_sent INTEGER DEFAULT 0,
                    first_purchase INTEGER DEFAULT 1,
                    is_blocked INTEGER DEFAULT 0,
                    last_reminder_type TEXT,
                    last_reminder_sent TEXT,
                    updated_at TEXT DEFAULT CURRENT_TIMESTAMP
                )
            """)
            
            await conn.execute("""
                CREATE TABLE payments (
                    id INTEGER PRIMARY KEY,
                    user_id INTEGER,
                    amount REAL,
                    status TEXT,
                    created_at TEXT DEFAULT CURRENT_TIMESTAMP,
                    FOREIGN KEY (user_id) REFERENCES users(user_id)
                )
            """)
            
            await conn.commit()
        
        print(f"‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–æ–∑–¥–∞–Ω–∞: {self.test_db}")
    
    async def create_diverse_test_data(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –ø–æ–∫—Ä—ã—Ç–∏—è"""
        now = datetime.now()
        
        async with aiosqlite.connect(self.test_db) as conn:
            # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ä–∞–∑–Ω—ã–º–∏ —Å—Ü–µ–Ω–∞—Ä–∏—è–º–∏
            test_scenarios = [
                # –°—Ü–µ–Ω–∞—Ä–∏–π 1: –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å (–¥–æ–ª–∂–µ–Ω –ø–æ–ª—É—á–∏—Ç—å welcome)
                {
                    'user_id': 3001, 'name': '–ù–æ–≤—ã–π –ê–ª–µ–∫—Å–µ–π', 'username': 'new_alex',
                    'created_at': (now - timedelta(hours=2)).strftime('%Y-%m-%d %H:%M:%S'),
                    'welcome_sent': 0, 'blocked': 0, 'last_reminder': None,
                    'expected': 'welcome'
                },
                
                # –°—Ü–µ–Ω–∞—Ä–∏–π 2: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–ª—è reminder_day2
                {
                    'user_id': 3002, 'name': '–î–µ–Ω—å2 –ú–∞—Ä–∏—è', 'username': 'day2_maria',
                    'created_at': (now - timedelta(days=1)).strftime('%Y-%m-%d %H:%M:%S'),
                    'welcome_sent': 1, 'blocked': 0, 'last_reminder': None,
                    'expected': 'reminder_day2'
                },
                
                # –°—Ü–µ–Ω–∞—Ä–∏–π 3: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–ª—è reminder_day3
                {
                    'user_id': 3003, 'name': '–î–µ–Ω—å3 –ò–≤–∞–Ω', 'username': 'day3_ivan',
                    'created_at': (now - timedelta(days=2)).strftime('%Y-%m-%d %H:%M:%S'),
                    'welcome_sent': 1, 'blocked': 0, 'last_reminder': 'reminder_day2',
                    'expected': 'reminder_day3'
                },
                
                # –°—Ü–µ–Ω–∞—Ä–∏–π 4: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–ª—è reminder_day4
                {
                    'user_id': 3004, 'name': '–î–µ–Ω—å4 –ï–ª–µ–Ω–∞', 'username': 'day4_elena',
                    'created_at': (now - timedelta(days=3)).strftime('%Y-%m-%d %H:%M:%S'),
                    'welcome_sent': 1, 'blocked': 0, 'last_reminder': 'reminder_day3',
                    'expected': 'reminder_day4'
                },
                
                # –°—Ü–µ–Ω–∞—Ä–∏–π 5: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–ª—è reminder_day5
                {
                    'user_id': 3005, 'name': '–î–µ–Ω—å5 –ü–µ—Ç—Ä', 'username': 'day5_petr',
                    'created_at': (now - timedelta(days=5)).strftime('%Y-%m-%d %H:%M:%S'),
                    'welcome_sent': 1, 'blocked': 0, 'last_reminder': 'reminder_day4',
                    'expected': 'reminder_day5'
                },
                
                # –°—Ü–µ–Ω–∞—Ä–∏–π 6: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –ø–æ–∫—É–ø–∫–æ–π (–ù–ï –¥–æ–ª–∂–µ–Ω –ø–æ–ª—É—á–∞—Ç—å)
                {
                    'user_id': 3006, 'name': '–° –ø–æ–∫—É–ø–∫–æ–π –ê–Ω–Ω–∞', 'username': 'paid_anna',
                    'created_at': (now - timedelta(days=2)).strftime('%Y-%m-%d %H:%M:%S'),
                    'welcome_sent': 1, 'blocked': 0, 'last_reminder': None,
                    'expected': 'none', 'has_payment': True
                },
                
                # –°—Ü–µ–Ω–∞—Ä–∏–π 7: –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
                {
                    'user_id': 3007, 'name': '–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –°–µ—Ä–≥–µ–π', 'username': 'blocked_sergey',
                    'created_at': (now - timedelta(days=1)).strftime('%Y-%m-%d %H:%M:%S'),
                    'welcome_sent': 0, 'blocked': 1, 'last_reminder': None,
                    'expected': 'none'
                },
                
                # –°—Ü–µ–Ω–∞—Ä–∏–π 8: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, —É–∂–µ –ø–æ–ª—É—á–∏–≤—à–∏–π —Ç–µ–∫—É—â–µ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
                {
                    'user_id': 3008, 'name': '–£–∂–µ –ø–æ–ª—É—á–∏–ª –û–ª—å–≥–∞', 'username': 'already_got_olga',
                    'created_at': (now - timedelta(days=2)).strftime('%Y-%m-%d %H:%M:%S'),
                    'welcome_sent': 1, 'blocked': 0, 'last_reminder': 'reminder_day3',
                    'expected': 'none'
                },
                
                # –°—Ü–µ–Ω–∞—Ä–∏–π 9: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è edge case
                {
                    'user_id': 3009, 'name': 'Edge Case –î–º–∏—Ç—Ä–∏–π', 'username': 'edge_dmitry',
                    'created_at': (now - timedelta(days=10)).strftime('%Y-%m-%d %H:%M:%S'),
                    'welcome_sent': 1, 'blocked': 0, 'last_reminder': 'reminder_day5',
                    'expected': 'none'
                }
            ]
            
            for scenario in test_scenarios:
                await conn.execute("""
                    INSERT INTO users (user_id, first_name, username, created_at, welcome_message_sent,
                                     first_purchase, is_blocked, last_reminder_type, last_reminder_sent)
                    VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
                """, (
                    scenario['user_id'], scenario['name'], scenario['username'],
                    scenario['created_at'], scenario['welcome_sent'], 1,
                    scenario['blocked'], scenario['last_reminder'], None
                ))
                
                # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–∫—É–ø–∫—É –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                if scenario.get('has_payment'):
                    await conn.execute("""
                        INSERT INTO payments (user_id, amount, status)
                        VALUES (?, ?, ?)
                    """, (scenario['user_id'], 599.0, "succeeded"))
            
            await conn.commit()
        
        print("‚úÖ –†–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–∑–¥–∞–Ω—ã")
        print("üìä –°—Ü–µ–Ω–∞—Ä–∏–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
        for scenario in test_scenarios:
            print(f"  {scenario['name']} (ID: {scenario['user_id']}) - –æ–∂–∏–¥–∞–µ—Ç—Å—è: {scenario['expected']}")
    
    async def simulate_welcome_message_sending(self):
        """–°–∏–º—É–ª—è—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        print("\nüëã –°–ò–ú–£–õ–Ø–¶–ò–Ø –ü–†–ò–í–ï–¢–°–¢–í–ï–ù–ù–´–• –°–û–û–ë–©–ï–ù–ò–ô")
        print("="*50)
        
        async with aiosqlite.connect(self.test_db) as conn:
            conn.row_factory = aiosqlite.Row
            c = await conn.cursor()
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            await c.execute("""
                SELECT user_id, first_name, username, created_at
                FROM users
                WHERE welcome_message_sent = 0
                AND first_purchase = 1
                AND created_at <= datetime('now', '-1 hour')
                AND is_blocked = 0
                AND user_id NOT IN (
                    SELECT user_id FROM payments WHERE status = 'succeeded'
                )
            """)
            
            users = await c.fetchall()
        
        welcome_sent = 0
        for user in users:
            user_id = user['user_id']
            first_name = user['first_name']
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Å–ª–æ–≤–∏—è
            has_purchases = await has_user_purchases(user_id, self.test_db)
            if not has_purchases:
                message_data = get_message_text("welcome", first_name)
                
                # –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É
                self.monitoring_data['message_log'].append({
                    'timestamp': datetime.now().isoformat(),
                    'user_id': user_id,
                    'user_name': first_name,
                    'message_type': 'welcome',
                    'text': message_data['text'][:100] + "...",
                    'button': message_data['button_text'],
                    'action': message_data['callback_data']
                })
                
                print(f"üì§ Welcome –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} ({first_name})")
                welcome_sent += 1
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –±–∞–∑–µ
                async with aiosqlite.connect(self.test_db) as conn:
                    c = await conn.cursor()
                    await c.execute(
                        "UPDATE users SET welcome_message_sent = 1 WHERE user_id = ?",
                        (user_id,)
                    )
                    await conn.commit()
        
        self.monitoring_data['messages_sent'] += welcome_sent
        print(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {welcome_sent} –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π")
        
        return welcome_sent
    
    async def simulate_daily_reminders_sending(self):
        """–°–∏–º—É–ª—è—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
        print("\nüì¨ –°–ò–ú–£–õ–Ø–¶–ò–Ø –ï–ñ–ï–î–ù–ï–í–ù–´–• –ù–ê–ü–û–ú–ò–ù–ê–ù–ò–ô")
        print("="*50)
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
        async with aiosqlite.connect(self.test_db) as conn:
            conn.row_factory = aiosqlite.Row
            c = await conn.cursor()
            
            await c.execute("""
                SELECT user_id, first_name, username, created_at, last_reminder_type
                FROM users
                WHERE is_blocked = 0
                AND user_id NOT IN (
                    SELECT user_id FROM payments WHERE status = 'succeeded'
                )
                AND created_at IS NOT NULL
            """)
            
            users = await c.fetchall()
        
        current_time = datetime.now()
        reminders_sent = 0
        filtered_out = 0
        
        for user in users:
            user_id = user['user_id']
            first_name = user['first_name']
            created_at = user['created_at']
            last_reminder_type = user['last_reminder_type']
            
            print(f"\nüë§ –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} ({first_name})...")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
            is_blocked = await self._is_user_blocked(user_id)
            if is_blocked:
                print(f"  ‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω")
                filtered_out += 1
                continue
            
            is_old_user = await self._is_old_user(user_id)
            if is_old_user:
                print(f"  ‚ùå –°—Ç–∞—Ä—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")
                filtered_out += 1
                continue
            
            has_purchases = await has_user_purchases(user_id, self.test_db)
            if has_purchases:
                print(f"  ‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–º–µ–µ—Ç –ø–æ–∫—É–ø–∫–∏")
                filtered_out += 1
                continue
            
            # –í—ã—á–∏—Å–ª—è–µ–º –¥–Ω–∏ —Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
            try:
                registration_date = datetime.strptime(created_at, '%Y-%m-%d %H:%M:%S')
                days_since_registration = (current_time.date() - registration_date.date()).days
            except ValueError:
                print(f"  ‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã: {created_at}")
                filtered_out += 1
                continue
            
            print(f"  üìÖ –î–Ω–µ–π —Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {days_since_registration}")
            print(f"  üìù –ü–æ—Å–ª–µ–¥–Ω–µ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {last_reminder_type}")
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
            message_type = None
            if days_since_registration == 1 and last_reminder_type != "reminder_day2":
                message_type = "reminder_day2"
            elif days_since_registration == 2 and last_reminder_type != "reminder_day3":
                message_type = "reminder_day3"
            elif days_since_registration == 3 and last_reminder_type != "reminder_day4":
                message_type = "reminder_day4"
            elif days_since_registration >= 4 and last_reminder_type != "reminder_day5":
                message_type = "reminder_day5"
            
            if message_type:
                message_data = get_message_text(message_type, first_name)
                
                # –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É
                self.monitoring_data['message_log'].append({
                    'timestamp': datetime.now().isoformat(),
                    'user_id': user_id,
                    'user_name': first_name,
                    'message_type': message_type,
                    'text': message_data['text'][:100] + "...",
                    'button': message_data['button_text'],
                    'action': message_data['callback_data'],
                    'days_since_registration': days_since_registration
                })
                
                print(f"  ‚úÖ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º {message_type}")
                print(f"  üí∞ –¶–µ–Ω–∞: {message_data['text'].split('‚ÇΩ')[0].split()[-1]}‚ÇΩ")
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –±–∞–∑–µ
                async with aiosqlite.connect(self.test_db) as conn:
                    c = await conn.cursor()
                    await c.execute(
                        "UPDATE users SET last_reminder_type = ?, last_reminder_sent = ? WHERE user_id = ?",
                        (message_type, datetime.now().strftime('%Y-%m-%d %H:%M:%S'), user_id)
                    )
                    await conn.commit()
                
                reminders_sent += 1
            else:
                print(f"  ‚è≠Ô∏è –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è")
                filtered_out += 1
        
        self.monitoring_data['messages_sent'] += reminders_sent
        self.monitoring_data['users_filtered_out'] += filtered_out
        self.monitoring_data['users_processed'] = len(users)
        
        print(f"\nüìä –ò—Ç–æ–≥–æ:")
        print(f"  ‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: {reminders_sent}")
        print(f"  ‚è≠Ô∏è –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {filtered_out}")
        print(f"  üìã –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users)}")
        
        return reminders_sent
    
    async def _is_user_blocked(self, user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        async with aiosqlite.connect(self.test_db) as conn:
            c = await conn.cursor()
            await c.execute("SELECT is_blocked FROM users WHERE user_id = ?", (user_id,))
            result = await c.fetchone()
            return bool(result[0]) if result else False
    
    async def _is_old_user(self, user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ä–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        # –í —Ç–µ—Å—Ç–µ –≤—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–æ–≤—ã–µ
        return False
    
    def generate_detailed_report(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        print("\n" + "="*80)
        print("üìä –î–ï–¢–ê–õ–¨–ù–´–ô –û–¢–ß–ï–¢ –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê –í–û–†–û–ù–ö–ò")
        print("="*80)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        print(f"üìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        print(f"  üë• –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {self.monitoring_data['users_processed']}")
        print(f"  üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {self.monitoring_data['messages_sent']}")
        print(f"  ‚è≠Ô∏è –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {self.monitoring_data['users_filtered_out']}")
        
        # –ê–Ω–∞–ª–∏–∑ —Å–æ–æ–±—â–µ–Ω–∏–π
        if self.monitoring_data['message_log']:
            print(f"\nüìã –õ–û–ì –°–û–û–ë–©–ï–ù–ò–ô ({len(self.monitoring_data['message_log'])}):")
            
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Ç–∏–ø–∞–º
            message_types = {}
            for msg in self.monitoring_data['message_log']:
                msg_type = msg['message_type']
                if msg_type not in message_types:
                    message_types[msg_type] = []
                message_types[msg_type].append(msg)
            
            for msg_type, messages in message_types.items():
                print(f"\n  üìù {msg_type.upper()} ({len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π):")
                for msg in messages:
                    print(f"    üë§ {msg['user_name']} (ID: {msg['user_id']}) - {msg['text'][:60]}...")
                    if 'days_since_registration' in msg:
                        print(f"      üìÖ –î–Ω–µ–π —Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {msg['days_since_registration']}")
        
        # –ê–Ω–∞–ª–∏–∑ —Ü–µ–Ω
        if self.monitoring_data['message_log']:
            prices = []
            for msg in self.monitoring_data['message_log']:
                if '‚ÇΩ' in msg['text']:
                    try:
                        price = int(msg['text'].split('‚ÇΩ')[0].split()[-1])
                        prices.append(price)
                    except:
                        pass
            
            if prices:
                print(f"\nüí∞ –ê–ù–ê–õ–ò–ó –¶–ï–ù:")
                print(f"  üìä –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞: {sum(prices) / len(prices):.0f}‚ÇΩ")
                print(f"  üìà –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞: {max(prices)}‚ÇΩ")
                print(f"  üìâ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞: {min(prices)}‚ÇΩ")
                print(f"  üìã –í—Å–µ —Ü–µ–Ω—ã: {sorted(prices)}")
        
        # –û—à–∏–±–∫–∏
        if self.monitoring_data['errors']:
            print(f"\n‚ùå –û–®–ò–ë–ö–ò ({len(self.monitoring_data['errors'])}):")
            for error in self.monitoring_data['errors']:
                print(f"  ‚Ä¢ {error}")
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –≤ —Ñ–∞–π–ª
        report_file = f"funnel_report_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
        with open(report_file, 'w', encoding='utf-8') as f:
            json.dump(self.monitoring_data, f, ensure_ascii=False, indent=2)
        
        print(f"\nüíæ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Ñ–∞–π–ª: {report_file}")
    
    async def cleanup(self):
        """–û—á–∏—Å—Ç–∫–∞"""
        if self.test_db and os.path.exists(self.test_db):
            os.unlink(self.test_db)
            print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —É–¥–∞–ª–µ–Ω–∞")

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üî¨ –ñ–ò–í–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –í–û–†–û–ù–ö–ò")
    print("="*50)
    
    monitor = LiveFunnelMonitor()
    
    try:
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞
        await monitor.setup_monitoring_database()
        await monitor.create_diverse_test_data()
        
        # –ó–∞–ø—É—Å–∫ —Å–∏–º—É–ª—è—Ü–∏–π
        welcome_count = await monitor.simulate_welcome_message_sending()
        reminders_count = await monitor.simulate_daily_reminders_sending()
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞
        monitor.generate_detailed_report()
        
        print(f"\nüèÅ –ò–¢–û–ì–û–í–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢:")
        print(f"‚úÖ Welcome —Å–æ–æ–±—â–µ–Ω–∏–π: {welcome_count}")
        print(f"‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: {reminders_count}")
        print(f"‚úÖ –í—Å–µ–≥–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {welcome_count + reminders_count}")
        
        return 0
        
    finally:
        await monitor.cleanup()

if __name__ == "__main__":
    sys.exit(asyncio.run(main())) 