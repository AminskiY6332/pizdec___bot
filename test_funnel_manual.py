#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–æ—Ä–æ–Ω–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–µ–∑ –ø–æ–∫—É–ø–æ–∫
–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç –ª–æ–≥–∏–∫—É –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
"""

import asyncio
import sys
import os
import sqlite3
from datetime import datetime, timedelta
from typing import Dict, Any, List

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ PATH –¥–ª—è –∏–º–ø–æ—Ä—Ç–æ–≤
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –≤–æ—Ä–æ–Ω–∫–∏
from onboarding_config import (
    get_day_config,
    get_message_text,
    ONBOARDING_FUNNEL,
    MESSAGE_TEXTS
)

class FunnelTester:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤–æ—Ä–æ–Ω–∫–∏"""

    def __init__(self):
        self.test_results = []
        self.errors = []

    def log_test(self, test_name: str, result: bool, message: str = ""):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Ç–µ—Å—Ç–∞"""
        status = "‚úÖ PASS" if result else "‚ùå FAIL"
        self.test_results.append({
            'name': test_name,
            'result': result,
            'message': message
        })
        print(f"{status} {test_name}: {message}")

        if not result:
            self.errors.append(f"{test_name}: {message}")

    def test_funnel_configuration(self):
        """–¢–µ—Å—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –≤–æ—Ä–æ–Ω–∫–∏"""
        print("\nüîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –≤–æ—Ä–æ–Ω–∫–∏...")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –≤–æ—Ä–æ–Ω–∫–∏
        expected_days = [1, 2, 3, 4, 5]
        for day in expected_days:
            config = get_day_config(day)
            has_required_fields = all(key in config for key in ['message_type', 'tariff_key', 'price', 'description'])
            self.log_test(
                f"–î–µ–Ω—å {day} - —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏",
                has_required_fields,
                f"–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: {config}" if has_required_fields else f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–æ–ª—è –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {config}"
            )

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∏–∏ —Ü–µ–Ω
        day2_price = get_day_config(2)['price']
        day3_price = get_day_config(3)['price']
        day4_price = get_day_config(4)['price']
        day5_price = get_day_config(5)['price']

        price_progression_correct = (
            day2_price == 399 and
            day3_price == 399 and
            day4_price == 599 and
            day5_price == 1199
        )

        self.log_test(
            "–ü—Ä–æ–≥—Ä–µ—Å—Å–∏—è —Ü–µ–Ω",
            price_progression_correct,
            f"–¶–µ–Ω—ã: –î–µ–Ω—å2={day2_price}, –î–µ–Ω—å3={day3_price}, –î–µ–Ω—å4={day4_price}, –î–µ–Ω—å5={day5_price}"
        )

    def test_message_texts(self):
        """–¢–µ—Å—Ç —Ç–µ–∫—Å—Ç–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        print("\nüìù –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π...")

        test_user_name = "–¢–µ—Å—Ç–æ–≤—ã–π –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π
        for message_type in MESSAGE_TEXTS.keys():
            message_data = get_message_text(message_type, test_user_name)

            has_required_fields = all(key in message_data for key in ['text', 'button_text', 'callback_data'])
            self.log_test(
                f"–°–æ–æ–±—â–µ–Ω–∏–µ {message_type} - —Å—Ç—Ä—É–∫—Ç—É—Ä–∞",
                has_required_fields,
                f"–ü–æ–ª—è: {list(message_data.keys())}" if has_required_fields else f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–æ–ª—è"
            )

            if has_required_fields:
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞
                text_not_empty = len(message_data['text'].strip()) > 0
                button_not_empty = len(message_data['button_text'].strip()) > 0
                callback_not_empty = len(message_data['callback_data'].strip()) > 0

                self.log_test(
                    f"–°–æ–æ–±—â–µ–Ω–∏–µ {message_type} - —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ",
                    text_not_empty and button_not_empty and callback_not_empty,
                    f"–¢–µ–∫—Å—Ç: {message_data['text'][:50]}..., –ö–Ω–æ–ø–∫–∞: {message_data['button_text']}, –î–µ–π—Å—Ç–≤–∏–µ: {message_data['callback_data']}"
                )

    def test_funnel_flow_logic(self):
        """–¢–µ—Å—Ç –ª–æ–≥–∏–∫–∏ –ø–æ—Ç–æ–∫–∞ –≤–æ—Ä–æ–Ω–∫–∏"""
        print("\nüîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–≥–∏–∫–∏ –ø–æ—Ç–æ–∫–∞ –≤–æ—Ä–æ–Ω–∫–∏...")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤
        day1_config = get_day_config(1)
        has_time_offset = 'time_after_registration' in day1_config
        correct_offset = day1_config.get('time_after_registration') == timedelta(hours=1)

        self.log_test(
            "–î–µ–Ω—å 1 - –≤—Ä–µ–º–µ–Ω–Ω–æ–π –æ—Ñ—Å–µ—Ç",
            has_time_offset and correct_offset,
            f"–û—Ñ—Å–µ—Ç: {day1_config.get('time_after_registration')}"
        )

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –¥–Ω–µ–π 2-5
        for day in range(2, 6):
            config = get_day_config(day)
            correct_time = config.get('time') == '11:15'
            self.log_test(
                f"–î–µ–Ω—å {day} - –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏",
                correct_time,
                f"–í—Ä–µ–º—è: {config.get('time')}"
            )

    def test_callback_actions(self):
        """–¢–µ—Å—Ç –¥–µ–π—Å—Ç–≤–∏–π –∫–Ω–æ–ø–æ–∫"""
        print("\nüéØ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π –∫–Ω–æ–ø–æ–∫...")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –¥–Ω—è
        expected_callbacks = {
            'welcome': 'proceed_to_tariff',
            'reminder_day2': 'pay_399',
            'reminder_day3': 'pay_399',
            'reminder_day4': 'pay_599',
            'reminder_day5': 'pay_1199'
        }

        for message_type, expected_callback in expected_callbacks.items():
            message_data = get_message_text(message_type, "–¢–µ—Å—Ç")
            actual_callback = message_data.get('callback_data')

            self.log_test(
                f"–î–µ–π—Å—Ç–≤–∏–µ {message_type}",
                actual_callback == expected_callback,
                f"–û–∂–∏–¥–∞–ª–æ—Å—å: {expected_callback}, –ü–æ–ª—É—á–µ–Ω–æ: {actual_callback}"
            )

    def test_price_consistency(self):
        """–¢–µ—Å—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Ü–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏ —Ç–µ–∫—Å—Ç–∞—Ö"""
        print("\nüí∞ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Ü–µ–Ω...")

        for day in range(2, 6):
            config = get_day_config(day)
            expected_price = config['price']
            message_type = config['message_type']

            message_data = get_message_text(message_type, "–¢–µ—Å—Ç")
            text = message_data['text']
            callback = message_data['callback_data']

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–Ω—ã –≤ —Ç–µ–∫—Å—Ç–µ
            price_in_text = f"{expected_price}‚ÇΩ" in text

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–Ω—ã –≤ callback_data
            price_in_callback = f"pay_{expected_price}" in callback or message_type == "reminder_day5"

            self.log_test(
                f"–î–µ–Ω—å {day} - —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ü–µ–Ω",
                price_in_text and (price_in_callback or message_type == "reminder_day5"),
                f"–¶–µ–Ω–∞ {expected_price}‚ÇΩ –≤ —Ç–µ–∫—Å—Ç–µ: {price_in_text}, –≤ callback: {price_in_callback}"
            )

    def simulate_user_journey(self):
        """–°–∏–º—É–ª—è—Ü–∏—è –ø—É—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ –≤–æ—Ä–æ–Ω–∫—É"""
        print("\nüöÄ –°–∏–º—É–ª—è—Ü–∏—è –ø—É—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...")

        test_user = "–ê–ª–µ–∫—Å–µ–π"
        journey_log = []

        # –î–µ–Ω—å 1 - —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        day1_message = get_message_text("welcome", test_user)
        journey_log.append(f"–î–µ–Ω—å 1: {day1_message['text'][:100]}...")

        # –î–Ω–∏ 2-5 - –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
        for day in range(2, 6):
            config = get_day_config(day)
            message_type = config['message_type']
            message_data = get_message_text(message_type, test_user)
            journey_log.append(f"–î–µ–Ω—å {day}: {message_data['text'][:100]}...")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –ø—É—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ª–æ–≥–∏—á–µ–Ω
        journey_complete = len(journey_log) == 5
        self.log_test(
            "–ü–æ–ª–Ω—ã–π –ø—É—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
            journey_complete,
            f"–°–æ–æ–±—â–µ–Ω–∏–π –≤ –≤–æ—Ä–æ–Ω–∫–µ: {len(journey_log)}"
        )

        # –í—ã–≤–æ–¥ –ø—É—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        print("\nüìã –ü—É—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ –≤–æ—Ä–æ–Ω–∫—É:")
        for step in journey_log:
            print(f"  {step}")

    def generate_report(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏"""
        print("\n" + "="*60)
        print("üìä –û–¢–ß–ï–¢ –û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ò –í–û–†–û–ù–ö–ò")
        print("="*60)

        total_tests = len(self.test_results)
        passed_tests = sum(1 for test in self.test_results if test['result'])
        failed_tests = total_tests - passed_tests

        success_rate = (passed_tests / total_tests * 100) if total_tests > 0 else 0

        print(f"–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {total_tests}")
        print(f"–ü—Ä–æ—à–ª–∏: {passed_tests}")
        print(f"–ü—Ä–æ–≤–∞–ª–∏–ª–∏—Å—å: {failed_tests}")
        print(f"–£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {success_rate:.1f}%")

        if self.errors:
            print(f"\n‚ùå –û–®–ò–ë–ö–ò ({len(self.errors)}):")
            for error in self.errors:
                print(f"  ‚Ä¢ {error}")
        else:
            print(f"\n‚úÖ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò –£–°–ü–ï–®–ù–û!")

        return failed_tests == 0

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤"""
    print("üî¨ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –í–û–†–û–ù–ö–ò –°–û–û–ë–©–ï–ù–ò–ô")
    print("="*50)

    tester = FunnelTester()

    # –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
    tester.test_funnel_configuration()
    tester.test_message_texts()
    tester.test_funnel_flow_logic()
    tester.test_callback_actions()
    tester.test_price_consistency()
    tester.simulate_user_journey()

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞
    success = tester.generate_report()

    return 0 if success else 1

if __name__ == "__main__":
    sys.exit(main())
