# keyboards/payments.py
"""
–ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –ø–ª–∞—Ç–µ–∂–µ–π –∏ –ø–æ–¥–ø–∏—Å–æ–∫
"""

import logging
from typing import Optional
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from config import TARIFFS, ADMIN_IDS
from database import check_database_user, get_user_payments

from logger import get_logger
logger = get_logger('keyboards')

async def create_subscription_keyboard(hide_mini_tariff: bool = False) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞—ë—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ç–∞—Ä–∏—Ñ–∞–º–∏ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏."""
    try:
        keyboard = [
            [
                InlineKeyboardButton(
                    text="üíé –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ",
                    callback_data="ignore"
                )
            ]
        ]

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–∏–µ —Ç–∞—Ä–∏—Ñ—ã –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å
        available_tariffs = {k: v for k, v in TARIFFS.items() if k != "admin_premium"}
        if hide_mini_tariff:
            available_tariffs = {k: v for k, v in available_tariffs.items() if k != "–º–∏–Ω–∏"}

        for plan_key, plan_details in available_tariffs.items():
            keyboard.append([
                InlineKeyboardButton(
                    text=plan_details["display"],
                    callback_data=plan_details["callback"]
                )
            ])

        keyboard.append([
            InlineKeyboardButton(text="üîô –í –º–µ–Ω—é", callback_data="back_to_menu")
        ])

        logger.debug(f"–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Ç–∞—Ä–∏—Ñ–æ–≤ —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ: {len(keyboard)} —Å—Ç—Ä–æ–∫, hide_mini_tariff={hide_mini_tariff}")
        return InlineKeyboardMarkup(inline_keyboard=keyboard)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ create_subscription_keyboard: {e}", exc_info=True)
        return InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—à–∏–±–∫–∞, –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="back_to_menu")]
        ])

async def create_payment_only_keyboard(user_id: int, time_since_registration: float, days_since_registration: int, last_reminder_type: str = None, is_old_user: bool = False) -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞—ë—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –æ–ø–ª–∞—Ç—ã –¥–ª—è –Ω–µ–æ–ø–ª–∞—Ç–∏–≤—à–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.

    Args:
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        time_since_registration: –í—Ä–µ–º—è —Å –º–æ–º–µ–Ω—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        days_since_registration: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π —Å –º–æ–º–µ–Ω—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        last_reminder_type: –¢–∏–ø –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
        is_old_user: –§–ª–∞–≥, —É–∫–∞–∑—ã–≤–∞—é—â–∏–π, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—Ç–∞—Ä—ã–º (–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –¥–æ –æ—Ç—Å–µ—á–∫–∏)

    Returns:
        InlineKeyboardMarkup: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –æ–ø–ª–∞—Ç—ã
    """
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã
        subscription_data = await check_database_user(user_id)
        payments = await get_user_payments(user_id)
        is_paying_user = bool(payments) or (subscription_data and len(subscription_data) > 5 and not bool(subscription_data[5]))
        logger.debug(f"create_payment_only_keyboard: user_id={user_id}, is_paying_user={is_paying_user}, days_since_registration={days_since_registration}, time_since_registration={time_since_registration}, is_old_user={is_old_user}")

        if is_paying_user:
            return await create_subscription_keyboard(hide_mini_tariff=False)

        keyboard = []
        available_tariffs = {k: v for k, v in TARIFFS.items() if k != "admin_premium"}

        # –î–ª—è —Å—Ç–∞—Ä—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ —Ç–∞—Ä–∏—Ñ—ã
        if is_old_user:
            keyboard.extend([
                [InlineKeyboardButton(text=available_tariffs["–∫–æ–º—Ñ–æ—Ä—Ç"]["display"], callback_data="pay_1199")],
                [InlineKeyboardButton(text=available_tariffs["–ª–∞–π—Ç"]["display"], callback_data="pay_599")],
                [InlineKeyboardButton(text=available_tariffs["–º–∏–Ω–∏"]["display"], callback_data="pay_399")],
                [InlineKeyboardButton(text=available_tariffs["–∞–≤–∞—Ç–∞—Ä"]["display"], callback_data="pay_590")]
            ])
            logger.debug(f"–°–æ–∑–¥–∞–Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –ø–æ–ª–Ω—ã–º —Å–ø–∏—Å–∫–æ–º —Ç–∞—Ä–∏—Ñ–æ–≤ –¥–ª—è —Å—Ç–∞—Ä–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è user_id={user_id}")
        else:
            # –õ–æ–≥–∏–∫–∞ –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–¥–∏–Ω —Ç–∞—Ä–∏—Ñ
            if days_since_registration == 0:
                logger.debug(f"Day 0: time_since_registration={time_since_registration}")
                if time_since_registration <= 1800:  # –î–æ 30 –º–∏–Ω—É—Ç
                    tariff_key = "–∫–æ–º—Ñ–æ—Ä—Ç"
                    callback_data = "pay_1199"
                elif time_since_registration <= 5400:  # 30‚Äì90 –º–∏–Ω—É—Ç
                    tariff_key = "–ª–∞–π—Ç"
                    callback_data = "pay_599"
                else:  # –ü–æ—Å–ª–µ 90 –º–∏–Ω—É—Ç
                    tariff_key = "–º–∏–Ω–∏"
                    callback_data = "pay_399"
            elif days_since_registration == 1:
                tariff_key = "–ª–∞–π—Ç"
                callback_data = "pay_599"
            elif 2 <= days_since_registration <= 4:
                tariff_key = "–º–∏–Ω–∏"
                callback_data = "pay_399"
            else:
                # –î–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å days_since_registration >= 5 –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ —Ç–∞—Ä–∏—Ñ—ã
                keyboard.extend([
                    [InlineKeyboardButton(text=available_tariffs["–∫–æ–º—Ñ–æ—Ä—Ç"]["display"], callback_data="pay_1199")],
                    [InlineKeyboardButton(text=available_tariffs["–ª–∞–π—Ç"]["display"], callback_data="pay_599")],
                    [InlineKeyboardButton(text=available_tariffs["–º–∏–Ω–∏"]["display"], callback_data="pay_399")],
                    [InlineKeyboardButton(text=available_tariffs["–∞–≤–∞—Ç–∞—Ä"]["display"], callback_data="pay_590")]
                ])
                logger.debug(f"–°–æ–∑–¥–∞–Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –ø–æ–ª–Ω—ã–º —Å–ø–∏—Å–∫–æ–º —Ç–∞—Ä–∏—Ñ–æ–≤ –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è user_id={user_id} —Å days_since_registration={days_since_registration}")
                keyboard.append([InlineKeyboardButton(text="üîô –í –º–µ–Ω—é", callback_data="back_to_menu_safe")])
                keyboard.append([InlineKeyboardButton(text="‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–∞—Ä–∏—Ñ–∞—Ö", callback_data="tariff_info")])
                return InlineKeyboardMarkup(inline_keyboard=keyboard)

            tariff = TARIFFS.get(tariff_key)
            if not tariff:
                logger.error(f"–¢–∞—Ä–∏—Ñ {tariff_key} –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è user_id={user_id}")
                return InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="‚ùå –û—à–∏–±–∫–∞", callback_data="error")]
                ])

            keyboard.append([InlineKeyboardButton(text=tariff["display"], callback_data=callback_data)])

        # –£—Å–ª–æ–≤–Ω–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ "–í –º–µ–Ω—é" –∏ "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–∞—Ä–∏—Ñ–∞—Ö"
        generations_left = subscription_data[0] if subscription_data and len(subscription_data) > 0 else 0
        avatar_left = subscription_data[1] if subscription_data and len(subscription_data) > 1 else 0
        if generations_left > 0 or avatar_left > 0 or user_id in ADMIN_IDS:
            keyboard.append([InlineKeyboardButton(text="üîô –í –º–µ–Ω—é", callback_data="back_to_menu_safe")])
            keyboard.append([InlineKeyboardButton(text="‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–∞—Ä–∏—Ñ–∞—Ö", callback_data="tariff_info")])
        else:
            keyboard.append([InlineKeyboardButton(text="üîê –ö—É–ø–∏ –ø–∞–∫–µ—Ç –¥–ª—è –¥–æ—Å—Ç—É–ø–∞", callback_data="subscribe")])

        logger.debug(f"–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –æ–ø–ª–∞—Ç—ã —Å–æ–∑–¥–∞–Ω–∞ –¥–ª—è user_id={user_id}: days={days_since_registration}, time={time_since_registration}, is_old_user={is_old_user}")
        return InlineKeyboardMarkup(inline_keyboard=keyboard)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ create_payment_only_keyboard –¥–ª—è user_id={user_id}: {e}", exc_info=True)
        return InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—à–∏–±–∫–∞", callback_data="error")]
        ]) 
