# keyboards/broadcast.py
"""
–ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è —Ä–∞—Å—Å—ã–ª–æ–∫ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
"""

import logging
from typing import List, Dict
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from config import ADMIN_IDS, ALLOWED_BROADCAST_CALLBACKS
from database import check_database_user, get_user_payments

from logger import get_logger
logger = get_logger('keyboards')

async def create_broadcast_keyboard() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞—ë—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏."""
    try:
        keyboard = [
            [InlineKeyboardButton(text="üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –±–µ–∑ —Ç–µ–∫—Å—Ç–∞", callback_data="send_broadcast_no_text")],
            [InlineKeyboardButton(text="üîô –û—Ç–º–µ–Ω–∞", callback_data="admin_panel")]
        ]
        return InlineKeyboardMarkup(inline_keyboard=keyboard)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ create_broadcast_keyboard: {e}", exc_info=True)
        return InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—à–∏–±–∫–∞, –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="back_to_menu")]
        ])

async def create_broadcast_with_payment_audience_keyboard() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞—ë—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–±–æ—Ä–∞ –∞—É–¥–∏—Ç–æ—Ä–∏–∏ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ —Å –∫–Ω–æ–ø–∫–æ–π –æ–ø–ª–∞—Ç—ã."""
    try:
        keyboard = [
            [InlineKeyboardButton(text="üë• –í—Å–µ–º", callback_data="broadcast_with_payment_all")],
            [InlineKeyboardButton(text="üí≥ –û–ø–ª–∞—Ç–∏–≤—à–∏–º", callback_data="broadcast_with_payment_paid")],
            [InlineKeyboardButton(text="üÜì –ù–µ –æ–ø–ª–∞—Ç–∏–≤—à–∏–º", callback_data="broadcast_with_payment_non_paid")],
            [InlineKeyboardButton(text="üîô –û—Ç–º–µ–Ω–∞", callback_data="admin_panel")]
        ]
        logger.debug("–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –∞—É–¥–∏—Ç–æ—Ä–∏–∏ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ —Å –∫–Ω–æ–ø–∫–æ–π –æ–ø–ª–∞—Ç—ã —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        return InlineKeyboardMarkup(inline_keyboard=keyboard)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ create_broadcast_with_payment_audience_keyboard: {e}", exc_info=True)
        return InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—à–∏–±–∫–∞, –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="back_to_menu")]
        ])

async def create_dynamic_broadcast_keyboard(buttons: List[Dict[str, str]], user_id: int) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞—ë—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–ø–∏—Å–∫–∞ –∫–Ω–æ–ø–æ–∫ —Å —É—á—ë—Ç–æ–º —Å—Ç–∞—Ç—É—Å–∞ –æ–ø–ª–∞—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    try:
        keyboard = []
        row = []
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã –∏ —Ä–µ—Å—É—Ä—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        subscription_data = await check_database_user(user_id)
        payments = await get_user_payments(user_id)
        is_paying_user = bool(payments) or (subscription_data and len(subscription_data) > 5 and not bool(subscription_data[5]))
        has_resources = subscription_data and len(subscription_data) > 1 and (subscription_data[0] > 0 or subscription_data[1] > 0)
        is_admin = user_id in ADMIN_IDS

        for button in buttons[:3]:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 3 –∫–Ω–æ–ø–æ–∫
            button_text = button["text"][:64]  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É —Ç–µ–∫—Å—Ç–∞ –∫–Ω–æ–ø–∫–∏
            callback_data = button["callback_data"][:64]  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É callback
            # –ó–∞–º–µ–Ω—è–µ–º –≤—Å–µ callback'–∏ –∏–∑ ALLOWED_BROADCAST_CALLBACKS (–∫—Ä–æ–º–µ 'subscribe') –Ω–∞ 'subscribe' –¥–ª—è –Ω–µ–æ–ø–ª–∞—Ç–∏–≤—à–∏—Ö –±–µ–∑ —Ä–µ—Å—É—Ä—Å–æ–≤
            if (not is_paying_user and not has_resources and not is_admin and
                callback_data in ALLOWED_BROADCAST_CALLBACKS and callback_data != "subscribe"):
                callback_data = "subscribe"
                logger.debug(f"–ó–∞–º–µ–Ω—ë–Ω callback_data='{button['callback_data']}' –Ω–∞ 'subscribe' –¥–ª—è user_id={user_id}")
            row.append(InlineKeyboardButton(text=button_text, callback_data=callback_data))
            if len(row) == 2:  # –ú–∞–∫—Å–∏–º—É–º 2 –∫–Ω–æ–ø–∫–∏ –≤ —Å—Ç—Ä–æ–∫–µ
                keyboard.append(row)
                row = []
        if row:
            keyboard.append(row)
        logger.debug(f"–°–æ–∑–¥–∞–Ω–∞ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è user_id={user_id} —Å {len(buttons)} –∫–Ω–æ–ø–∫–∞–º–∏: {buttons}")
        return InlineKeyboardMarkup(inline_keyboard=keyboard)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ create_dynamic_broadcast_keyboard –¥–ª—è user_id={user_id}: {e}", exc_info=True)
        return InlineKeyboardMarkup(inline_keyboard=[]) 