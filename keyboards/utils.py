# keyboards/utils.py
"""
–£—Ç–∏–ª–∏—Ç–∞—Ä–Ω—ã–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∏ –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
"""

import logging
import os
from aiogram import Bot
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.enums import ParseMode

from logger import get_logger
logger = get_logger('keyboards')

async def create_photo_upload_keyboard() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞—ë—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π."""
    try:
        keyboard = [
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞ –∑–∞–≥—Ä—É–∑–∫–∏", callback_data="cancel_upload")],
            [InlineKeyboardButton(text="‚ùì –ü–æ–º–æ—â—å", callback_data="help_upload")]
        ]
        return InlineKeyboardMarkup(inline_keyboard=keyboard)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ create_photo_upload_keyboard: {e}", exc_info=True)
        return InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—à–∏–±–∫–∞, –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="back_to_menu")]
        ])

async def create_video_status_keyboard() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞—ë—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ –≤–∏–¥–µ–æ."""
    try:
        keyboard = [
            [InlineKeyboardButton(text="üìã –ú–æ–∏ –≤–∏–¥–µ–æ", callback_data="my_videos")],
            [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")]
        ]
        return InlineKeyboardMarkup(inline_keyboard=keyboard)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ create_video_status_keyboard: {e}", exc_info=True)
        return InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—à–∏–±–∫–∞, –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="back_to_menu")]
        ])

async def send_avatar_training_message(bot, user_id: int, text: str, reply_markup=None, parse_mode=ParseMode.MARKDOWN) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –∞–≤–∞—Ç–∞—Ä–∞ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è."""
    try:
        avatar_image_path = "/root/axidi_test/images/avatar.img"

        if os.path.exists(avatar_image_path):
            try:
                with open(avatar_image_path, 'rb') as photo:
                    await bot.send_photo(
                        chat_id=user_id,
                        photo=photo,
                        caption=text,
                        reply_markup=reply_markup,
                        parse_mode=parse_mode
                    )
                return
            except Exception as e:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å avatar.img –¥–ª—è user_id={user_id}: {e}", exc_info=True)

        await bot.send_message(
            chat_id=user_id,
            text=text,
            reply_markup=reply_markup,
            parse_mode=parse_mode
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ send_avatar_training_message –¥–ª—è user_id={user_id}: {e}", exc_info=True)
        await bot.send_message(
            chat_id=user_id,
            text="‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")]
            ]),
            parse_mode=ParseMode.MARKDOWN
        ) 
