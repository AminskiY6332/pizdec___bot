# keyboards/user_profile.py
"""
–ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–≤–∞—Ç–∞—Ä–∞–º–∏
"""

import logging
from typing import Optional
from aiogram import Bot
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from database import check_user_resources, get_user_payments, get_user_trainedmodels, get_active_trainedmodel, check_database_user

from logger import get_logger
logger = get_logger('keyboards')

async def create_user_profile_keyboard(user_id: int, bot: Bot) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞—ë—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    try:
        subscription_data = await check_database_user(user_id)
        generations_left, avatar_left = (0, 0)

        if subscription_data and len(subscription_data) >= 2:
            generations_left, avatar_left = subscription_data[0], subscription_data[1]
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –≤ create_user_profile_keyboard –¥–ª—è user_id={user_id}: {e}")
        generations_left, avatar_left = ('?', '?')

    try:
        keyboard = [
            [
                InlineKeyboardButton(
                    text=f"üí∞ –ë–∞–ª–∞–Ω—Å: {generations_left} –ø–µ—á–µ–Ω–µ–∫, {avatar_left} –∞–≤–∞—Ç–∞—Ä",
                    callback_data="check_subscription"
                )
            ],
            [InlineKeyboardButton(text="üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="user_stats")],
            [InlineKeyboardButton(text="üí≥ –ò—Å—Ç–æ—Ä–∏—è –ø–ª–∞—Ç–µ–∂–µ–π", callback_data="payment_history")],
            [InlineKeyboardButton(text="üìã –°—Ç–∞—Ç—É—Å –æ–±—É—á–µ–Ω–∏—è", callback_data="check_training")],
            [InlineKeyboardButton(text="üë• –ú–æ–∏ –∞–≤–∞—Ç–∞—Ä—ã", callback_data="my_avatars")],
            [InlineKeyboardButton(text="‚ûï –°–æ–∑–¥–∞—Ç—å –∞–≤–∞—Ç–∞—Ä", callback_data="train_flux")],
            [InlineKeyboardButton(text="üìß –ò–∑–º–µ–Ω–∏—Ç—å email", callback_data="change_email")],
            [InlineKeyboardButton(text="üìÑ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ", url="https://telegra.ph/Polzovatelskoe-soglashenie-07-26-12")],
            [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")]
        ]

        logger.debug(f"–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞ —Å–æ–∑–¥–∞–Ω–∞ –¥–ª—è user_id={user_id}")
        return InlineKeyboardMarkup(inline_keyboard=keyboard)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ create_user_profile_keyboard –¥–ª—è user_id={user_id}: {e}", exc_info=True)
        return InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—à–∏–±–∫–∞, –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="back_to_menu")]
        ])

async def create_avatar_selection_keyboard(user_id: int) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞—ë—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–±–æ—Ä–∞ –∞–≤–∞—Ç–∞—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    try:
        models = await get_user_trainedmodels(user_id)
        active_model_data = await get_active_trainedmodel(user_id)
        active_avatar_id = active_model_data[0] if active_model_data else None
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–µ–π –≤ create_avatar_selection_keyboard –¥–ª—è user_id={user_id}: {e}")
        models = []
        active_avatar_id = None

    try:
        keyboard = []
        ready_avatars_exist = False

        if models:
            for model_tuple in models:
                if len(model_tuple) >= 9:
                    avatar_id, _, _, status, _, _, _, _, avatar_name = model_tuple[:9]
                    display_name = avatar_name if avatar_name else f"–ê–≤–∞—Ç–∞—Ä {avatar_id}"

                    if status == 'success':
                        ready_avatars_exist = True
                        if avatar_id == active_avatar_id:
                            button_text = f"‚úÖ {display_name} (–∞–∫—Ç–∏–≤–Ω—ã–π)"
                        else:
                            button_text = f"üîò –í—ã–±—Ä–∞—Ç—å: {display_name}"
                        keyboard.append([
                            InlineKeyboardButton(text=button_text, callback_data=f"select_avatar_{avatar_id}")
                        ])
                else:
                    logger.warning(f"–ù–µ–ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –º–æ–¥–µ–ª–∏ –¥–ª—è user_id={user_id}: {model_tuple}")

        if not ready_avatars_exist:
            keyboard.append([InlineKeyboardButton(text="‚ÑπÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –≥–æ—Ç–æ–≤—ã—Ö –∞–≤–∞—Ç–∞—Ä–æ–≤", callback_data="no_ready_avatars_info")])

        keyboard.extend([
            [InlineKeyboardButton(text="‚ûï –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∞–≤–∞—Ç–∞—Ä", callback_data="train_flux")],
            [InlineKeyboardButton(text="üìã –°—Ç–∞—Ç—É—Å –≤—Å–µ—Ö –∞–≤–∞—Ç–∞—Ä–æ–≤", callback_data="check_training")],
            [InlineKeyboardButton(text="üîô –í –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç", callback_data="user_profile")]
        ])

        return InlineKeyboardMarkup(inline_keyboard=keyboard)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ create_avatar_selection_keyboard –¥–ª—è user_id={user_id}: {e}", exc_info=True)
        return InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—à–∏–±–∫–∞, –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="back_to_menu")]
        ])

async def create_training_keyboard(user_id: int, photo_count: int) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞—ë—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ–±—É—á–µ–Ω–∏—è –∞–≤–∞—Ç–∞—Ä–∞."""
    try:
        keyboard = []

        if photo_count >= 10:
            keyboard.append([InlineKeyboardButton(text="üöÄ –ù–∞—á–∞—Ç—å –æ–±—É—á–µ–Ω–∏–µ!", callback_data="confirm_start_training")])

        if photo_count < 20:
            keyboard.append([
                InlineKeyboardButton(
                    text=f"üì∏ –î–æ–±–∞–≤–∏—Ç—å –µ—â–µ ({photo_count}/20)",
                    callback_data="continue_upload"
                )
            ])

        keyboard.append([InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="user_profile")])

        logger.debug(f"–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –æ–±—É—á–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∞ –¥–ª—è user_id={user_id}, photo_count={photo_count}")
        return InlineKeyboardMarkup(inline_keyboard=keyboard)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ create_training_keyboard –¥–ª—è user_id={user_id}: {e}", exc_info=True)
        return InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—à–∏–±–∫–∞, –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="back_to_menu")]
        ])

async def create_rating_keyboard(
    generation_type: Optional[str] = None,
    model_key: Optional[str] = None,
    user_id: Optional[int] = None,
    bot: Optional[Bot] = None
) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞—ë—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –æ—Ü–µ–Ω–∫–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞."""
    try:
        keyboard = [
            [
                InlineKeyboardButton(text="1‚≠ê", callback_data="rate_1"),
                InlineKeyboardButton(text="2‚≠ê", callback_data="rate_2"),
                InlineKeyboardButton(text="3‚≠ê", callback_data="rate_3"),
                InlineKeyboardButton(text="4‚≠ê", callback_data="rate_4"),
                InlineKeyboardButton(text="5‚≠ê", callback_data="rate_5")
            ],
            [
                InlineKeyboardButton(text="üîÑ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å", callback_data="repeat_last_generation"),
                InlineKeyboardButton(text="‚ú® –ù–æ–≤–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è", callback_data="generate_menu")
            ]
        ]

        if user_id and bot:
            try:
                subscription_data = await check_user_resources(bot, user_id, required_photos=5)
                if isinstance(subscription_data, tuple) and len(subscription_data) >= 2:
                    generations_left = subscription_data[0]
                    if generations_left < 5:
                        keyboard.append([InlineKeyboardButton(text="üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å", callback_data="subscribe")])
                else:
                    logger.warning(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è user_id={user_id}: {subscription_data}")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–∞ –≤ create_rating_keyboard –¥–ª—è user_id={user_id}: {e}", exc_info=True)

        keyboard.append([InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")])
        return InlineKeyboardMarkup(inline_keyboard=keyboard)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ create_rating_keyboard –¥–ª—è user_id={user_id}: {e}", exc_info=True)
        return InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—à–∏–±–∫–∞, –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="back_to_menu")]
        ])

async def create_payment_success_keyboard(user_id: int) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞—ë—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã."""
    try:
        keyboard = [
            [InlineKeyboardButton(text="‚ûï –°–æ–∑–¥–∞—Ç—å –∞–≤–∞—Ç–∞—Ä", callback_data="train_flux")],
            [InlineKeyboardButton(text="‚ú® –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ñ–æ—Ç–æ", callback_data="generate_menu")],
            [InlineKeyboardButton(text="üè† –í –º–µ–Ω—é", callback_data="back_to_menu")]
        ]
        return InlineKeyboardMarkup(inline_keyboard=keyboard)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ create_payment_success_keyboard –¥–ª—è user_id={user_id}: {e}", exc_info=True)
        return InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—à–∏–±–∫–∞, –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="back_to_menu")]
        ]) 
