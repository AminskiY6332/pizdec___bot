#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∞–ª—å–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ send_daily_reminders —Å –ø–æ–¥–º–µ–Ω–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
"""

import asyncio
import sys
import os
import aiosqlite
import tempfile
from datetime import datetime, timedelta
from unittest.mock import AsyncMock, patch, MagicMock
from typing import Dict, Any, List

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–æ–≤
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

# –ú–æ–∫–∏—Ä—É–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
mock_modules = {
    'config': MagicMock(),
    'handlers.utils': MagicMock(),
    'keyboards': MagicMock(),
    'database': MagicMock(),
    'logger': MagicMock(),
    'pytz': MagicMock()
}

for name, mock in mock_modules.items():
    sys.modules[name] = mock

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–æ–∫–∏
sys.modules['config'].DATABASE_PATH = None  # –ë—É–¥–µ—Ç –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω –≤ —Ç–µ—Å—Ç–∞—Ö
sys.modules['config'].TARIFFS = {}
sys.modules['config'].ADMIN_IDS = [12345]
sys.modules['config'].ERROR_LOG_ADMIN = 12345

# –°–æ–∑–¥–∞–µ–º –º–æ–∫ –¥–ª—è logger
mock_logger = MagicMock()
sys.modules['logger'].get_logger.return_value = mock_logger

# –°–æ–∑–¥–∞–µ–º –º–æ–∫ –¥–ª—è pytz
mock_tz = MagicMock()
mock_tz.timezone.return_value = MagicMock()
sys.modules['pytz'] = mock_tz

class MockBot:
    """–ú–æ–∫ –±–æ—Ç–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    def __init__(self):
        self.sent_messages = []
        self.errors = []

    async def send_message(self, chat_id: int, text: str, **kwargs):
        """–ú–æ–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        self.sent_messages.append({
            'chat_id': chat_id,
            'text': text,
            'kwargs': kwargs,
            'timestamp': datetime.now()
        })
        print(f"üì§ –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id}: {text[:60]}...")
        return MagicMock(message_id=len(self.sent_messages))

    async def send_photo(self, chat_id: int, photo, **kwargs):
        """–ú–æ–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ"""
        self.sent_messages.append({
            'chat_id': chat_id,
            'text': f"PHOTO: {kwargs.get('caption', 'No caption')}",
            'kwargs': kwargs,
            'timestamp': datetime.now()
        })
        print(f"üì∑ –§–æ—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id}: {kwargs.get('caption', 'No caption')[:60]}...")
        return MagicMock(message_id=len(self.sent_messages))

class RealFunnelTester:
    """–¢–µ—Å—Ç–∏—Ä–æ–≤—â–∏–∫ —Ä–µ–∞–ª—å–Ω–æ–π –≤–æ—Ä–æ–Ω–∫–∏"""

    def __init__(self):
        self.test_db = None
        self.mock_bot = MockBot()
        self.test_results = []

    async def setup_test_database(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        temp_file = tempfile.NamedTemporaryFile(delete=False, suffix='.db')
        temp_file.close()
        self.test_db = temp_file.name

        # –û–±–Ω–æ–≤–ª—è–µ–º –ø—É—Ç—å –∫ –±–∞–∑–µ –≤ –∫–æ–Ω—Ñ–∏–≥–µ
        sys.modules['config'].DATABASE_PATH = self.test_db

        async with aiosqlite.connect(self.test_db) as conn:
            # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã –∫–∞–∫ –≤ —Ä–µ–∞–ª—å–Ω–æ–π –±–∞–∑–µ
            await conn.execute("""
                CREATE TABLE users (
                    user_id INTEGER PRIMARY KEY,
                    first_name TEXT,
                    username TEXT,
                    created_at TEXT,
                    welcome_message_sent INTEGER DEFAULT 0,
                    first_purchase INTEGER DEFAULT 1,
                    is_blocked INTEGER DEFAULT 0,
                    last_reminder_type TEXT,
                    last_reminder_sent TEXT,
                    updated_at TEXT DEFAULT CURRENT_TIMESTAMP
                )
            """)

            await conn.execute("""
                CREATE TABLE payments (
                    id INTEGER PRIMARY KEY,
                    user_id INTEGER,
                    amount REAL,
                    status TEXT,
                    created_at TEXT DEFAULT CURRENT_TIMESTAMP,
                    FOREIGN KEY (user_id) REFERENCES users(user_id)
                )
            """)

            await conn.commit()

        print(f"‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ —Å–æ–∑–¥–∞–Ω–∞: {self.test_db}")

    async def create_realistic_test_data(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""

        # –¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞ –¥–ª—è —Ä–∞—Å—á–µ—Ç–æ–≤
        now = datetime.now()

        async with aiosqlite.connect(self.test_db) as conn:
            test_users = [
                # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–ª—è reminder_day2 (–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω 1 –¥–µ–Ω—å –Ω–∞–∑–∞–¥)
                (
                    2001, "–ê–ª–µ–∫—Å–µ–π", "alex2001",
                    (now - timedelta(days=1)).strftime('%Y-%m-%d %H:%M:%S'),
                    1, 1, 0, None, None
                ),

                # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–ª—è reminder_day3 (–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω 2 –¥–Ω—è –Ω–∞–∑–∞–¥)
                (
                    2002, "–ú–∞—Ä–∏—è", "maria2002",
                    (now - timedelta(days=2)).strftime('%Y-%m-%d %H:%M:%S'),
                    1, 1, 0, "reminder_day2", None
                ),

                # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–ª—è reminder_day4 (–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω 3 –¥–Ω—è –Ω–∞–∑–∞–¥)
                (
                    2003, "–ò–≤–∞–Ω", "ivan2003",
                    (now - timedelta(days=3)).strftime('%Y-%m-%d %H:%M:%S'),
                    1, 1, 0, "reminder_day3", None
                ),

                # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–ª—è reminder_day5 (–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω 5 –¥–Ω–µ–π –Ω–∞–∑–∞–¥)
                (
                    2004, "–ï–ª–µ–Ω–∞", "elena2004",
                    (now - timedelta(days=5)).strftime('%Y-%m-%d %H:%M:%S'),
                    1, 1, 0, "reminder_day4", None
                ),

                # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –ø–æ–∫—É–ø–∫–æ–π (–ù–ï –¥–æ–ª–∂–µ–Ω –ø–æ–ª—É—á–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è)
                (
                    2005, "–ü–µ—Ç—Ä", "petr2005",
                    (now - timedelta(days=2)).strftime('%Y-%m-%d %H:%M:%S'),
                    1, 1, 0, None, None
                ),

                # –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
                (
                    2006, "–ê–Ω–Ω–∞", "anna2006",
                    (now - timedelta(days=1)).strftime('%Y-%m-%d %H:%M:%S'),
                    0, 1, 1, None, None
                ),

                # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, —É–∂–µ –ø–æ–ª—É—á–∏–≤—à–∏–π —Ç–µ–∫—É—â–µ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
                (
                    2007, "–°–µ—Ä–≥–µ–π", "sergey2007",
                    (now - timedelta(days=2)).strftime('%Y-%m-%d %H:%M:%S'),
                    1, 1, 0, "reminder_day3", None
                ),
            ]

            for user in test_users:
                await conn.execute("""
                    INSERT INTO users (user_id, first_name, username, created_at, welcome_message_sent,
                                     first_purchase, is_blocked, last_reminder_type, last_reminder_sent)
                    VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
                """, user)

            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–∫—É–ø–∫—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 2005
            await conn.execute("""
                INSERT INTO payments (user_id, amount, status)
                VALUES (?, ?, ?)
            """, (2005, 399.0, "succeeded"))

            await conn.commit()

        print("‚úÖ –†–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–∑–¥–∞–Ω—ã")
        print("üìä –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ø–æ –¥–Ω—è–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:")
        for user in test_users:
            days_ago = (now - datetime.strptime(user[3], '%Y-%m-%d %H:%M:%S')).days
            status = "BLOCKED" if user[6] else "ACTIVE"
            print(f"  {user[1]} (ID: {user[0]}) - {days_ago} –¥–Ω–µ–π –Ω–∞–∑–∞–¥, {status}")

    async def test_real_send_daily_reminders(self):
        """–¢–µ—Å—Ç —Ä–µ–∞–ª—å–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ send_daily_reminders"""
        print("\nüî• –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –†–ï–ê–õ–¨–ù–û–ô –§–£–ù–ö–¶–ò–ò send_daily_reminders...")

        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ—Å–ª–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–∫–æ–≤
        from onboarding_config import has_user_purchases

        # –°–æ–∑–¥–∞–µ–º –º–æ–∫–∏ –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–π
        async def mock_get_users_for_reminders():
            async with aiosqlite.connect(self.test_db) as conn:
                conn.row_factory = aiosqlite.Row
                c = await conn.cursor()
                await c.execute("""
                    SELECT user_id, first_name, username, created_at, last_reminder_type
                    FROM users
                    WHERE is_blocked = 0
                    AND user_id NOT IN (SELECT user_id FROM payments WHERE status = 'succeeded')
                    AND created_at IS NOT NULL
                """)
                users = await c.fetchall()
                return [dict(user) for user in users]

        async def mock_is_user_blocked(user_id):
            async with aiosqlite.connect(self.test_db) as conn:
                c = await conn.cursor()
                await c.execute("SELECT is_blocked FROM users WHERE user_id = ?", (user_id,))
                result = await c.fetchone()
                return bool(result[0]) if result else False

        async def mock_is_old_user(user_id, cutoff_date):
            # –≠–º—É–ª–∏—Ä—É–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Å—Ç–∞—Ä–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            # –í –Ω–∞—à–µ–º —Ç–µ—Å—Ç–µ –≤—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–æ–≤—ã–µ
            return False

        async def mock_check_database_user(user_id):
            async with aiosqlite.connect(self.test_db) as conn:
                c = await conn.cursor()
                await c.execute("SELECT * FROM users WHERE user_id = ?", (user_id,))
                result = await c.fetchone()
                if result:
                    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ—Ä—Ç–µ–∂ –≤ —Ñ–æ—Ä–º–∞—Ç–µ, –æ–∂–∏–¥–∞–µ–º–æ–º —Ñ—É–Ω–∫—Ü–∏–µ–π
                    return (
                        result[0],  # user_id
                        None, None,  # placeholder fields
                        result[2],   # username
                        None, None, None, None,  # more placeholders
                        result[1],   # first_name
                        None, None,  # more placeholders
                        result[4],   # welcome_message_sent
                        result[7],   # last_reminder_type
                        None  # last_reminder_sent
                    )
                return None

        async def mock_send_onboarding_message(bot, user_id, message_type, subscription_data):
            from onboarding_config import get_message_text

            first_name = subscription_data[8] if subscription_data and len(subscription_data) > 8 else "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
            message_data = get_message_text(message_type, first_name)

            if message_data:
                await bot.send_message(
                    chat_id=user_id,
                    text=message_data['text'],
                    reply_markup={"inline_keyboard": [[{"text": message_data["button_text"], "callback_data": message_data["callback_data"]}]]}
                )

                # –û–±–Ω–æ–≤–ª—è–µ–º last_reminder_type –≤ –±–∞–∑–µ
                async with aiosqlite.connect(self.test_db) as conn:
                    c = await conn.cursor()
                    await c.execute(
                        "UPDATE users SET last_reminder_type = ?, last_reminder_sent = ? WHERE user_id = ?",
                        (message_type, datetime.now().strftime('%Y-%m-%d %H:%M:%S'), user_id)
                    )
                    await conn.commit()

        # –≠–º—É–ª–∏—Ä—É–µ–º —Ä–µ–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é send_daily_reminders
        print("–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π...")
        users = await mock_get_users_for_reminders()
        print(f"–ù–∞–π–¥–µ–Ω–æ {len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π")

        current_time = datetime.now()
        reminders_sent = 0

        for user in users:
            user_id = user['user_id']
            first_name = user['first_name']
            username = user['username']
            created_at = user['created_at']
            last_reminder_type = user['last_reminder_type']

            print(f"\n–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} ({first_name})...")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            if await mock_is_user_blocked(user_id):
                print(f"  ‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                continue

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—Ç–∞—Ä—ã–º
            is_old_user_flag = await mock_is_old_user(user_id, "2025-07-11")
            if is_old_user_flag:
                print(f"  ‚ùå –°—Ç–∞—Ä—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                continue

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–∫—É–ø–∫–∏
            has_purchases = await has_user_purchases(user_id, self.test_db)
            if has_purchases:
                print(f"  ‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–º–µ–µ—Ç –ø–æ–∫—É–ø–∫–∏, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                continue

            # –í—ã—á–∏—Å–ª—è–µ–º –¥–Ω–∏ —Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
            try:
                registration_date = datetime.strptime(created_at, '%Y-%m-%d %H:%M:%S')
            except ValueError:
                print(f"  ‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã: {created_at}")
                continue

            days_since_registration = (current_time.date() - registration_date.date()).days
            print(f"  üìÖ –î–Ω–µ–π —Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {days_since_registration}")
            print(f"  üìù –ü–æ—Å–ª–µ–¥–Ω–µ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {last_reminder_type}")

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å
            message_type = None
            if days_since_registration == 1 and last_reminder_type != "reminder_day2":
                message_type = "reminder_day2"
            elif days_since_registration == 2 and last_reminder_type != "reminder_day3":
                message_type = "reminder_day3"
            elif days_since_registration == 3 and last_reminder_type != "reminder_day4":
                message_type = "reminder_day4"
            elif days_since_registration >= 4 and last_reminder_type != "reminder_day5":
                message_type = "reminder_day5"

            if message_type:
                print(f"  ‚úÖ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º {message_type}")
                subscription_data = await mock_check_database_user(user_id)
                if subscription_data:
                    await mock_send_onboarding_message(self.mock_bot, user_id, message_type, subscription_data)
                    reminders_sent += 1
                else:
                    print(f"  ‚ùå –ù–µ–ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            else:
                print(f"  ‚è≠Ô∏è –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è")

        print(f"\nüìä –ò—Ç–æ–≥–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: {reminders_sent}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        expected_reminders = 4  # 2001 (day2), 2002 (day3), 2003 (day4), 2004 (day5)
        success = reminders_sent == expected_reminders

        print(f"üéØ –û–∂–∏–¥–∞–ª–æ—Å—å: {expected_reminders}, –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {reminders_sent}")
        print(f"‚úÖ –¢–µ—Å—Ç {'–ü–†–û–®–ï–õ' if success else '–ü–†–û–í–ê–õ–ï–ù'}")

        return success

    async def analyze_sent_messages(self):
        """–ê–Ω–∞–ª–∏–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        print("\nüìã –ê–ù–ê–õ–ò–ó –û–¢–ü–†–ê–í–õ–ï–ù–ù–´–• –°–û–û–ë–©–ï–ù–ò–ô:")

        if not self.mock_bot.sent_messages:
            print("‚ùå –°–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏—Å—å")
            return

        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
        user_messages = {}
        for msg in self.mock_bot.sent_messages:
            user_id = msg['chat_id']
            if user_id not in user_messages:
                user_messages[user_id] = []
            user_messages[user_id].append(msg)

        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        for user_id, messages in user_messages.items():
            print(f"\nüë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}:")
            for i, msg in enumerate(messages, 1):
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—é
                text = msg['text']
                if "–ú–∏–Ω–∏-–ø–∞–∫–µ—Ç: 10 —Ñ–æ—Ç–æ –∑–∞ 399‚ÇΩ" in text:
                    msg_type = "reminder_day2"
                elif "–ù–∞–ø–æ–º–∏–Ω–∞–µ–º: –ú–∏–Ω–∏ ‚Äî 10 —Ñ–æ—Ç–æ –∑–∞ 399‚ÇΩ" in text:
                    msg_type = "reminder_day3"
                elif "–ü–æ–ø—Ä–æ–±—É–π –õ–∞–π—Ç: 20 —Ñ–æ—Ç–æ –∑–∞ 599‚ÇΩ" in text:
                    msg_type = "reminder_day4"
                elif "–ü–∞–∫–µ—Ç –ö–æ–º—Ñ–æ—Ä—Ç ‚Äî 50 —Ñ–æ—Ç–æ –∑–∞ 1199‚ÇΩ" in text:
                    msg_type = "reminder_day5"
                else:
                    msg_type = "unknown"

                print(f"  {i}. {msg_type}: {text[:50]}...")

    async def cleanup(self):
        """–û—á–∏—Å—Ç–∫–∞"""
        if self.test_db and os.path.exists(self.test_db):
            os.unlink(self.test_db)
            print("‚úÖ –¢–µ—Å—Ç–æ–≤–∞—è –±–∞–∑–∞ —É–¥–∞–ª–µ–Ω–∞")

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üî• –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –†–ï–ê–õ–¨–ù–û–ô –í–û–†–û–ù–ö–ò")
    print("="*50)

    tester = RealFunnelTester()

    try:
        await tester.setup_test_database()
        await tester.create_realistic_test_data()

        success = await tester.test_real_send_daily_reminders()
        await tester.analyze_sent_messages()

        print("\n" + "="*60)
        print("üèÅ –§–ò–ù–ê–õ–¨–ù–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢:")
        print("="*60)
        print(f"‚úÖ {'–£–°–ü–ï–•' if success else '–û–®–ò–ë–ö–ê'}: –í–æ—Ä–æ–Ω–∫–∞ {'—Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ' if success else '–∏–º–µ–µ—Ç –ø—Ä–æ–±–ª–µ–º—ã'}")

        return 0 if success else 1

    finally:
        await tester.cleanup()

if __name__ == "__main__":
    sys.exit(asyncio.run(main()))
