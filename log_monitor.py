#!/usr/bin/env python3
"""
–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ª–æ–≥–æ–≤ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–æ–≤—ã–µ –∑–∞–ø–∏—Å–∏ –≤ –ª–æ–≥–∞—Ö –ø–æ –º–µ—Ä–µ –∏—Ö –ø–æ—è–≤–ª–µ–Ω–∏—è
"""

import os
import time
import re
from datetime import datetime
from collections import defaultdict
import argparse

class LogMonitor:
    def __init__(self, log_dir="logs", main_log="bot.log"):
        self.log_dir = log_dir
        self.main_log = main_log
        self.file_positions = {}
        self.log_files = {
            'main': main_log,
            'database': f'{log_dir}/database.log',
            'generation': f'{log_dir}/generation.log',
            'keyboards': f'{log_dir}/keyboards.log',
            'api': f'{log_dir}/api.log',
            'payments': f'{log_dir}/payments.log',
            'errors': f'{log_dir}/errors.log'
        }

        # –¶–≤–µ—Ç–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –ª–æ–≥–æ–≤
        self.colors = {
            'main': '\033[36m',      # Cyan
            'database': '\033[32m',   # Green
            'generation': '\033[33m', # Yellow
            'keyboards': '\033[35m',  # Magenta
            'api': '\033[34m',        # Blue
            'payments': '\033[31m',   # Red
            'errors': '\033[91m'      # Bright Red
        }

        self.reset_color = '\033[0m'

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–∑–∏—Ü–∏–π —Ñ–∞–π–ª–æ–≤
        self._init_file_positions()

    def _init_file_positions(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø–æ–∑–∏—Ü–∏–∏ —Ñ–∞–π–ª–æ–≤"""
        for log_type, file_path in self.log_files.items():
            if os.path.exists(file_path):
                try:
                    with open(file_path, 'r', encoding='utf-8') as f:
                        f.seek(0, 2)  # –ü–µ—Ä–µ–º–µ—â–∞–µ–º—Å—è –≤ –∫–æ–Ω–µ—Ü —Ñ–∞–π–ª–∞
                        self.file_positions[log_type] = f.tell()
                except Exception:
                    self.file_positions[log_type] = 0
            else:
                self.file_positions[log_type] = 0

    def _get_new_lines(self, log_type, file_path):
        """–ü–æ–ª—É—á–∞–µ—Ç –Ω–æ–≤—ã–µ —Å—Ç—Ä–æ–∫–∏ –∏–∑ —Ñ–∞–π–ª–∞ –ª–æ–≥–∞"""
        if not os.path.exists(file_path):
            return []

        try:
            with open(file_path, 'r', encoding='utf-8') as f:
                f.seek(self.file_positions[log_type])
                new_lines = f.readlines()
                self.file_positions[log_type] = f.tell()
                return new_lines
        except UnicodeDecodeError:
            try:
                with open(file_path, 'r', encoding='latin-1') as f:
                    f.seek(self.file_positions[log_type])
                    new_lines = f.readlines()
                    self.file_positions[log_type] = f.tell()
                    return new_lines
            except Exception:
                return []
        except Exception:
            return []

    def _format_log_line(self, log_type, line):
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å—Ç—Ä–æ–∫—É –ª–æ–≥–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞"""
        color = self.colors.get(log_type, '')

        # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã –∏ –æ–±—Ä–µ–∑–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏
        line = line.strip()
        if len(line) > 150:
            line = line[:147] + "..."

        timestamp = datetime.now().strftime('%H:%M:%S')
        return f"{color}[{timestamp}] {log_type.upper()}: {line}{self.reset_color}"

    def _parse_log_level(self, line):
        """–ü–∞—Ä—Å–∏—Ç —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑ —Å—Ç—Ä–æ–∫–∏"""
        level_pattern = re.compile(r' - (\w+) - ')
        match = level_pattern.search(line)
        if match:
            return match.group(1)
        return 'INFO'

    def _should_show_line(self, line, filters):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å —Å—Ç—Ä–æ–∫—É —Å–æ–≥–ª–∞—Å–Ω–æ —Ñ–∏–ª—å—Ç—Ä–∞–º"""
        if not filters:
            return True

        line_lower = line.lower()

        for filter_type, filter_value in filters.items():
            if filter_type == 'level':
                if filter_value.upper() not in line.upper():
                    return False
            elif filter_type == 'contains':
                if filter_value.lower() not in line_lower:
                    return False
            elif filter_type == 'exclude':
                if filter_value.lower() in line_lower:
                    return False
            elif filter_type == 'user_id':
                if f"user {filter_value}" not in line and f"user_id={filter_value}" not in line:
                    return False

        return True

    def monitor(self, filters=None, show_all=False):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ª–æ–≥–æ–≤"""
        print(f"üîç –ú–û–ù–ò–¢–û–†–ò–ù–ì –õ–û–ì–û–í –í –†–ï–ê–õ–¨–ù–û–ú –í–†–ï–ú–ï–ù–ò")
        print(f"üìÅ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {self.log_dir}")
        print(f"‚è∞ –ù–∞—á–∞–ª–æ: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        print(f"üéØ –§–∏–ª—å—Ç—Ä—ã: {filters if filters else '–ù–µ—Ç'}")
        print("=" * 80)
        print()

        try:
            while True:
                new_entries = []

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã –ª–æ–≥–æ–≤
                for log_type, file_path in self.log_files.items():
                    new_lines = self._get_new_lines(log_type, file_path)

                    for line in new_lines:
                        if self._should_show_line(line, filters):
                            formatted_line = self._format_log_line(log_type, line)
                            new_entries.append((datetime.now(), formatted_line))

                # –í—ã–≤–æ–¥–∏–º –Ω–æ–≤—ã–µ –∑–∞–ø–∏—Å–∏
                if new_entries:
                    for timestamp, line in new_entries:
                        print(line)
                        print()

                time.sleep(1)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É

        except KeyboardInterrupt:
            print("\n\nüõë –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
            print(f"‚è∞ –ö–æ–Ω–µ—Ü: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")

def main():
    parser = argparse.ArgumentParser(description='–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ª–æ–≥–æ–≤ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏')
    parser.add_argument('--log-dir', default='logs', help='–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å –ª–æ–≥–∞–º–∏')
    parser.add_argument('--main-log', default='bot.log', help='–û—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª –ª–æ–≥–∞')
    parser.add_argument('--level', help='–§–∏–ª—å—Ç—Ä –ø–æ —É—Ä–æ–≤–Ω—é (INFO, ERROR, WARNING)')
    parser.add_argument('--contains', help='–°—Ç—Ä–æ–∫–∞, –∫–æ—Ç–æ—Ä–∞—è –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å—Å—è –≤ –ª–æ–≥–µ')
    parser.add_argument('--exclude', help='–°—Ç—Ä–æ–∫–∞, –∫–æ—Ç–æ—Ä–∞—è –¥–æ–ª–∂–Ω–∞ –∏—Å–∫–ª—é—á–∞—Ç—å—Å—è –∏–∑ –ª–æ–≥–∞')
    parser.add_argument('--user-id', help='ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏')
    parser.add_argument('--all', action='store_true', help='–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ª–æ–≥–∏')

    args = parser.parse_args()

    monitor = LogMonitor(args.log_dir, args.main_log)

    # –°–æ–±–∏—Ä–∞–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
    filters = {}
    if args.level:
        filters['level'] = args.level
    if args.contains:
        filters['contains'] = args.contains
    if args.exclude:
        filters['exclude'] = args.exclude
    if args.user_id:
        filters['user_id'] = args.user_id

    # –ï—Å–ª–∏ –Ω—É–∂–Ω–æ –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ª–æ–≥–∏
    if args.all:
        print("üìã –°–£–©–ï–°–¢–í–£–Æ–©–ò–ï –õ–û–ì–ò:")
        print("=" * 80)

        for log_type, file_path in monitor.log_files.items():
            if os.path.exists(file_path):
                try:
                    with open(file_path, 'r', encoding='utf-8') as f:
                        lines = f.readlines()
                        if lines:
                            print(f"\n{monitor.colors.get(log_type, '')}{log_type.upper()}:{monitor.reset_color}")
                            for line in lines[-10:]:  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å—Ç—Ä–æ–∫
                                if monitor._should_show_line(line, filters):
                                    formatted = monitor._format_log_line(log_type, line.strip())
                                    print(f"  {formatted}")
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è {file_path}: {e}")

        print("\n" + "=" * 80)

    # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
    monitor.monitor(filters)

if __name__ == "__main__":
    main()
