#!/usr/bin/env python3
"""
–£–ª—É—á—à–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–≤–µ–¥–æ–º–ª—è–µ—Ç —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–∫–∞—Ö
"""

import asyncio
import logging
import traceback
import sys
from datetime import datetime
from typing import Dict, Any, Optional
from aiogram import Bot
from aiogram.types import Update
from aiogram.exceptions import TelegramAPIError, TelegramForbiddenError
import pytz
from aiogram.enums import ParseMode

from config import ADMIN_IDS, ERROR_LOG_ADMIN
from handlers.utils import send_message_with_fallback, safe_escape_markdown as escape_md
from logger import get_logger

logger = get_logger('errors')

class ErrorHandler:
    """–°–∏—Å—Ç–µ–º–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏"""

    def __init__(self, bot: Bot):
        self.bot = bot
        self.moscow_tz = pytz.timezone('Europe/Moscow')
        self.error_counts = {}  # –°—á–µ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è —Å–ø–∞–º–∞
        self.critical_errors = set()  # –ú–Ω–æ–∂–µ—Å—Ç–≤–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫

    async def handle_error(self, update: Update, exception: Exception) -> bool:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—à–∏–±–∫–∏ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞–º

        Args:
            update: –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Telegram
            exception: –ò—Å–∫–ª—é—á–µ–Ω–∏–µ

        Returns:
            bool: True –µ—Å–ª–∏ –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞, False –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—à–∏–±–∫–µ
            error_info = self._extract_error_info(update, exception)

            # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ: {error_info['message']}", exc_info=True)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ—à–∏–±–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π
            if self._is_critical_error(exception):
                await self._send_critical_error_notification(error_info)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ —É–≤–µ–¥–æ–º–∏—Ç—å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
            if self._should_notify_developers(error_info):
                await self._send_developer_notification(error_info)

            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–ª—É—á–∞–∏
            if isinstance(exception, TelegramForbiddenError):
                return await self._handle_forbidden_error(update, exception)

            return True

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –æ—à–∏–±–æ–∫: {e}", exc_info=True)
            return False

    def _extract_error_info(self, update: Update, exception: Exception) -> Dict[str, Any]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—à–∏–±–∫–µ"""
        error_info = {
            'timestamp': datetime.now(self.moscow_tz).strftime('%Y-%m-%d %H:%M:%S MSK'),
            'exception_type': type(exception).__name__,
            'message': str(exception),
            'traceback': traceback.format_exc(),
            'update_type': update.__class__.__name__,
            'user_id': None,
            'chat_id': None,
            'update_data': {}
        }

        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        if update.message:
            error_info['user_id'] = update.message.from_user.id if update.message.from_user else None
            error_info['chat_id'] = update.message.chat.id
            error_info['update_data'] = {
                'text': update.message.text[:100] if update.message.text else None,
                'content_type': update.message.content_type
            }
        elif update.callback_query:
            error_info['user_id'] = update.callback_query.from_user.id if update.callback_query.from_user else None
            error_info['chat_id'] = update.callback_query.message.chat.id if update.callback_query.message else None
            error_info['update_data'] = {
                'callback_data': update.callback_query.data
            }

        return error_info

    def _is_critical_error(self, exception: Exception) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ—à–∏–±–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π"""
        critical_patterns = [
            'Database locked',
            'Connection failed',
            'Timeout',
            'MemoryError',
            'OutOfMemory',
            'Disk full',
            'Permission denied',
            'File not found',
            'ImportError',
            'ModuleNotFoundError'
        ]

        error_message = str(exception).lower()
        return any(pattern.lower() in error_message for pattern in critical_patterns)

    def _should_notify_developers(self, error_info: Dict[str, Any]) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ —É–≤–µ–¥–æ–º–∏—Ç—å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
        # –°–æ–∑–¥–∞–µ–º –∫–ª—é—á –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ –æ—à–∏–±–æ–∫
        error_key = f"{error_info['exception_type']}:{error_info['message'][:50]}"

        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫
        self.error_counts[error_key] = self.error_counts.get(error_key, 0) + 1

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –µ—Å–ª–∏:
        # 1. –≠—Ç–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞
        # 2. –û—à–∏–±–∫–∞ –ø–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è –±–æ–ª–µ–µ 3 —Ä–∞–∑
        # 3. –≠—Ç–æ –Ω–æ–≤–∞—è –æ—à–∏–±–∫–∞ (–Ω–µ –≤ –º–Ω–æ–∂–µ—Å—Ç–≤–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö)

        if self._is_critical_error(Exception(error_info['message'])):
            if error_key not in self.critical_errors:
                self.critical_errors.add(error_key)
                return True

        if self.error_counts[error_key] >= 3:
            return True

        return False

    async def _send_critical_error_notification(self, error_info: Dict[str, Any]):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–µ"""
        try:
            message_parts = [
                f"üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê ({error_info['timestamp']})",
                f"‚ùå –¢–∏–ø: {error_info['exception_type']}",
                f"üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ: {error_info['message']}",
            ]

            if error_info['user_id']:
                message_parts.append(f"üë§ User ID: {error_info['user_id']}")

            if error_info['chat_id']:
                message_parts.append(f"üí¨ Chat ID: {error_info['chat_id']}")

            message_parts.append(f"üìã Update: {error_info['update_type']}")

            # –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—ã–µ —Å—Ç—Ä–æ–∫–∏ —Ç—Ä–µ–π—Å–±–µ–∫–∞
            traceback_lines = error_info['traceback'].split('\n')[:5]
            message_parts.append(f"üîç Traceback:\n{chr(10).join(traceback_lines)}")

            message = escape_md("\n".join(message_parts), version=2)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–ª–∞–≤–Ω–æ–º—É —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É (ERROR_LOG_ADMIN)
            for admin_id in ERROR_LOG_ADMIN:
                try:
                    await send_message_with_fallback(
                        self.bot, admin_id, message,
                        parse_mode=ParseMode.MARKDOWN_V2
                    )
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–µ –≥–ª–∞–≤–Ω–æ–º—É —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É {admin_id}: {e}")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–µ: {e}")

    async def _send_developer_notification(self, error_info: Dict[str, Any]):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞–º"""
        try:
            message_parts = [
                f"‚ö†Ô∏è –û–®–ò–ë–ö–ê –ë–û–¢–ê ({error_info['timestamp']})",
                f"‚ùå –¢–∏–ø: {error_info['exception_type']}",
                f"üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ: {error_info['message']}",
            ]

            if error_info['user_id']:
                message_parts.append(f"üë§ User ID: {error_info['user_id']}")

            if error_info['update_data']:
                message_parts.append(f"üìã –î–∞–Ω–Ω—ã–µ: {str(error_info['update_data'])[:100]}...")

            message = escape_md("\n".join(message_parts), version=2)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–ª–∞–≤–Ω–æ–º—É —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É (ERROR_LOG_ADMIN)
            for admin_id in ERROR_LOG_ADMIN:
                try:
                    await send_message_with_fallback(
                        self.bot, admin_id, message,
                        parse_mode=ParseMode.MARKDOWN_V2
                    )
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≥–ª–∞–≤–Ω–æ–º—É —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É {admin_id}: {e}")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É: {e}")

    async def _handle_forbidden_error(self, update: Update, exception: TelegramForbiddenError) -> bool:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—à–∏–±–∫–∏ –∑–∞–ø—Ä–µ—Ç–∞ –¥–æ—Å—Ç—É–ø–∞"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±–æ—Ç–∞
            error_message = str(exception)
            if "bot was blocked by the user" in error_message.lower():
                # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ–±—Ä–∞–±–æ—Ç–∫–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
                from handlers.utils import handle_user_blocked_bot

                user_id = None
                if update.message:
                    user_id = update.message.from_user.id
                elif update.callback_query:
                    user_id = update.callback_query.from_user.id

                if user_id:
                    await handle_user_blocked_bot(user_id, error_message)
                    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞, –¥–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã")

                return True

            return False

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ forbidden error: {e}")
            return False

    async def send_error_summary(self):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–≤–æ–¥–∫—É –æ—à–∏–±–æ–∫ –∑–∞ –¥–µ–Ω—å"""
        try:
            if not self.error_counts:
                return

            timestamp = datetime.now(self.moscow_tz).strftime('%Y-%m-%d %H:%M:%S MSK')

            message_parts = [
                f"üìä –°–í–û–î–ö–ê –û–®–ò–ë–û–ö ({timestamp})",
                f"‚ùå –í—Å–µ–≥–æ –æ—à–∏–±–æ–∫: {sum(self.error_counts.values())}",
                f"üîç –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –æ—à–∏–±–æ–∫: {len(self.error_counts)}"
            ]

            # –¢–æ–ø-5 –æ—à–∏–±–æ–∫
            top_errors = sorted(self.error_counts.items(), key=lambda x: x[1], reverse=True)[:5]
            if top_errors:
                message_parts.append("\nüî• –¢–û–ü –û–®–ò–ë–û–ö:")
                for error_key, count in top_errors:
                    error_type = error_key.split(':')[0]
                    message_parts.append(f"‚Ä¢ {error_type}: {count} —Ä–∞–∑")

            message = escape_md("\n".join(message_parts), version=2)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–ª–∞–≤–Ω–æ–º—É —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É (ERROR_LOG_ADMIN)
            for admin_id in ERROR_LOG_ADMIN:
                try:
                    await send_message_with_fallback(
                        self.bot, admin_id, message,
                        parse_mode=ParseMode.MARKDOWN_V2
                    )
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–≤–æ–¥–∫–∏ –æ—à–∏–±–æ–∫ –≥–ª–∞–≤–Ω–æ–º—É —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É {admin_id}: {e}")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–≤–æ–¥–∫–∏ –æ—à–∏–±–æ–∫: {e}")

    def reset_error_counts(self):
        """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Å—á–µ—Ç—á–∏–∫–∏ –æ—à–∏–±–æ–∫"""
        self.error_counts.clear()
        self.critical_errors.clear()

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –æ—à–∏–±–æ–∫
error_handler_instance = None

def get_error_handler(bot: Bot) -> ErrorHandler:
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–ª–∏ —Å–æ–∑–¥–∞–µ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –æ—à–∏–±–æ–∫"""
    global error_handler_instance
    if error_handler_instance is None:
        error_handler_instance = ErrorHandler(bot)
    return error_handler_instance

async def error_handler(update: Update, exception: Exception) -> bool:
    """–ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
    if error_handler_instance:
        return await error_handler_instance.handle_error(update, exception)
    else:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ: {exception}", exc_info=True)
        return True
